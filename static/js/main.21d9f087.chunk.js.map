{"version":3,"sources":["ui-utils/txs.ts","contexts/ClientContext.tsx","settings/backend.ts","settings/index.ts","ui-utils/states.ts","components/EndpointSelector.tsx","components/NodeInfoModal.tsx","components/FooterRow.tsx","ui-utils/clients.ts","components/Login.tsx","components/UserAddress.tsx","components/Header.tsx","ui-utils/index.ts","components/AccountLink.tsx","components/TransactionLink.tsx","pages/account/TransfersTable.tsx","pages/account/AccountPage.tsx","ui-utils/sdkhelpers.ts","components/ContractLink.tsx","ui-utils/jsonInput.ts","pages/contract/InstantiationContract.tsx","pages/code/CodeInfo.tsx","pages/code/InstanceRow.tsx","pages/code/InstancesEmptyState.tsx","pages/code/CodePage.tsx","components/CodeLink.tsx","pages/code/NewCodePage.tsx","pages/codes/Code.tsx","pages/codes/Codes.tsx","pages/codes/CodesPage.tsx","components/JsonView.tsx","pages/contract/ExecuteContract.tsx","pages/contract/ExecutionsTable.tsx","pages/contract/HistoryInfo.tsx","pages/contract/InitializationInfo.tsx","pages/contract/QueryContract.tsx","pages/contract/ContractPage.tsx","pages/tx/ExecutionInfo.tsx","pages/tx/msgs/MsgExecuteContract.tsx","pages/tx/msgs/MsgInstantiateContract.tsx","pages/tx/msgs/MsgSend.tsx","pages/tx/msgs/magic.ts","pages/tx/msgs/MsgStoreCode.tsx","pages/tx/TxInfo.tsx","pages/tx/TxPage.tsx","components/FlexibleRouter.tsx","components/App.tsx","index.tsx"],"names":["isAnyMsgSend","msg","typeUrl","value","dummyContext","nodeUrl","client","typeRegistry","Registry","MsgStoreCode","MsgInstantiateContract","MsgExecuteContract","resetClient","setUserAddress","setSigningClient","ClientContext","React","createContext","knownBackends","devnetStargate","nodeUrls","denominations","addressPrefix","gasPrice","GasPrice","fromString","musselnet","pebblenet","keplrChainInfo","rpc","rest","chainId","chainName","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bip44","coinType","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","features","explorerUrlToTx","uninet","contractsUrl","settings","backend","id","process","Error","getCurrentBackend","deployment","routerType","runtimeCodes","isErrorState","state","isNonNullObject","type","isLoadingState","errorState","loadingState","EndpointSelector","urls","currentUrl","urlChanged","length","className","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","url","key","onClick","NodeInfoModal","htmlId","height","clientContext","useContext","tabIndex","role","aria-hidden","data-dismiss","aria-label","hrStyle","borderColor","whiteText","color","Separator","FooterRow","setChainId","useState","setHeight","updateHeight","useCallback","getHeight","then","catch","useEffect","getChainId","style","newUrl","data-target","href","loadKeplrWallet","async","chaindId","w","window","getOfflineSigner","keplr","experimentalSuggestChain","registerKeplrChain","enable","loadLedgerWallet","ledgerTransport","TransportWebUSB","create","LedgerSigner","hdPaths","makeCosmoshubPath","prefix","getAddressAndStargateSigningClient","loadWallet","mnemonic","signer","getAccounts","address","endpoint","StargateSigningClient","connectWithSigner","registry","createStargateSigningClient","webUsbMissing","anyNavigator","navigator","usb","Login","userAddress","loading","setLoading","error","setError","loginStargate","undefined","signingClient","message","logout","isUserLoggedIn","keplrButton","disabled","renderLoginButton","UserAddress","to","Header","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","toString","printableBalance","balance","join","parseMsgContract","json","fromUtf8","JSON","parse","AccountLink","maxLength","title","TransactionLink","transactionId","TransfersTable","transfers","executions","scope","execution","index","fromAddress","toAddress","AccountPage","addressParam","useParams","setBalance","setTransfers","Promise","all","getBalance","balances","filteredBalances","filter","searchTx","sentFromOrTo","txs","out","reduce","tx","decodedTx","Tx","decode","body","messages","i","decodedMsg","hash","getTransferFromStargateMsgSend","stargateEffect","pageTitle","aria-current","makeTags","oneLiner","split","pair","indexOf","parts","ContractLink","jsonInputStyle","container","display","flexDirection","order","warningBox","executePlaceholder","name","symbol","decimals","coinsPlaceholder","InstantiationContract","codeId","executing","setExecuting","memo","setMemo","label","setLabel","msgObject","setMsgObject","coinsObject","setCoinsObject","executeResponse","setExecuteResponse","result","width","placeholder","confirmGood","onChange","jsObject","event","target","executeResponseResult","instantiate","calculateFee","funds","contractAddress","transactionHash","CodeInfo","code","uploadTxHash","creator","checksum","InstanceRow","position","contract","setContractInfo","getContract","execTxs","admin","InstancesEmptyState","CodePage","codeIdParam","parseInt","details","setDetails","contracts","setContracts","setUploadTxHash","getContracts","getCodeDetails","tags","results","first","find","round","data","CodeLink","text","NewCodePage","wasm","setWasm","accept","e","files","item","wasmBytes","Uint8Array","arrayBuffer","upload","Code","instantiationInfo","setInstantiationInfo","instantiations","codeKey","source","Codes","codes","setCodes","getCodes","codeInfos","processed","response","reverse","CodesPage","JsonView","src","strLength","displayDataTypes","displayObjectSize","collapseStringsAfterLength","theme","transfer","recipient","ExecuteContract","execute","ExecutionsTable","Object","keys","sender","HistoryInfo","contractCodeHistory","entry","operation","InitializationInfo","instantiationTxHash","queryPlaceholder","QueryContract","queryObject","setQueryObject","queryResponse","setQueryResponse","cursor","queryResponseResult","queryContractSmart","formattedResult","stringify","isStargateMsgExecuteContract","setContractCodeHistory","setExecutions","setInstantiationTxHash","getContractCodeHistory","console","getAndSetContractCodeHistory","getAndSetDetails","getAndSetInstantiationTxHash","getExecutionFromStargateMsgExecuteContract","ContractPage","contractAddressParam","ExecutionInfo","timestamp","time","fromRfc3339","success","toLocaleString","toNumber","MsgSend","arrayStartsWith","a","b","some","byte","arrayEqual","magic","gzip","fromHex","showAllCode","setShowAllCode","dataInfo","useMemo","wasmByteCode","getFileType","ellideRight","toBase64","TxInfo","txb","authInfo","fee","gasUsed","gasWanted","signatures","TxPage","txId","txIdParam","block","setBlockInfo","getTx","getBlock","header","idx","lastIndexOf","substring","formatMsg","isAnyMsgStoreCode","isAnyMsgInstantiateContract","isAnyMsgExecuteContract","FlexibleRouter","children","basename","App","setNodeUrl","contextValue","setContextValue","StargateClient","connect","prevContextValue","Provider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21d9f087.chunk.js","sourcesContent":["import { Any } from \"cosmjs-types/google/protobuf/any\";\n\ntype IAny = Any;\n\nexport const msgSendTypeUrl = \"/cosmos.bank.v1beta1.MsgSend\";\nexport const msgStoreCodeTypeUrl = \"/cosmwasm.wasm.v1.MsgStoreCode\";\nexport const msgInstantiateContractTypeUrl = \"/cosmwasm.wasm.v1.MsgInstantiateContract\";\nexport const msgExecuteContractTypeUrl = \"/cosmwasm.wasm.v1.MsgExecuteContract\";\n\nexport interface AnyMsgSend {\n  readonly typeUrl: \"/cosmos.bank.v1beta1.MsgSend\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgStoreCode {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgInstantiateContract {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgExecuteContract {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n}\n\nexport function isAnyMsgSend(msg: IAny): msg is AnyMsgSend {\n  return msg.typeUrl === msgSendTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgStoreCode(msg: IAny): msg is AnyMsgStoreCode {\n  return msg.typeUrl === msgStoreCodeTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgInstantiateContract(msg: IAny): msg is AnyMsgInstantiateContract {\n  return msg.typeUrl === msgInstantiateContractTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgExecuteContract(msg: IAny): msg is AnyMsgExecuteContract {\n  return msg.typeUrl === msgExecuteContractTypeUrl && !!msg.value;\n}\n\n/* eslint-enable @typescript-eslint/camelcase */\n","import {\n  MsgExecuteContract,\n  MsgInstantiateContract,\n  MsgStoreCode,\n} from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport React from \"react\";\n\nimport { StargateClient, StargateSigningClient } from \"../ui-utils/clients\";\nimport {\n  msgExecuteContractTypeUrl,\n  msgInstantiateContractTypeUrl,\n  msgStoreCodeTypeUrl,\n} from \"../ui-utils/txs\";\n\nexport interface ClientContextValue {\n  readonly nodeUrl: string;\n  readonly client: StargateClient | null;\n  readonly typeRegistry: Registry;\n  readonly resetClient: (nodeUrl: string) => void;\n  readonly userAddress?: string;\n  readonly setUserAddress: (newUserAddress?: string) => void;\n  readonly signingClient?: StargateSigningClient;\n  readonly setSigningClient: (newSigningClient?: StargateSigningClient) => void;\n}\n\n/**\n * \"only used when a component does not have a matching Provider above it in the tree\"\n *\n * @see https://reactjs.org/docs/context.html#reactcreatecontext\n */\nconst dummyContext: ClientContextValue = {\n  nodeUrl: \"\",\n  client: null,\n  typeRegistry: new Registry([\n    [msgStoreCodeTypeUrl, MsgStoreCode],\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\n  ]),\n  resetClient: () => {},\n  setUserAddress: () => {},\n  setSigningClient: () => {},\n};\n\nexport const ClientContext = React.createContext<ClientContextValue>(dummyContext);\n","import { GasPrice } from \"@cosmjs/stargate\";\n\nexport type NonEmptyArray<ElementType> = { readonly 0: ElementType } & readonly ElementType[];\n\nexport interface BackendSettings {\n  readonly nodeUrls: NonEmptyArray<string>;\n  readonly denominations: readonly string[];\n  readonly addressPrefix: string;\n  readonly gasPrice: GasPrice;\n  readonly keplrChainInfo?: any;\n  readonly contractsUrl?: string;\n}\n\nconst devnetStargateSettings: BackendSettings = {\n  nodeUrls: [\"http://localhost:26659\"],\n  denominations: [\"ucosm\", \"ustake\"],\n  addressPrefix: \"wasm\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\nconst musselnetSettings: BackendSettings = {\n  nodeUrls: [\"https://rpc.musselnet.cosmwasm.com\"],\n  denominations: [\"umayo\", \"ufrites\"],\n  addressPrefix: \"wasm\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\nconst pebblenetSettings: BackendSettings = {\n  nodeUrls: [\"https://rpc.space-pussy-1.cybernode.ai\"],\n  denominations: [\"boot\"],\n  addressPrefix: \"bostrom\",\n  gasPrice: GasPrice.fromString(\"0.01boot\"),\n  keplrChainInfo: {\n    rpc: \"https://rpc.space-pussy-1.cybernode.ai\",\n    rest: \"https://lcd.space-pussy-1.cybernode.ai\",\n    chainId: \"space-pussy-1\",\n    chainName: \"Space Pussy\",\n    stakeCurrency: {\n      coinDenom: \"BOOT\",\n      coinMinimalDenom: \"BOOT\",\n      coinDecimals: 0,\n    },\n    bip44: {\n      coinType: 118,\n    },\n    bech32Config: {\n      bech32PrefixAccAddr: \"bostrom\",\n      bech32PrefixAccPub: \"bostrompub\",\n      bech32PrefixValAddr: \"bostromvaloper\",\n      bech32PrefixValPub: \"bostromvaloperpub\",\n      bech32PrefixConsAddr: \"bostromvalcons\",\n      bech32PrefixConsPub: \"bostromvalconspub\",\n    },\n    currencies: [\n      {\n        coinDenom: \"BOOT\",\n        coinMinimalDenom: \"BOOT\",\n        coinDecimals: 0,\n      },\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: \"BOOT\",\n        coinMinimalDenom: \"BOOT\",\n        coinDecimals: 0,\n      },\n    ],\n    features: [\"stargate\", \"ibc-transfer\", \"cosmwasm\"],\n    explorerUrlToTx: \"https://block-explorer.pebblenet.cosmwasm.com/transactions/{txHash}\",\n  },\n};\n\nconst uniSettings: BackendSettings = {\n  nodeUrls: [\"https://rpc.juno.giansalex.dev\"],\n  denominations: [\"ujunox\"],\n  addressPrefix: \"juno\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n  keplrChainInfo: {\n    rpc: \"https://rpc.juno.giansalex.dev:443\",\n    rest: \"https://lcd.juno.giansalex.dev:443\",\n    chainId: \"uni\",\n    chainName: \"Juno Testnet\",\n    stakeCurrency: {\n      coinDenom: \"JUNOX\",\n      coinMinimalDenom: \"ujunox\",\n      coinDecimals: 6,\n    },\n    bip44: {\n      coinType: 118,\n    },\n    bech32Config: {\n      bech32PrefixAccAddr: \"juno\",\n      bech32PrefixAccPub: \"junopub\",\n      bech32PrefixValAddr: \"junovaloper\",\n      bech32PrefixValPub: \"junovaloperpub\",\n      bech32PrefixConsAddr: \"junovalcons\",\n      bech32PrefixConsPub: \"junovalconspub\",\n    },\n    currencies: [\n      {\n        coinDenom: \"JUNOX\",\n        coinMinimalDenom: \"ujunox\",\n        coinDecimals: 6,\n      },\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: \"JUNOX\",\n        coinMinimalDenom: \"ujunox\",\n        coinDecimals: 6,\n      },\n    ],\n    features: [\"stargate\", \"ibc-transfer\", \"cosmwasm\", \"no-legacy-stdTx\"],\n    explorerUrlToTx: \"https://uni.junoscan.com/transactions/{txHash}\",\n    \n  },\n  contractsUrl: \"https://graph.juno.giansalex.dev/api/rest/page\"\n};\n\nconst knownBackends: Partial<Record<string, BackendSettings>> = {\n  devnetStargate: devnetStargateSettings,\n  musselnet: musselnetSettings,\n  pebblenet: pebblenetSettings,\n  uninet: uniSettings,\n};\n\nexport function getCurrentBackend(): BackendSettings {\n  const id = process.env.REACT_APP_BACKEND || \"uninet\";\n  const backend = knownBackends[id];\n  if (!backend) {\n    throw new Error(`No backend found for the given ID \"${id}\"`);\n  }\n  return backend;\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { BackendSettings, getCurrentBackend } from \"./backend\";\n\nexport interface DeploymentSettings {\n  readonly routerType: \"browser-router\" | \"hash-router\";\n}\n\nexport interface Settings {\n  /** Where do we connect to */\n  readonly backend: BackendSettings;\n  /** How are we hosted */\n  readonly deployment: DeploymentSettings;\n}\n\nconst developmentServer: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst ghPages: DeploymentSettings = {\n  routerType: \"hash-router\",\n};\n\nconst firebaseHosting: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nexport const settings: Settings = {\n  backend: getCurrentBackend(),\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\n};\n","import { isNonNullObject } from \"@cosmjs/utils\";\n\nconst runtimeCodes = {\n  error: \"_\\u2588_ErrorState_\\u2588_\" as const,\n  loading: \"_\\u2588_LoadingState_\\u2588_\" as const,\n};\n\nexport interface ErrorState {\n  readonly type: typeof runtimeCodes.error;\n}\n\nexport interface LoadingState {\n  readonly type: typeof runtimeCodes.loading;\n}\n\nexport function isErrorState(state: unknown): state is ErrorState {\n  if (!isNonNullObject(state)) return false;\n  return (state as ErrorState).type === runtimeCodes.error;\n}\n\nexport function isLoadingState(state: unknown): state is LoadingState {\n  if (!isNonNullObject(state)) return false;\n  return (state as LoadingState).type === runtimeCodes.loading;\n}\n\nexport const errorState: ErrorState = { type: runtimeCodes.error };\nexport const loadingState: LoadingState = { type: runtimeCodes.loading };\n","import React, { Fragment } from \"react\";\n\nimport { NonEmptyArray } from \"../settings/backend\";\n\ninterface Props {\n  readonly currentUrl: string;\n  readonly urls: NonEmptyArray<string>;\n  readonly urlChanged: (newUrl: string) => void;\n}\n\nexport function EndpointSelector({ urls, currentUrl, urlChanged }: Props): JSX.Element {\n  if (urls.length === 1) {\n    return <Fragment>{currentUrl}</Fragment>;\n  } else {\n    return (\n      <Fragment>\n        <button\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\n          type=\"button\"\n          id=\"dropdownMenuButton\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          {currentUrl}\n        </button>\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n          {urls.map((url) => (\n            <button\n              key={url}\n              className={`dropdown-item` + (url === currentUrl ? \" active\" : \"\")}\n              type=\"button\"\n              onClick={() => urlChanged(url)}\n            >\n              {url}\n            </button>\n          ))}\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../ui-utils/states\";\n\ninterface Props {\n  readonly htmlId: string;\n  readonly chainId: string | ErrorState | LoadingState;\n  readonly height: number | ErrorState | LoadingState;\n}\n\nexport function NodeInfoModal({ htmlId, chainId, height }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n\n  return (\n    <div\n      className=\"modal fade\"\n      id={htmlId}\n      tabIndex={-1}\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div className=\"modal-dialog\" role=\"document\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n              Node info\n            </h5>\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            Endpoint: {clientContext.nodeUrl}\n            <br />\n            Chain ID: {isLoadingState(chainId) ? \"Loading …\" : isErrorState(chainId) ? \"Error\" : chainId}\n            <br />\n            Height: {isLoadingState(height) ? \"Loading …\" : isErrorState(height) ? \"Error\" : height}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment } from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport { ErrorState, errorState, LoadingState, loadingState } from \"../ui-utils/states\";\nimport { EndpointSelector } from \"./EndpointSelector\";\nimport { NodeInfoModal } from \"./NodeInfoModal\";\n\ninterface Props {}\n\nconst hrStyle: React.CSSProperties = {\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\n};\nconst whiteText = { color: \"#f0f0f0\" };\n\nfunction Separator(): JSX.Element {\n  return <Fragment> | </Fragment>;\n}\n\n/** Place me as a row in a container */\nexport function FooterRow(): JSX.Element {\n  const { client, nodeUrl, resetClient } = React.useContext(ClientContext);\n\n  const [chainId, setChainId] = React.useState<string | ErrorState | LoadingState>(loadingState);\n  const [height, setHeight] = React.useState<number | ErrorState | LoadingState>(loadingState);\n\n  const updateHeight = React.useCallback(() => {\n    client\n      ?.getHeight()\n      .then(setHeight)\n      .catch(() => setHeight(errorState));\n  }, [client]);\n\n  React.useEffect(() => {\n    client\n      ?.getChainId()\n      .then(setChainId)\n      .catch(() => setChainId(errorState));\n    updateHeight();\n  }, [client, updateHeight]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <hr style={hrStyle} />\n        <NodeInfoModal htmlId=\"nodeInfoModal\" chainId={chainId} height={height} />\n        <div style={whiteText} className=\"dropdown text-center font-weight-light mb-3\">\n          Endpoint{\" \"}\n          <EndpointSelector\n            currentUrl={nodeUrl}\n            urls={settings.backend.nodeUrls}\n            urlChanged={(newUrl) => resetClient(newUrl)}\n          />{\" \"}\n          <button\n            type=\"button\"\n            className=\"btn btn-sm btn-secondary\"\n            data-toggle=\"modal\"\n            data-target=\"#nodeInfoModal\"\n            onClick={updateHeight}\n          >\n            Node info\n          </button>\n          <Separator />\n          <a href=\"https://github.com/CosmWasm/code-explorer\" style={whiteText}>\n            Fork me on GitHub\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { makeCosmoshubPath, OfflineAminoSigner } from \"@cosmjs/amino\";\nimport {\n  CosmWasmClient as StargateClient,\n  SigningCosmWasmClient as StargateSigningClient,\n} from \"@cosmjs/cosmwasm-stargate\";\nimport {\n  MsgExecuteContract,\n  MsgInstantiateContract,\n  MsgStoreCode,\n} from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport { LedgerSigner } from \"@cosmjs/ledger-amino\";\nimport { OfflineDirectSigner, OfflineSigner, Registry } from \"@cosmjs/proto-signing\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\n\nimport { settings } from \"../settings\";\nimport { msgExecuteContractTypeUrl, msgInstantiateContractTypeUrl, msgStoreCodeTypeUrl } from \"./txs\";\n\nexport { StargateClient, StargateSigningClient };\n\nexport type WalletLoaderDirect = (\n  addressPrefix: string,\n  mnemonic?: string,\n) => Promise<OfflineDirectSigner | OfflineAminoSigner>;\n\nexport function loadKeplrWallet(client: StargateClient, keplrChainInfo: any): WalletLoaderDirect {\n  return async () => {\n    const chaindId = await client.getChainId();\n\n    await registerKeplrChain(keplrChainInfo);\n    const w = window as any;\n    await w.keplr.enable(chaindId);\n\n    return w.getOfflineSigner(chaindId);\n  };\n}\n\nasync function registerKeplrChain(keplrChainInfo: any): Promise<void> {\n  const w = window as any;\n  if (!w.getOfflineSigner || !w.keplr) {\n    throw new Error(\"Please install keplr extension\");\n  }\n\n  if (!w.keplr.experimentalSuggestChain) {\n    throw new Error(\"Please use the recent version of keplr extension\");\n  }\n\n  try {\n    await w.keplr.experimentalSuggestChain(keplrChainInfo);\n  } catch {\n    throw new Error(\"Failed to suggest the chain\");\n  }\n}\n\nexport async function loadLedgerWallet(addressPrefix: string): Promise<OfflineAminoSigner> {\n  const interactiveTimeout = 120_000;\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\n\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\n}\n\nasync function createStargateSigningClient(signer: OfflineSigner): Promise<StargateSigningClient> {\n  const { nodeUrls } = settings.backend;\n  const endpoint = nodeUrls[0];\n\n  const typeRegistry = new Registry([\n    [msgStoreCodeTypeUrl, MsgStoreCode],\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\n  ]);\n\n  return StargateSigningClient.connectWithSigner(endpoint, signer, {\n    registry: typeRegistry,\n  });\n}\n\nexport async function getAddressAndStargateSigningClient(\n  loadWallet: WalletLoaderDirect,\n  mnemonic?: string,\n): Promise<[string, StargateSigningClient]> {\n  const signer = await loadWallet(settings.backend.addressPrefix, mnemonic);\n  const userAddress = (await signer.getAccounts())[0].address;\n  const signingClient = await createStargateSigningClient(signer);\n  return [userAddress, signingClient];\n}\n\nexport function webUsbMissing(): boolean {\n  const anyNavigator: any = navigator;\n  return !anyNavigator?.usb;\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport {\n  getAddressAndStargateSigningClient,\n  loadKeplrWallet,\n  loadLedgerWallet,\n  WalletLoaderDirect,\n  webUsbMissing,\n} from \"../ui-utils/clients\";\n\nexport function Login(): JSX.Element {\n  const { userAddress, setUserAddress, setSigningClient, client } = React.useContext(ClientContext);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  async function loginStargate(loadWallet: WalletLoaderDirect): Promise<void> {\n    setLoading(true);\n    setError(undefined);\n\n    try {\n      const [userAddress, signingClient] = await getAddressAndStargateSigningClient(loadWallet);\n      setUserAddress(userAddress);\n      setSigningClient(signingClient);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setLoading(false);\n  }\n\n  function logout(): void {\n    setError(undefined);\n    setUserAddress(undefined);\n    setSigningClient(undefined);\n  }\n\n  function renderLoginButton(): JSX.Element {\n    const { keplrChainInfo } = settings.backend;\n\n    let keplrButton;\n    if (keplrChainInfo !== undefined && client !== null) {\n      keplrButton = (\n        <button\n          className=\"dropdown-item\"\n          onClick={async () => loginStargate(loadKeplrWallet(client, keplrChainInfo))}\n        >\n          Keplr wallet\n        </button>\n      );\n    }\n\n    return loading ? (\n      <button className=\"btn btn-primary\" type=\"button\" disabled>\n        <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n        Loading...\n      </button>\n    ) : (\n      <>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          Login\n        </button>\n        <div className=\"dropdown-menu\">\n          <h6 className=\"dropdown-header\">with</h6>\n          {keplrButton}\n          <button\n            className=\"dropdown-item\"\n            onClick={() => loginStargate(loadLedgerWallet)}\n            disabled={webUsbMissing()}\n          >\n            Ledger wallet\n          </button>\n        </div>\n      </>\n    );\n  }\n\n  function renderLogoutButton(): JSX.Element {\n    return (\n      <button className=\"btn btn-primary\" onClick={logout}>\n        Logout\n      </button>\n    );\n  }\n\n  const isUserLoggedIn = !!userAddress;\n\n  return (\n    <div className=\"d-flex align-items-center justify-content-end\">\n      {error ? <div className=\"mr-3 p-2 rounded bg-white text-danger\">{error}</div> : null}\n      {isUserLoggedIn ? renderLogoutButton() : renderLoginButton()}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\n\nexport function UserAddress(): JSX.Element {\n  const { userAddress } = React.useContext(ClientContext);\n\n  return userAddress ? (\n    <>\n      <Link className=\"btn btn-light mr-3\" to={`/codes/new`}>\n        Upload\n      </Link>\n      <div className=\"mr-3 p-2 rounded bg-white\">\n        <span className=\"badge\">{userAddress}</span>\n      </div>\n    </>\n  ) : (\n    <></>\n  );\n}\n","import React from \"react\";\n\nimport { Login } from \"./Login\";\nimport { UserAddress } from \"./UserAddress\";\n\nexport function Header(): JSX.Element {\n  return (\n    <header className=\"mt-3 p-0 d-flex align-items-center justify-content-end container contract-container\">\n      <UserAddress />\n      <Login />\n    </header>\n  );\n}\n","import { fromUtf8 } from \"@cosmjs/encoding\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Coin } from \"cosmjs-types/cosmos/base/v1beta1/coin\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(str.length - tailLen, str.length);\n}\n\nexport function ellideRight(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = maxOutLen - ellide.length;\n  return str.slice(0, frontLen) + ellide;\n}\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin: Coin): string {\n  if (coin.denom?.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount ?? \"0\", 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance: readonly Coin[]): string {\n  if (balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport function parseMsgContract(msg: Uint8Array): any {\n  const json = fromUtf8(msg);\n\n  return JSON.parse(json);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function AccountLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/accounts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly transactionId: string;\n  readonly maxLength?: number | null;\n}\n\nexport function TransactionLink({ transactionId, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/transactions/${transactionId}`} title={transactionId}>\n      {ellideMiddle(transactionId, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { MsgSend } from \"cosmjs-types/cosmos/bank/v1beta1/tx\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { printableBalance } from \"../../ui-utils\";\n\nexport interface Transfer {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgSend;\n}\n\ninterface Props {\n  readonly transfers: readonly Transfer[];\n}\n\nexport function TransfersTable({ transfers: executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n          <th scope=\"col\">Recipient</th>\n          <th scope=\"col\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.fromAddress} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.toAddress} />\n            </td>\n            <td>{printableBalance(execution.msg.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { Registry } from \"@cosmjs/proto-signing\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport { Coin } from \"cosmjs-types/cosmos/base/v1beta1/coin\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { AnyMsgSend, isAnyMsgSend } from \"../../ui-utils/txs\";\nimport { Transfer, TransfersTable } from \"./TransfersTable\";\n\ntype ICoin = Coin;\n\nfunction getTransferFromStargateMsgSend(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: AnyMsgSend, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nconst stargateEffect = (\n  client: StargateClient,\n  address: string,\n  typeRegistry: Registry,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setTransfers: (transfers: readonly Transfer[] | ErrorState | LoadingState) => void,\n) => (): void => {\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(address, denom)))\n    .then((balances) => {\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n      setBalance(filteredBalances);\n    })\n    .catch(() => setBalance(errorState));\n  client\n    .searchTx({ sentFromOrTo: address })\n    .then((txs) => {\n      const out = txs.reduce((transfers: readonly Transfer[], tx: IndexedTx): readonly Transfer[] => {\n        const decodedTx = Tx.decode(tx.tx);\n        const txTransfers = (decodedTx?.body?.messages ?? [])\n          .filter(isAnyMsgSend)\n          .map(getTransferFromStargateMsgSend(typeRegistry, tx));\n        return [...transfers, ...txTransfers];\n      }, []);\n      setTransfers(out);\n    })\n    .catch(() => setTransfers(errorState));\n};\n\nexport function AccountPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { address: addressParam } = useParams<{ readonly address: string }>();\n  const address = addressParam || \"\";\n\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [transfers, setTransfers] = React.useState<readonly Transfer[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    client !== null ? stargateEffect(client, address, typeRegistry, setBalance, setTransfers) : () => {},\n    [address, client, typeRegistry],\n  );\n\n  const pageTitle = <span title={address}>Account {ellideMiddle(address, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Token transfers</h2>\n            <p>Incoming and outgoing bank token transfers</p>\n            {isLoadingState(transfers) ? (\n              <p>Loading …</p>\n            ) : isErrorState(transfers) ? (\n              <p>Error</p>\n            ) : transfers.length === 0 ? (\n              <p>No transfer found</p>\n            ) : (\n              <TransfersTable transfers={transfers} />\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","export interface Tag {\n  readonly key: string;\n  readonly value: string;\n}\n\nexport function makeTags(oneLiner: string): Tag[] {\n  return oneLiner.split(\"&\").map((pair) => {\n    if (pair.indexOf(\"=\") === -1) throw new Error(\"Parsing error: Equal sign missing\");\n    const parts = pair.split(\"=\");\n    if (parts.length > 2) {\n      throw new Error(\n        \"Parsing error: Multiple equal signs found. If you need escaping support, please create a PR.\",\n      );\n    }\n    const [key, value] = parts;\n    if (!key) throw new Error(\"Parsing error: Key must not be empty\");\n    return { key, value };\n  });\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function ContractLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/contracts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","// Place error box below text box, so appearing error does not push text box down\nexport const jsonInputStyle = {\n  container: { display: \"flex\", flexDirection: \"column\" },\n  body: { order: \"1\" },\n  warningBox: { order: \"2\" },\n};\n","import { InstantiateResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { calculateFee, Coin } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\nimport { ContractLink } from \"../../components/ContractLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\nconst executePlaceholder = {\n  name: \"Nation coin\",\n  symbol: \"NTN\",\n  decimals: 6,\n};\n\nconst coinsPlaceholder = [{ denom: settings.backend.denominations[0], amount: \"1\" }];\n\ninterface Props {\n  readonly codeId: number;\n}\n\nexport function InstantiationContract({ codeId }: Props): JSX.Element {\n  const { userAddress, signingClient } = React.useContext(ClientContext);\n\n  const [executing, setExecuting] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  const [memo, setMemo] = React.useState<string>();\n  const [label, setLabel] = React.useState<string>();\n\n  const [msgObject, setMsgObject] = React.useState<Result<Record<string, any>>>();\n  const [coinsObject, setCoinsObject] = React.useState<Result<ReadonlyArray<Coin>>>();\n\n  const [executeResponse, setExecuteResponse] = React.useState<Result<InstantiateResult>>();\n\n  React.useEffect(() => {\n    setMsgObject({ result: executePlaceholder });\n    setCoinsObject({ result: coinsPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (msgObject?.error) {\n      setError(msgObject.error);\n      return;\n    }\n\n    if (executeResponse?.error) {\n      setError(executeResponse.error);\n      return;\n    }\n\n    if (coinsObject?.error) {\n      setError(coinsObject.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [coinsObject, executeResponse, msgObject]);\n\n  async function executeContract(): Promise<void> {\n    if (!msgObject?.result || !userAddress || !label || !signingClient) return;\n\n    setExecuting(true);\n\n    try {\n      const executeResponseResult: InstantiateResult = await signingClient.instantiate(\n        userAddress,\n        codeId,\n        msgObject.result,\n        label,\n        calculateFee(600000, settings.backend.gasPrice),\n        {\n          memo: memo,\n          funds: coinsObject?.result,\n        },\n      );\n      setExecuteResponse({ result: executeResponseResult });\n    } catch (error) {\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\n    }\n\n    setExecuting(false);\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Instantiate contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={executePlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setMsgObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Coins to transfer:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"120px\"\n            placeholder={coinsPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setCoinsObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <div className=\"form-group row flex-grow-1\">\n            <label className=\"col-sm-2 col-form-label\">Label</label>\n            <div className=\"col-sm-10\">\n              <input\n                className=\"form-control\"\n                value={label}\n                onChange={(event) => setLabel(event.target.value)}\n              />\n            </div>\n          </div>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <div className=\"form-group row flex-grow-1\">\n            <label className=\"col-sm-2 col-form-label\">Memo</label>\n            <div className=\"col-sm-10\">\n              <input\n                className=\"form-control\"\n                value={memo}\n                onChange={(event) => setMemo(event.target.value)}\n              />\n            </div>\n          </div>\n        </li>\n        <div className=\"list-group-item btn-group\">\n          {executing ? (\n            <button className=\"btn btn-primary\" type=\"button\" disabled>\n              <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n              Executing...\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary\"\n              onClick={executeContract}\n              disabled={!msgObject?.result || !signingClient}\n            >\n              Instantiate contract\n            </button>\n          )}\n        </div>\n        {executeResponse?.result ? (\n          <>\n            <li className=\"list-group-item\">\n              <span className=\"font-weight-bold\">Response:</span>\n            </li>\n            <li className=\"list-group-item\">\n              <div className=\"row mb-3\">\n                <div className=\"col-md-3\">\n                  <span>Contract:</span>\n                </div>\n                <div className=\"col-md-9\">\n                  <ContractLink address={executeResponse.result.contractAddress} maxLength={99} />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-md-3\">\n                  <span>Transaction:</span>\n                </div>\n                <div className=\"col-md-9\">\n                  <TransactionLink transactionId={executeResponse.result.transactionHash} maxLength={40} />\n                </div>\n              </div>\n            </li>\n          </>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import { CodeDetails } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly code: CodeDetails;\n  readonly uploadTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function CodeInfo({ code, uploadTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Upload transaction:{\" \"}\n          {isLoadingState(uploadTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(uploadTxHash) ? (\n            \"Error\"\n          ) : uploadTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={uploadTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={code.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">Checksum: {code.checksum}</li>\n      </ul>\n    </div>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ContractLink } from \"../../components/ContractLink\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly position: number;\n  readonly address: string;\n}\n\nfunction InstanceRow({ position, address }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [contract, setContractInfo] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    (client?.getContract(address) as Promise<Contract>)\n      .then((execTxs) => setContractInfo(execTxs))\n      .catch(() => setContractInfo(errorState));\n  }, [client, address]);\n\n  return isLoadingState(contract) ? (\n    <tr>\n      <td>Loading ...</td>\n    </tr>\n  ) : isErrorState(contract) ? (\n    <tr>\n      <td>Error</td>\n    </tr>\n  ) : (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <ContractLink address={contract.address} />\n      </td>\n      <td>\n        <AccountLink address={contract.creator} />\n      </td>\n      <td>{contract.admin ? <AccountLink address={contract.admin} /> : \"–\"}</td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import React from \"react\";\n\nexport function InstancesEmptyState(): JSX.Element {\n  return <p>Code is not yet instantiated</p>;\n}\n","import \"./CodePage.css\";\n\nimport { CodeDetails } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { InstantiationContract } from \"../contract/InstantiationContract\";\nimport { CodeInfo } from \"./CodeInfo\";\nimport InstanceRow from \"./InstanceRow\";\nimport { InstancesEmptyState } from \"./InstancesEmptyState\";\n\nexport function CodePage(): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const { codeId: codeIdParam } = useParams<{ readonly codeId: string }>();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | ErrorState | LoadingState>(loadingState);\n  const [contracts, setContracts] = React.useState<readonly string[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n  const [uploadTxHash, setUploadTxHash] = React.useState<string | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(codeId)\n      .then(setContracts)\n      .catch(() => setContracts(errorState));\n    client\n      ?.getCodeDetails(codeId)\n      .then(setDetails)\n      .catch(() => setDetails(errorState));\n    client\n      ?.searchTx({\n        tags: makeTags(`message.module=wasm&store_code.code_id=${codeId}`),\n      })\n      .then((results) => {\n        const first = results.find(() => true);\n        setUploadTxHash(first?.hash);\n      });\n  }, [client, codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">Type: Wasm</li>\n              <li className=\"list-group-item\">\n                Size:{\" \"}\n                {isLoadingState(details)\n                  ? \"Loading …\"\n                  : isErrorState(details)\n                  ? \"Error\"\n                  : Math.round(details.data.length / 1024) + \" KiB\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <span>Loading …</span>\n            ) : isErrorState(details) ? (\n              <span>Error</span>\n            ) : (\n              <>\n                <CodeInfo code={details} uploadTxHash={uploadTxHash} />\n                <InstantiationContract codeId={details.id} />\n              </>\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Instances</h2>\n            {isLoadingState(contracts) ? (\n              <p>Loading …</p>\n            ) : isErrorState(contracts) ? (\n              <p>Error loading instances</p>\n            ) : contracts.length === 0 ? (\n              <InstancesEmptyState />\n            ) : (\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Label</th>\n                    <th scope=\"col\">Contract</th>\n                    <th scope=\"col\">Creator</th>\n                    <th scope=\"col\">Admin</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {contracts.map((address, index) => (\n                    <InstanceRow position={index + 1} address={address} key={address} />\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n  readonly text?: string;\n}\n\nexport function CodeLink({ codeId, text }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>{text || `Code #${codeId}`}</Link>;\n}\n","import \"./NewCodePage.css\";\n\nimport { UploadResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { calculateFee } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { Result } from \"../contract/ContractPage\";\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { settings } from \"../../settings\";\n\nexport function NewCodePage(): JSX.Element {\n  const { userAddress, signingClient } = React.useContext(ClientContext);\n  const [wasm, setWasm] = React.useState<File | null>();\n  const [memo, setMemo] = React.useState<string>();\n\n  const [executing, setExecuting] = React.useState(false);\n  const [executeResponse, setExecuteResponse] = React.useState<Result<UploadResult>>();\n  const [error, setError] = React.useState<string>();\n\n  React.useEffect(() => {\n    if (executeResponse?.error) {\n      setError(executeResponse.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [executeResponse]);\n\n  async function uploadCode(): Promise<void> {\n    if (!userAddress || !wasm || !signingClient) return;\n\n    setExecuting(true);\n    const wasmBytes = new Uint8Array(await wasm.arrayBuffer());\n    try {\n      const executeResponseResult: UploadResult = await signingClient.upload(\n        userAddress,\n        wasmBytes,\n        calculateFee(2000000, settings.backend.gasPrice),\n        memo\n      );\n      setExecuteResponse({ result: executeResponseResult });\n    } catch (error) {\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\n    }\n\n    setExecuting(false);\n  }\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  New Code\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <div className=\"card mb-3\">\n              <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item d-flex align-items-baseline\">\n                  <span>New Wasm Code</span>\n                </li>\n                <li className=\"list-group-item d-flex align-items-baseline\">\n                  <span title=\"The wasm code\">Wasm:</span>\n                  <div className=\"file btn btn-secondary\">\n                    {wasm?.name ?? \"Select file\"}\n                    <input\n                      type=\"file\"\n                      accept=\".wasm\"\n                      className=\"ml-3 flex-grow-1 form-control-file\"\n                      onChange={(e) => setWasm(e.target.files?.item(0))}\n                    />\n                  </div>\n                </li>\n                <li className=\"list-group-item d-flex align-items-baseline\">\n                  <label title=\"The tx memo\">Memo:</label>\n                  <input\n                    className=\"ml-3 flex-grow-1 form-control\"\n                    value={memo}\n                    onChange={(event) => setMemo(event.target.value)}\n                  />\n                </li>\n                <div className=\"list-group-item btn-group\">\n                  {executing ? (\n                    <button className=\"btn btn-primary\" type=\"button\" disabled>\n                      <span\n                        className=\"spinner-border spinner-border-sm mr-2\"\n                        role=\"status\"\n                        aria-hidden=\"true\"\n                      ></span>\n                      Executing...\n                    </button>\n                  ) : (\n                    <button className=\"btn btn-primary\" onClick={uploadCode} disabled={!signingClient}>\n                      Upload\n                    </button>\n                  )}\n                </div>\n                {executeResponse?.result ? (\n                  <>\n                    <li className=\"list-group-item\">\n                      <span className=\"font-weight-bold\">Response:</span>\n                    </li>\n                    <li className=\"list-group-item\">\n                      <div className=\"row mb-3\">\n                        <div className=\"col-md-2\">\n                          <span>Code ID:</span>\n                        </div>\n                        <div className=\"col-md-10\">\n                          <CodeLink codeId={executeResponse.result.codeId} text={\"#\" + executeResponse.result.codeId} />\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-2\">\n                          <span>Transaction:</span>\n                        </div>\n                        <div className=\"col-md-10\">\n                          <TransactionLink transactionId={executeResponse.result.transactionHash} maxLength={99} />\n                        </div>\n                      </div>\n                    </li>\n                  </>\n                ) : null}\n                {error ? (\n                  <li className=\"list-group-item\">\n                    <span className=\"text-danger\" title=\"The contract query error\">\n                      {error}\n                    </span>\n                  </li>\n                ) : null}\n              </ul>\n            </div>\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import \"./Code.css\";\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n  readonly index: number;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data, index }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [instantiationInfo, setInstantiationInfo] = React.useState<\n    InstantiationInfo | ErrorState | LoadingState\n  >(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(data.codeId)\n      .then((contracts) => {\n        setInstantiationInfo({\n          instantiations: contracts.length,\n        });\n      })\n      .catch(() => setInstantiationInfo(errorState));\n    // Don't make clientContext.client a dependency. Whenever it changes, this component is recreated entirely\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data.codeId]);\n\n  return (\n    <div className={\"flex-element-two-two mb-3\" + (index % 2 ? \" pl-lg-2\" : \" pr-lg-2\")}>\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {ellideMiddle(data.creator, 30)}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances:{\" \"}\n          {isLoadingState(instantiationInfo)\n            ? \"Loading …\"\n            : isErrorState(instantiationInfo)\n            ? \"Error\"\n            : instantiationInfo.instantiations}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport React from \"react\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { Code, CodeData } from \"./Code\";\n\ninterface LoadedCode {\n  readonly source: string;\n  readonly data: CodeData;\n}\n\nfunction codeKey(code: LoadedCode): string {\n  return `${code.source}__${code.data.codeId}`;\n}\n\nexport function Codes(): JSX.Element {\n  const { client, nodeUrl } = React.useContext(ClientContext);\n  const [codes, setCodes] = React.useState<readonly LoadedCode[] | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getCodes()\n      .then((codeInfos) => {\n        const processed = codeInfos\n          .map(\n            (response): LoadedCode => ({\n              source: nodeUrl,\n              data: {\n                codeId: response.id,\n                checksum: response.checksum,\n                creator: response.creator,\n              },\n            }),\n          )\n          .reverse();\n        setCodes(processed);\n      })\n      .catch(() => setCodes(errorState));\n  }, [client, nodeUrl]);\n\n  // Display codes vertically on small devices and in a flex container on large and above\n  return (\n    <div className=\"d-lg-flex flex-wrap\">\n      {isLoadingState(codes) ? (\n        <p>Loading …</p>\n      ) : isErrorState(codes) ? (\n        <p>Error loading codes</p>\n      ) : codes.length === 0 ? (\n        <p>No code uploaded yet</p>\n      ) : (\n        codes.map((code, index) => <Code data={code.data} index={index} key={codeKey(code)} />)\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { Codes } from \"./Codes\";\n\nexport function CodesPage(): JSX.Element {\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  Codes\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <Codes />\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\ninterface Props {\n    readonly src: object;\n    readonly strLength?: number;\n}\n\nexport function JsonView({ src, strLength }: Props): JSX.Element {\n  return (\n      <ReactJson\n        src={src}\n        name={false}\n        displayDataTypes={false}\n        displayObjectSize={false}\n        collapseStringsAfterLength={strLength ?? 24}\n        theme=\"twilight\" \n      />\n  );\n}\n","import { ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { calculateFee, Coin } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\nimport { JsonView } from \"../../components/JsonView\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\nconst executePlaceholder = {\n  transfer: { recipient: \"juno14vhcdsyf83ngsrrqc92kmw8q9xakqjm0ff2dpn\", amount: \"1\" },\n};\n\nconst coinsPlaceholder = [{ denom: settings.backend.denominations[0], amount: \"1\" }];\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function ExecuteContract({ contractAddress }: Props): JSX.Element {\n  const { userAddress, signingClient } = React.useContext(ClientContext);\n\n  const [executing, setExecuting] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  const [memo, setMemo] = React.useState<string>();\n\n  const [msgObject, setMsgObject] = React.useState<Result<Record<string, any>>>();\n  const [coinsObject, setCoinsObject] = React.useState<Result<ReadonlyArray<Coin>>>();\n\n  const [executeResponse, setExecuteResponse] = React.useState<Result<ExecuteResult>>();\n\n  React.useEffect(() => {\n    setMsgObject({ result: executePlaceholder });\n    setCoinsObject({ result: coinsPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (msgObject?.error) {\n      setError(msgObject.error);\n      return;\n    }\n\n    if (executeResponse?.error) {\n      setError(executeResponse.error);\n      return;\n    }\n\n    if (coinsObject?.error) {\n      setError(coinsObject.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [coinsObject, executeResponse, msgObject]);\n\n  async function executeContract(): Promise<void> {\n    if (!msgObject?.result || !userAddress || !signingClient) return;\n\n    setExecuting(true);\n\n    try {\n      const executeResponseResult: ExecuteResult = await signingClient.execute(\n        userAddress,\n        contractAddress,\n        msgObject.result,\n        calculateFee(400000, settings.backend.gasPrice),\n        memo,\n        coinsObject?.result,\n      );\n      setExecuteResponse({ result: executeResponseResult });\n    } catch (error) {\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\n    }\n\n    setExecuting(false);\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Execute contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={executePlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setMsgObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Coins to transfer:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"120px\"\n            placeholder={coinsPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setCoinsObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <div className=\"form-group row flex-grow-1\">\n            <label className=\"col-sm-2 col-form-label\">Memo</label>\n            <div className=\"col-sm-10\">\n              <input\n                className=\"form-control\"\n                value={memo}\n                onChange={(event) => setMemo(event.target.value)}\n              />\n            </div>\n          </div>\n        </li>\n        <div className=\"list-group-item btn-group\">\n          {executing ? (\n            <button className=\"btn btn-primary\" type=\"button\" disabled>\n              <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n              Executing...\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary\"\n              onClick={executeContract}\n              disabled={!msgObject?.result || !signingClient}\n            >\n              Execute contract\n            </button>\n          )}\n        </div>\n        {executeResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The contract formatted input\">Response:</span>\n            <JsonView src={executeResponse.result} />\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import { MsgExecuteContract } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { parseMsgContract } from \"../../ui-utils\";\n\nexport interface Execution {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgExecuteContract;\n}\n\ninterface Props {\n  readonly executions: readonly Execution[];\n}\n\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Action</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{Object.keys(parseMsgContract(execution.msg.msg))[0]}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.sender} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { JsonView } from \"../../components/JsonView\";\n\ninterface Props {\n  readonly contractCodeHistory: readonly ContractCodeHistoryEntry[];\n}\n\nexport function HistoryInfo({ contractCodeHistory }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <span title=\"The contract level message history\">History</span>\n        </li>\n        {contractCodeHistory.map((entry, index) => (\n          <li key={index} className=\"list-group-item\">\n            <span title=\"The message operation type\">\n              {entry.operation} - <CodeLink codeId={entry.codeId} />\n            </span>\n            <JsonView src={entry.msg} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly contract: Contract;\n  readonly instantiationTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function InitializationInfo({ contract, instantiationTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Instantiation transaction:{\" \"}\n          {isLoadingState(instantiationTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(instantiationTxHash) ? (\n            \"Error\"\n          ) : instantiationTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={instantiationTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={contract.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">\n          Admin: {contract.admin ? <AccountLink address={contract.admin} maxLength={null} /> : \"–\"}\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\nimport { JsonView } from \"../../components/JsonView\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\n// eslint-disable-next-line @typescript-eslint/camelcase\nconst queryPlaceholder = { balance: { address: \"juno14vhcdsyf83ngsrrqc92kmw8q9xakqjm0ff2dpn\" } };\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function QueryContract({ contractAddress }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n\n  const [error, setError] = React.useState<string>();\n  const [queryObject, setQueryObject] = React.useState<Result<Record<string, any>>>();\n  const [queryResponse, setQueryResponse] = React.useState<Result<string>>();\n\n  React.useEffect(() => {\n    setQueryObject({ result: queryPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (queryObject?.error) {\n      setError(queryObject.error);\n      return;\n    }\n\n    if (queryResponse?.error) {\n      setError(queryResponse.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [queryObject, queryResponse]);\n\n  async function runQuery(): Promise<void> {\n    if (!client || !queryObject?.result) return;\n\n    try {\n      const queryResponseResult: Record<string, any> = await client.queryContractSmart(\n        contractAddress,\n        queryObject.result,\n      );\n\n      const formattedResult = JSON.stringify(queryResponseResult, null, \"  \");\n      setQueryResponse({ result: formattedResult });\n    } catch (error) {\n      setQueryResponse({ error: `Query error: ${error.message}` });\n    }\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Query contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={queryPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setQueryObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item\">\n          <button\n            className=\"btn btn-primary\"\n            style={{ cursor: client && queryObject?.result ? \"pointer\" : \"not-allowed\" }}\n            onClick={runQuery}\n            disabled={!queryObject?.result}\n          >\n            Run query\n          </button>\n        </li>\n        {queryResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The query response\">Response:</span>\n            <JsonView src={JSON.parse(queryResponse.result)} />\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import \"./ContractPage.css\";\n\nimport { Contract, ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Coin } from \"@cosmjs/stargate\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport { Coin as ICoin } from \"cosmjs-types/cosmos/base/v1beta1/coin\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport { Any } from \"cosmjs-types/google/protobuf/any\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { StargateClient } from \"../../ui-utils/clients\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { ExecuteContract } from \"./ExecuteContract\";\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\nimport { HistoryInfo } from \"./HistoryInfo\";\nimport { InitializationInfo } from \"./InitializationInfo\";\nimport { QueryContract } from \"./QueryContract\";\n\ntype IAnyMsgExecuteContract = {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n};\n\nexport type Result<T> = { readonly result?: T; readonly error?: string };\n\nfunction isStargateMsgExecuteContract(msg: Any): msg is IAnyMsgExecuteContract {\n  return msg.typeUrl === \"/cosmwasm.wasm.v1.MsgExecuteContract\" && !!msg.value;\n}\n\nconst getAndSetDetails = (\n  client: StargateClient,\n  contractAddress: string,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n): void => {\n  client\n    .getContract(contractAddress)\n    .then(setDetails)\n    .catch(() => setDetails(errorState));\n};\n\nconst getAndSetContractCodeHistory = (\n  client: StargateClient,\n  contractAddress: string,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n): void => {\n  client\n    .getContractCodeHistory(contractAddress)\n    .then(setContractCodeHistory)\n    .catch((error) => {\n      console.error(error);\n    });\n};\n\nconst getAndSetInstantiationTxHash = (\n  client: StargateClient,\n  contractAddress: string,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n): void => {\n  (client.searchTx({\n    tags: makeTags(\n      `message.module=wasm&instantiate._contract_address=${contractAddress}`,\n    ),\n  }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\n    .then((results) => {\n      const first = results.find(() => true);\n      setInstantiationTxHash(first?.hash);\n    })\n    .catch(() => setInstantiationTxHash(errorState));\n};\n\nfunction getExecutionFromStargateMsgExecuteContract(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: IAnyMsgExecuteContract, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nconst stargateEffect = (\n  client: StargateClient,\n  contractAddress: string,\n  typeRegistry: Registry,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n  setExecutions: (executions: readonly Execution[] | ErrorState | LoadingState) => void,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n) => () => {\n  getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\n  getAndSetDetails(client, contractAddress, setDetails);\n  getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\n\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(contractAddress, denom)))\n    .then((balances) => {\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n      setBalance(filteredBalances);\n    })\n    .catch(() => setBalance(errorState));\n\n  client\n    .searchTx({\n      tags: makeTags(`message.module=wasm&execute._contract_address=${contractAddress}`),\n    })\n    .then((txs) => {\n      const out = txs.reduce((executions: readonly Execution[], tx: IndexedTx): readonly Execution[] => {\n        const decodedTx = Tx.decode(tx.tx);\n        const txExecutions = (decodedTx?.body?.messages ?? [])\n          .filter(isStargateMsgExecuteContract)\n          .map(getExecutionFromStargateMsgExecuteContract(typeRegistry, tx));\n        return [...executions, ...txExecutions];\n      }, []);\n      setExecutions(out);\n    })\n    .catch(() => setExecutions(errorState));\n};\n\nexport function ContractPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { contractAddress: contractAddressParam } = useParams<{ readonly contractAddress: string }>();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [instantiationTxHash, setInstantiationTxHash] = React.useState<\n    string | undefined | ErrorState | LoadingState\n  >(loadingState);\n  const [contractCodeHistory, setContractCodeHistory] = React.useState<readonly ContractCodeHistoryEntry[]>(\n    [],\n  );\n  const [executions, setExecutions] = React.useState<readonly Execution[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    client !== null\n      ? stargateEffect(\n          client,\n          contractAddress,\n          typeRegistry,\n          setBalance,\n          setContractCodeHistory,\n          setDetails,\n          setExecutions,\n          setInstantiationTxHash,\n        )\n      : () => {},\n    [client, contractAddress, typeRegistry],\n  );\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                  {isLoadingState(details) ? (\n                    <span>Loading …</span>\n                  ) : isErrorState(details) ? (\n                    <span>Error</span>\n                  ) : (\n                    <CodeLink codeId={details.codeId} />\n                  )}\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col-12 col-md-6\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-12 col-md-6\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>An Error occurred when loading contract</p>\n            ) : (\n              <>\n                <InitializationInfo contract={details} instantiationTxHash={instantiationTxHash} />\n                <HistoryInfo contractCodeHistory={contractCodeHistory} />\n                <QueryContract contractAddress={contractAddress} />\n                <ExecuteContract contractAddress={contractAddress} />\n              </>\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Executions</h2>\n            {isLoadingState(executions) ? (\n              <p>Loading …</p>\n            ) : isErrorState(executions) ? (\n              <p>An Error occurred when loading transactions</p>\n            ) : executions.length !== 0 ? (\n              <ExecutionsTable executions={executions} />\n            ) : (\n              <p>Contract was not yet executed</p>\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import { fromRfc3339 } from \"@cosmjs/encoding\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nconst checkMark = \"✔\"; // U+2714 HEAVY CHECK MARK\nconst xMark = \"🗙\"; // U+1F5D9 CANCELLATION X\n\ninterface Props {\n  readonly tx: IndexedTx;\n  readonly timestamp: string;\n}\n\nexport function ExecutionInfo({ tx, timestamp }: Props): JSX.Element {\n  const time = timestamp ? fromRfc3339(timestamp) : null;\n  const success = tx.code === 0;\n\n  return (\n    <ul className=\"list-group list-group-horizontal mb-3\">\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Height:</span> {tx.height}\n      </li>\n      <li className=\"list-group-item\">\n        <span title={timestamp}>\n          <span className=\"font-weight-bold\">Time:</span> {time?.toLocaleString()}\n        </span>\n      </li>\n      <li className=\"list-group-item\">\n        <span title={`Execution succeeded: ${success ? \"yes\" : \"no\"}`}>\n          <span className=\"font-weight-bold\">Success:</span>{\" \"}\n          {success ? (\n            <span className=\"text-success\">{checkMark}</span>\n          ) : (\n            <span className=\"text-danger\" title={\"error code: \" + tx.code}>\n              {xMark}\n            </span>\n          )}\n        </span>\n      </li>\n    </ul>\n  );\n}\n","import { MsgExecuteContract as IMsgExecuteContract } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ContractLink } from \"../../../components/ContractLink\";\nimport { JsonView } from \"../../../components/JsonView\";\nimport { parseMsgContract, printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgExecuteContract;\n}\n\nexport function MsgExecuteContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Contract:</span>{\" \"}\n        <ContractLink address={msg.contract ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Sender:</span>{\" \"}\n        <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Sent funds:</span> {printableBalance(msg.funds)}\n      </li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\" className=\"font-weight-bold\">\n          Handle message\n        </span>\n        :\n        <JsonView src={parseMsgContract(msg.msg)} strLength={100} />\n      </li>\n    </Fragment>\n  );\n}\n","import { MsgInstantiateContract as IMsgInstantiateContract } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { CodeLink } from \"../../../components/CodeLink\";\nimport { JsonView } from \"../../../components/JsonView\";\nimport { parseMsgContract, printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgInstantiateContract;\n}\n\nexport function MsgInstantiateContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Sender:</span>{\" \"}\n        <AccountLink address={msg.sender || \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Code ID:</span>{\" \"}\n        <CodeLink codeId={msg.codeId?.toNumber() ?? 0} text={msg.codeId?.toString() ?? \"-\"} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Label:</span> {msg.label}\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Init funds:</span> {printableBalance(msg.funds)}\n      </li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\" className=\"font-weight-bold\">\n          Init message\n        </span>\n        :\n        <JsonView src={parseMsgContract(msg.msg)} strLength={100} />\n      </li>\n    </Fragment>\n  );\n}\n","import { MsgSend as IMsgSend } from \"cosmjs-types/cosmos/bank/v1beta1/tx\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgSend;\n}\n\nexport function MsgSend({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Sender:</span>{\" \"}\n        <AccountLink address={msg.fromAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Recipient:</span>{\" \"}\n        <AccountLink address={msg.toAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Amount:</span> {printableBalance(msg.amount ?? [])}\n      </li>\n    </Fragment>\n  );\n}\n","import { fromHex } from \"@cosmjs/encoding\";\n\nfunction arrayEqual(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  const difference = a.some((byte, index) => b[index] !== byte);\n  return !difference;\n}\n\nfunction arrayStartsWith(a: Uint8Array, prefix: Uint8Array): boolean {\n  return arrayEqual(a.slice(0, prefix.length), prefix);\n}\n\nconst magic = {\n  gzip: fromHex(\"1F8B\"),\n  wasm: fromHex(\"0061736d\"),\n};\n\nexport type SupportedTypes = \"gzip\" | \"wasm\";\n\nexport function getFileType(data: Uint8Array): SupportedTypes | undefined {\n  if (arrayStartsWith(data, magic.gzip)) return \"gzip\";\n  if (arrayStartsWith(data, magic.wasm)) return \"wasm\";\n  return undefined;\n}\n","import \"./MsgStoreCode.css\";\n\nimport { MsgStoreCode as IMsgStoreCode } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport { toBase64 } from \"@cosmjs/encoding\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ellideRight } from \"../../../ui-utils\";\nimport { getFileType } from \"./magic\";\n\ninterface Props {\n  readonly msg: IMsgStoreCode;\n}\n\nexport function MsgStoreCode({ msg }: Props): JSX.Element {\n  const [showAllCode, setShowAllCode] = React.useState<boolean>(false);\n\n  const dataInfo = React.useMemo(() => {\n    const data = msg.wasmByteCode ?? new Uint8Array();\n    return `${getFileType(data) || \"unknown\"}; ${data.length} bytes`;\n  }, [msg.wasmByteCode]);\n\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Sender:</span>{\" \"}\n        <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Data:</span> {dataInfo}{\" \"}\n        {!showAllCode ? (\n          <Fragment>\n            <code>{ellideRight(toBase64(msg.wasmByteCode ?? new Uint8Array()), 300)}</code>{\" \"}\n            <button className=\"btn btn-sm btn-outline-primary\" onClick={() => setShowAllCode(true)}>\n              Show all\n            </button>\n          </Fragment>\n        ) : (\n          <code className=\"long-inline-code\">{msg.wasmByteCode}</code>\n        )}\n      </li>\n    </Fragment>\n  );\n}\n","import { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nimport { printableBalance } from \"../../ui-utils\";\n\ninterface Props {\n  readonly tx: IndexedTx;\n}\n\nexport function TxInfo({ tx }: Props): JSX.Element {\n  const txb = Tx.decode(tx.tx);\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <span className=\"font-weight-bold\">Memo:</span> {txb.body?.memo || \"–\"}\n        </li>\n        <li className=\"list-group-item\">\n          <span className=\"font-weight-bold\">Fee:</span> {printableBalance(txb.authInfo?.fee?.amount ?? [])}\n        </li>\n        <li className=\"list-group-item\">\n          <span className=\"font-weight-bold\">Gas:</span> {tx.gasUsed} / {tx.gasWanted}\n        </li>\n        <li className=\"list-group-item\">\n          <span className=\"font-weight-bold\">Signatures:</span> {txb.signatures?.length ?? 0}\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { Block, IndexedTx } from \"@cosmjs/stargate\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport { StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport {\n  isAnyMsgExecuteContract,\n  isAnyMsgInstantiateContract,\n  isAnyMsgSend,\n  isAnyMsgStoreCode,\n} from \"../../ui-utils/txs\";\nimport { ExecutionInfo } from \"./ExecutionInfo\";\nimport { MsgExecuteContract } from \"./msgs/MsgExecuteContract\";\nimport { MsgInstantiateContract } from \"./msgs/MsgInstantiateContract\";\nimport { MsgSend } from \"./msgs/MsgSend\";\nimport { MsgStoreCode } from \"./msgs/MsgStoreCode\";\nimport { TxInfo } from \"./TxInfo\";\n\nconst stargateEffect = (\n  client: StargateClient,\n  txId: string,\n  setDetails: (details: IndexedTx | undefined | ErrorState | LoadingState) => void,\n  setBlockInfo: (block: Block | undefined | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getTx(txId)\n    .then((tx) => {\n      setDetails(tx || undefined);\n      if (!tx) return;\n      client\n        .getBlock(tx.height)\n        .then((b) => {\n          setBlockInfo(b);\n        })\n        .catch(() => setBlockInfo(errorState));\n    })\n    .catch(() => setDetails(errorState));\n};\n\nexport function TxPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { txId: txIdParam } = useParams<{ readonly txId: string }>();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  const [block, setBlockInfo] = React.useState<Block | undefined | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(client !== null ? stargateEffect(client, txId, setDetails, setBlockInfo) : () => {}, [\n    client,\n    txId,\n    typeRegistry,\n  ]);\n\n  const formatMsg = (typeUrl?: string): string | undefined => {\n    if (!typeUrl) return typeUrl;\n\n    const idx = typeUrl.lastIndexOf(\".\");\n\n    return idx < 0 ? typeUrl : typeUrl.substring(idx + 1);\n  };\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            {isLoadingState(details) ? (\n              <p>Loading...</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <ExecutionInfo\n                tx={details}\n                timestamp={isLoadingState(block) || isErrorState(block) ? \"\" : block?.header.time || \"\"}\n              />\n            )}\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <TxInfo tx={details} />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Messages</h2>\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              Tx.decode(details.tx).body?.messages?.map((msg: any, index: number) => (\n                <div className=\"card mb-3\" key={`${details.hash}_${index}`}>\n                  <div className=\"card-header\">\n                    <h4>\n                      <span className=\"badge badge-pill badge-info\">\n                        {formatMsg(msg.typeUrl) || <em>unset</em>}\n                      </span>\n                    </h4>\n                  </div>\n                  <ul className=\"list-group list-group-flush\">\n                    {isAnyMsgSend(msg) ? (\n                      <MsgSend msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })} />\n                    ) : isAnyMsgStoreCode(msg) ? (\n                      <MsgStoreCode msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })} />\n                    ) : isAnyMsgInstantiateContract(msg) ? (\n                      <MsgInstantiateContract\n                        msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })}\n                      />\n                    ) : isAnyMsgExecuteContract(msg) ? (\n                      <MsgExecuteContract\n                        msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })}\n                      />\n                    ) : (\n                      <li className=\"list-group-item\">\n                        <em>This message type cannot be displayed</em>\n                      </li>\n                    )}\n                  </ul>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\ninterface Props {\n  readonly type: \"browser-router\" | \"hash-router\";\n  readonly children: React.ReactNode;\n}\n\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\n  switch (type) {\n    case \"browser-router\":\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\n    case \"hash-router\":\n      return <HashRouter>{children}</HashRouter>;\n  }\n}\n","import {\n  MsgExecuteContract,\n  MsgInstantiateContract,\n  MsgStoreCode,\n} from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\n\nimport { ClientContext, ClientContextValue } from \"../contexts/ClientContext\";\nimport { AccountPage } from \"../pages/account/AccountPage\";\nimport { CodePage } from \"../pages/code/CodePage\";\nimport { NewCodePage } from \"../pages/code/NewCodePage\";\nimport { CodesPage } from \"../pages/codes/CodesPage\";\nimport { ContractPage } from \"../pages/contract/ContractPage\";\nimport { TxPage } from \"../pages/tx/TxPage\";\nimport { settings } from \"../settings\";\nimport { StargateClient, StargateSigningClient } from \"../ui-utils/clients\";\nimport {\n  msgExecuteContractTypeUrl,\n  msgInstantiateContractTypeUrl,\n  msgStoreCodeTypeUrl,\n} from \"../ui-utils/txs\";\nimport { FlexibleRouter } from \"./FlexibleRouter\";\n// import { DashboardPage } from \"../pages/contract/DashboardPage\";\n\nconst { nodeUrls } = settings.backend;\nconst typeRegistry = new Registry([\n  [msgStoreCodeTypeUrl, MsgStoreCode],\n  [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n  [msgExecuteContractTypeUrl, MsgExecuteContract],\n]);\n\nexport function App(): JSX.Element {\n  const [nodeUrl, setNodeUrl] = React.useState(nodeUrls[0]);\n  const [userAddress, setUserAddress] = React.useState<string>();\n  const [signingClient, setSigningClient] = React.useState<StargateSigningClient>();\n  const [contextValue, setContextValue] = React.useState<ClientContextValue>({\n    nodeUrl: nodeUrl,\n    client: null,\n    typeRegistry: typeRegistry,\n    resetClient: setNodeUrl,\n    userAddress: userAddress,\n    setUserAddress: setUserAddress,\n    signingClient: signingClient,\n    setSigningClient: setSigningClient,\n  });\n\n  React.useEffect(() => {\n    (async function updateContextValue() {\n      const client = await StargateClient.connect(nodeUrl);\n      setContextValue((prevContextValue) => ({ ...prevContextValue, nodeUrl: nodeUrl, client: client }));\n    })();\n  }, [nodeUrl]);\n\n  React.useEffect(() => {\n    setContextValue((prevContextValue) => ({ ...prevContextValue, signingClient: signingClient }));\n  }, [signingClient]);\n\n  React.useEffect(() => {\n    setContextValue((prevContextValue) => ({ ...prevContextValue, userAddress: userAddress }));\n  }, [userAddress]);\n\n  return (\n    <ClientContext.Provider value={contextValue}>\n      <FlexibleRouter type={settings.deployment.routerType}>\n        <Switch>\n          <Route exact path=\"/codes\" component={CodesPage} />\n          <Route path=\"/codes/new\" component={NewCodePage} />\n          <Route path=\"/codes/:codeId\" component={CodePage} />\n          <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n          <Route path=\"/transactions/:txId\" component={TxPage} />\n          <Route path=\"/accounts/:address\" component={AccountPage} />\n          <Route path=\"/\" component={CodesPage} />\n          {/* <Route path=\"/\" component={DashboardPage} /> */}\n          <Route component={() => <Redirect to=\"/\" />} />\n        </Switch>\n      </FlexibleRouter>\n    </ClientContext.Provider>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport \"jquery/dist/jquery.slim\";\nimport \"./index.css\";\nimport \"./dark.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}