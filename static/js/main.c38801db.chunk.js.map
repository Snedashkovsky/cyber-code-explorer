{"version":3,"sources":["ui-utils/txs.ts","contexts/ClientContext.tsx","settings/backend.ts","settings/index.ts","ui-utils/states.ts","components/EndpointSelector.tsx","components/NodeInfoModal.tsx","components/FooterRow.tsx","ui-utils/clients.ts","components/Login.tsx","components/UserAddress.tsx","components/Header.tsx","ui-utils/index.ts","components/AccountLink.tsx","components/TransactionLink.tsx","pages/account/TransfersTable.tsx","pages/account/AccountPage.tsx","ui-utils/sdkhelpers.ts","components/ContractLink.tsx","ui-utils/jsonInput.ts","pages/contract/InstantiationContract.tsx","pages/code/VerifyContract.tsx","pages/code/CodeInfo.tsx","pages/code/InstanceRow.tsx","pages/code/InstancesEmptyState.tsx","pages/code/CodePage.tsx","components/CodeLink.tsx","pages/code/NewCodePage.tsx","pages/codes/Code.tsx","pages/codes/Codes.tsx","pages/codes/CodesPage.tsx","components/JsonView.tsx","pages/contract/ExecuteContract.tsx","pages/contract/ExecutionsTable.tsx","pages/contract/HistoryInfo.tsx","pages/contract/InitializationInfo.tsx","pages/contract/QueryContract.tsx","pages/contract/ContractPage.tsx","pages/tx/ExecutionInfo.tsx","pages/tx/msgs/MsgExecuteContract.tsx","pages/tx/msgs/MsgInstantiateContract.tsx","pages/tx/msgs/MsgSend.tsx","pages/tx/msgs/magic.ts","pages/tx/msgs/MsgStoreCode.tsx","pages/tx/TxInfo.tsx","pages/tx/TxPage.tsx","components/FlexibleRouter.tsx","components/App.tsx","index.tsx"],"names":["msgStoreCodeTypeUrl","msgExecuteContractTypeUrl","isAnyMsgSend","msg","typeUrl","value","dummyContext","nodeUrl","client","typeRegistry","Registry","MsgStoreCode","MsgInstantiateContract","MsgExecuteContract","resetClient","setUserAddress","setSigningClient","ClientContext","React","createContext","knownBackends","devnetStargate","nodeUrls","denominations","addressPrefix","gasPrice","GasPrice","fromString","musselnet","oysternet","keplrChainInfo","rpc","rest","chainId","chainName","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bip44","coinType","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","features","lucinanet","explorerUrlToTx","settings","backend","id","process","Error","getCurrentBackend","deployment","routerType","runtimeCodes","isErrorState","state","isNonNullObject","type","isLoadingState","errorState","loadingState","EndpointSelector","urls","currentUrl","urlChanged","length","className","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","url","key","onClick","NodeInfoModal","htmlId","height","clientContext","useContext","tabIndex","role","aria-hidden","data-dismiss","aria-label","hrStyle","borderColor","whiteText","color","Separator","FooterRow","setChainId","useState","setHeight","updateHeight","useCallback","getHeight","then","catch","useEffect","getChainId","style","newUrl","data-target","href","loadKeplrWallet","async","chaindId","w","window","getOfflineSigner","keplr","experimentalSuggestChain","registerKeplrChain","enable","loadLedgerWallet","ledgerTransport","TransportWebUSB","create","LedgerSigner","hdPaths","makeCosmoshubPath","prefix","getAddressAndStargateSigningClient","loadWallet","mnemonic","signer","getAccounts","address","endpoint","gasLimits","defaultStargateGasLimits","upload","init","exec","migrate","send","changeAdmin","StargateSigningClient","connectWithSigner","registry","createStargateSigningClient","webUsbMissing","anyNavigator","navigator","usb","Login","userAddress","loading","setLoading","error","setError","loginStargate","undefined","signingClient","message","logout","isUserLoggedIn","keplrButton","disabled","renderLoginButton","UserAddress","to","Header","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","toString","printableBalance","balance","join","parseMsgContract","json","fromUtf8","JSON","parse","AccountLink","maxLength","title","TransactionLink","transactionId","TransfersTable","transfers","executions","scope","execution","index","fromAddress","toAddress","AccountPage","addressParam","useParams","setBalance","setTransfers","Promise","all","getBalance","balances","filteredBalances","filter","searchTx","sentFromOrTo","txs","out","reduce","tx","decodedTx","Tx","decode","body","messages","i","decodedMsg","hash","getTransferFromStargateMsgSend","stargateEffect","pageTitle","aria-current","makeTags","oneLiner","split","pair","indexOf","parts","ContractLink","jsonInputStyle","container","display","flexDirection","order","warningBox","executePlaceholder","name","symbol","decimals","coinsPlaceholder","InstantiationContract","codeId","executing","setExecuting","memo","setMemo","label","setLabel","msgObject","setMsgObject","coinsObject","setCoinsObject","executeResponse","setExecuteResponse","result","width","placeholder","confirmGood","onChange","jsObject","event","target","executeResponseResult","instantiate","transferAmount","contractAddress","transactionHash","VerifyContract","checksum","source","builder","verificationCmd","quote","CodeInfo","code","uploadTxHash","creator","InstanceRow","position","executionCount","setExecutionCount","contract","setContractInfo","getContract","execTxs","tags","admin","InstancesEmptyState","CodePage","codeIdParam","parseInt","details","setDetails","contracts","setContracts","setUploadTxHash","getContracts","getCodeDetails","results","first","find","round","data","CodeLink","text","NewCodePage","wasm","setWasm","setSource","setBuilder","accept","e","files","item","wasmBytes","Uint8Array","arrayBuffer","Code","instantiationInfo","setInstantiationInfo","instantiations","codeKey","Codes","codes","setCodes","getCodes","codeInfos","processed","response","reverse","CodesPage","JsonView","src","strLength","displayDataTypes","displayObjectSize","collapseStringsAfterLength","theme","transfer","recipient","ExecuteContract","execute","ExecutionsTable","sender","HistoryInfo","contractCodeHistory","entry","operation","InitializationInfo","instantiationTxHash","queryPlaceholder","QueryContract","queryObject","setQueryObject","queryResponse","setQueryResponse","cursor","queryResponseResult","queryContractSmart","formattedResult","stringify","isStargateMsgExecuteContract","setContractCodeHistory","setExecutions","setInstantiationTxHash","getContractCodeHistory","console","getAndSetContractCodeHistory","getAndSetDetails","getAndSetInstantiationTxHash","getExecutionFromStargateMsgExecuteContract","ContractPage","contractAddressParam","ExecutionInfo","timestamp","time","fromRfc3339","success","toLocaleString","funds","toNumber","initMsg","MsgSend","arrayStartsWith","a","b","some","byte","arrayEqual","magic","gzip","fromHex","showAllCode","setShowAllCode","dataInfo","useMemo","wasmByteCode","getFileType","ellideRight","toBase64","TxInfo","authInfo","fee","gasLimit","signatures","TxPage","txId","txIdParam","block","setBlockInfo","getTx","getBlock","header","idx","lastIndexOf","substring","formatMsg","isAnyMsgStoreCode","isAnyMsgInstantiateContract","isAnyMsgExecuteContract","FlexibleRouter","children","basename","App","setNodeUrl","contextValue","setContextValue","StargateClient","connect","prevContextValue","Provider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c38801db.chunk.js","sourcesContent":["import { Any } from \"@cosmjs/stargate/build/codec/google/protobuf/any\";\r\n\r\ntype IAny = Any;\r\n\r\nexport const msgSendTypeUrl = \"/cosmos.bank.v1beta1.MsgSend\";\r\nexport const msgStoreCodeTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgStoreCode\";\r\nexport const msgInstantiateContractTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\";\r\nexport const msgExecuteContractTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\r\n\r\nexport interface AnyMsgSend {\r\n  readonly typeUrl: \"/cosmos.bank.v1beta1.MsgSend\";\r\n  readonly value: Uint8Array;\r\n}\r\n\r\nexport interface AnyMsgStoreCode {\r\n  readonly typeUrl: \"/cosmwasm.wasm.v1beta1.MsgStoreCode\";\r\n  readonly value: Uint8Array;\r\n}\r\n\r\nexport interface AnyMsgInstantiateContract {\r\n  readonly typeUrl: \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\";\r\n  readonly value: Uint8Array;\r\n}\r\n\r\nexport interface AnyMsgExecuteContract {\r\n  readonly typeUrl: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\r\n  readonly value: Uint8Array;\r\n}\r\n\r\nexport function isAnyMsgSend(msg: IAny): msg is AnyMsgSend {\r\n  return msg.typeUrl === msgSendTypeUrl && !!msg.value;\r\n}\r\n\r\nexport function isAnyMsgStoreCode(msg: IAny): msg is AnyMsgStoreCode {\r\n  return msg.typeUrl === msgStoreCodeTypeUrl && !!msg.value;\r\n}\r\n\r\nexport function isAnyMsgInstantiateContract(msg: IAny): msg is AnyMsgInstantiateContract {\r\n  return msg.typeUrl === msgInstantiateContractTypeUrl && !!msg.value;\r\n}\r\n\r\nexport function isAnyMsgExecuteContract(msg: IAny): msg is AnyMsgExecuteContract {\r\n  return msg.typeUrl === msgExecuteContractTypeUrl && !!msg.value;\r\n}\r\n\r\n/* eslint-enable @typescript-eslint/camelcase */\r\n","import {\r\n  MsgExecuteContract,\r\n  MsgInstantiateContract,\r\n  MsgStoreCode,\r\n} from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport { Registry } from \"@cosmjs/proto-signing\";\r\nimport React from \"react\";\r\n\r\nimport { StargateClient, StargateSigningClient } from \"../ui-utils/clients\";\r\nimport {\r\n  msgExecuteContractTypeUrl,\r\n  msgInstantiateContractTypeUrl,\r\n  msgStoreCodeTypeUrl,\r\n} from \"../ui-utils/txs\";\r\n\r\nexport interface ClientContextValue {\r\n  readonly nodeUrl: string;\r\n  readonly client: StargateClient | null;\r\n  readonly typeRegistry: Registry;\r\n  readonly resetClient: (nodeUrl: string) => void;\r\n  readonly userAddress?: string;\r\n  readonly setUserAddress: (newUserAddress?: string) => void;\r\n  readonly signingClient?: StargateSigningClient;\r\n  readonly setSigningClient: (newSigningClient?: StargateSigningClient) => void;\r\n}\r\n\r\n/**\r\n * \"only used when a component does not have a matching Provider above it in the tree\"\r\n *\r\n * @see https://reactjs.org/docs/context.html#reactcreatecontext\r\n */\r\nconst dummyContext: ClientContextValue = {\r\n  nodeUrl: \"\",\r\n  client: null,\r\n  typeRegistry: new Registry([\r\n    [msgStoreCodeTypeUrl, MsgStoreCode],\r\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\r\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\r\n  ]),\r\n  resetClient: () => {},\r\n  setUserAddress: () => {},\r\n  setSigningClient: () => {},\r\n};\r\n\r\nexport const ClientContext = React.createContext<ClientContextValue>(dummyContext);\r\n","import { GasPrice } from \"@cosmjs/stargate\";\r\n\r\nexport type NonEmptyArray<ElementType> = { readonly 0: ElementType } & readonly ElementType[];\r\n\r\nexport interface BackendSettings {\r\n  readonly nodeUrls: NonEmptyArray<string>;\r\n  readonly denominations: readonly string[];\r\n  readonly addressPrefix: string;\r\n  readonly gasPrice: GasPrice;\r\n  readonly keplrChainInfo?: any;\r\n}\r\n\r\nconst devnetStargateSettings: BackendSettings = {\r\n  nodeUrls: [\"http://localhost:26659\"],\r\n  denominations: [\"ucosm\", \"ustake\"],\r\n  addressPrefix: \"wasm\",\r\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\r\n};\r\n\r\nconst musselnetSettings: BackendSettings = {\r\n  nodeUrls: [\"https://rpc.musselnet.cosmwasm.com\"],\r\n  denominations: [\"umayo\", \"ufrites\"],\r\n  addressPrefix: \"wasm\",\r\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\r\n};\r\n\r\nconst oysternetSettings: BackendSettings = {\r\n  nodeUrls: [\"http://rpc.oysternet.cosmwasm.com\"],\r\n  denominations: [\"usponge\"],\r\n  addressPrefix: \"wasm\",\r\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\r\n  keplrChainInfo: {\r\n    rpc: \"http://rpc.oysternet.cosmwasm.com\",\r\n    rest: \"http://lcd.oysternet.cosmwasm.com\",\r\n    chainId: \"oysternet-1\",\r\n    chainName: \"Wasm Oysternet\",\r\n    stakeCurrency: {\r\n      coinDenom: \"SPONGE\",\r\n      coinMinimalDenom: \"usponge\",\r\n      coinDecimals: 6,\r\n    },\r\n    bip44: {\r\n      coinType: 118,\r\n    },\r\n    bech32Config: {\r\n      bech32PrefixAccAddr: \"wasm\",\r\n      bech32PrefixAccPub: \"wasmpub\",\r\n      bech32PrefixValAddr: \"wasmvaloper\",\r\n      bech32PrefixValPub: \"wasmvaloperpub\",\r\n      bech32PrefixConsAddr: \"wasmvalcons\",\r\n      bech32PrefixConsPub: \"wasmvalconspub\",\r\n    },\r\n    currencies: [\r\n      {\r\n        coinDenom: \"SPONGE\",\r\n        coinMinimalDenom: \"usponge\",\r\n        coinDecimals: 6,\r\n      },\r\n    ],\r\n    feeCurrencies: [\r\n      {\r\n        coinDenom: \"SPONGE\",\r\n        coinMinimalDenom: \"usponge\",\r\n        coinDecimals: 6,\r\n      },\r\n    ],\r\n    features: [\"stargate\"],\r\n  },\r\n};\r\n\r\nconst lucinanetSettings: BackendSettings = {\r\n  nodeUrls: [\"https://rpc.juno.giansalex.dev\"],\r\n  denominations: [\"ujuno\"],\r\n  addressPrefix: \"juno\",\r\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\r\n  keplrChainInfo: {\r\n    rpc: \"https://rpc.juno.giansalex.dev:443\",\r\n    rest: \"https://lcd.juno.giansalex.dev:443\",\r\n    chainId: \"lucina\",\r\n    chainName: \"Juno testnet\",\r\n    stakeCurrency: {\r\n      coinDenom: \"JUNO\",\r\n      coinMinimalDenom: \"ujuno\",\r\n      coinDecimals: 6,\r\n    },\r\n    bip44: {\r\n      coinType: 118,\r\n    },\r\n    bech32Config: {\r\n      bech32PrefixAccAddr: \"juno\",\r\n      bech32PrefixAccPub: \"junopub\",\r\n      bech32PrefixValAddr: \"junovaloper\",\r\n      bech32PrefixValPub: \"junovaloperpub\",\r\n      bech32PrefixConsAddr: \"junovalcons\",\r\n      bech32PrefixConsPub: \"junovalconspub\",\r\n    },\r\n    currencies: [\r\n      {\r\n        coinDenom: \"JUNO\",\r\n        coinMinimalDenom: \"ujuno\",\r\n        coinDecimals: 6,\r\n      },\r\n    ],\r\n    feeCurrencies: [\r\n      {\r\n        coinDenom: \"JUNO\",\r\n        coinMinimalDenom: \"ujuno\",\r\n        coinDecimals: 6,\r\n      },\r\n    ],\r\n    features: [\"stargate\", \"ibc-transfer\", \"cosmwasm\"],\r\n    explorerUrlToTx: \"https://testnet.juno.aneka.io/txs/{txHash}\",\r\n  },\r\n};\r\n\r\nconst knownBackends: Partial<Record<string, BackendSettings>> = {\r\n  devnetStargate: devnetStargateSettings,\r\n  musselnet: musselnetSettings,\r\n  oysternet: oysternetSettings,\r\n  lucinanet: lucinanetSettings,\r\n};\r\n\r\nexport function getCurrentBackend(): BackendSettings {\r\n  const id = process.env.REACT_APP_BACKEND || \"devnetStargate\";\r\n  const backend = knownBackends[id];\r\n  if (!backend) {\r\n    throw new Error(`No backend found for the given ID \"${id}\"`);\r\n  }\r\n  return backend;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\nimport { BackendSettings, getCurrentBackend } from \"./backend\";\r\n\r\nexport interface DeploymentSettings {\r\n  readonly routerType: \"browser-router\" | \"hash-router\";\r\n}\r\n\r\nexport interface Settings {\r\n  /** Where do we connect to */\r\n  readonly backend: BackendSettings;\r\n  /** How are we hosted */\r\n  readonly deployment: DeploymentSettings;\r\n}\r\n\r\nconst developmentServer: DeploymentSettings = {\r\n  routerType: \"browser-router\",\r\n};\r\n\r\nconst ghPages: DeploymentSettings = {\r\n  routerType: \"hash-router\",\r\n};\r\n\r\nconst firebaseHosting: DeploymentSettings = {\r\n  routerType: \"browser-router\",\r\n};\r\n\r\nexport const settings: Settings = {\r\n  backend: getCurrentBackend(),\r\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\r\n};\r\n","import { isNonNullObject } from \"@cosmjs/utils\";\r\n\r\nconst runtimeCodes = {\r\n  error: \"_\\u2588_ErrorState_\\u2588_\" as const,\r\n  loading: \"_\\u2588_LoadingState_\\u2588_\" as const,\r\n};\r\n\r\nexport interface ErrorState {\r\n  readonly type: typeof runtimeCodes.error;\r\n}\r\n\r\nexport interface LoadingState {\r\n  readonly type: typeof runtimeCodes.loading;\r\n}\r\n\r\nexport function isErrorState(state: unknown): state is ErrorState {\r\n  if (!isNonNullObject(state)) return false;\r\n  return (state as ErrorState).type === runtimeCodes.error;\r\n}\r\n\r\nexport function isLoadingState(state: unknown): state is LoadingState {\r\n  if (!isNonNullObject(state)) return false;\r\n  return (state as LoadingState).type === runtimeCodes.loading;\r\n}\r\n\r\nexport const errorState: ErrorState = { type: runtimeCodes.error };\r\nexport const loadingState: LoadingState = { type: runtimeCodes.loading };\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport { NonEmptyArray } from \"../settings/backend\";\r\n\r\ninterface Props {\r\n  readonly currentUrl: string;\r\n  readonly urls: NonEmptyArray<string>;\r\n  readonly urlChanged: (newUrl: string) => void;\r\n}\r\n\r\nexport function EndpointSelector({ urls, currentUrl, urlChanged }: Props): JSX.Element {\r\n  if (urls.length === 1) {\r\n    return <Fragment>{currentUrl}</Fragment>;\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <button\r\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\r\n          type=\"button\"\r\n          id=\"dropdownMenuButton\"\r\n          data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\"\r\n          aria-expanded=\"false\"\r\n        >\r\n          {currentUrl}\r\n        </button>\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n          {urls.map((url) => (\r\n            <button\r\n              key={url}\r\n              className={`dropdown-item` + (url === currentUrl ? \" active\" : \"\")}\r\n              type=\"button\"\r\n              onClick={() => urlChanged(url)}\r\n            >\r\n              {url}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport { ClientContext } from \"../contexts/ClientContext\";\r\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../ui-utils/states\";\r\n\r\ninterface Props {\r\n  readonly htmlId: string;\r\n  readonly chainId: string | ErrorState | LoadingState;\r\n  readonly height: number | ErrorState | LoadingState;\r\n}\r\n\r\nexport function NodeInfoModal({ htmlId, chainId, height }: Props): JSX.Element {\r\n  const clientContext = React.useContext(ClientContext);\r\n\r\n  return (\r\n    <div\r\n      className=\"modal fade\"\r\n      id={htmlId}\r\n      tabIndex={-1}\r\n      role=\"dialog\"\r\n      aria-labelledby=\"exampleModalLabel\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      <div className=\"modal-dialog\" role=\"document\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n              Node info\r\n            </h5>\r\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            Endpoint: {clientContext.nodeUrl}\r\n            <br />\r\n            Chain ID: {isLoadingState(chainId) ? \"Loading …\" : isErrorState(chainId) ? \"Error\" : chainId}\r\n            <br />\r\n            Height: {isLoadingState(height) ? \"Loading …\" : isErrorState(height) ? \"Error\" : height}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport { ClientContext } from \"../contexts/ClientContext\";\r\nimport { settings } from \"../settings\";\r\nimport { ErrorState, errorState, LoadingState, loadingState } from \"../ui-utils/states\";\r\nimport { EndpointSelector } from \"./EndpointSelector\";\r\nimport { NodeInfoModal } from \"./NodeInfoModal\";\r\n\r\ninterface Props {}\r\n\r\nconst hrStyle: React.CSSProperties = {\r\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\r\n};\r\nconst whiteText = { color: \"#f0f0f0\" };\r\n\r\nfunction Separator(): JSX.Element {\r\n  return <Fragment> | </Fragment>;\r\n}\r\n\r\n/** Place me as a row in a container */\r\nexport function FooterRow(): JSX.Element {\r\n  const { client, nodeUrl, resetClient } = React.useContext(ClientContext);\r\n\r\n  const [chainId, setChainId] = React.useState<string | ErrorState | LoadingState>(loadingState);\r\n  const [height, setHeight] = React.useState<number | ErrorState | LoadingState>(loadingState);\r\n\r\n  const updateHeight = React.useCallback(() => {\r\n    client\r\n      ?.getHeight()\r\n      .then(setHeight)\r\n      .catch(() => setHeight(errorState));\r\n  }, [client]);\r\n\r\n  React.useEffect(() => {\r\n    client\r\n      ?.getChainId()\r\n      .then(setChainId)\r\n      .catch(() => setChainId(errorState));\r\n    updateHeight();\r\n  }, [client, updateHeight]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <hr style={hrStyle} />\r\n        <NodeInfoModal htmlId=\"nodeInfoModal\" chainId={chainId} height={height} />\r\n        <div style={whiteText} className=\"dropdown text-center font-weight-light mb-3\">\r\n          Endpoint{\" \"}\r\n          <EndpointSelector\r\n            currentUrl={nodeUrl}\r\n            urls={settings.backend.nodeUrls}\r\n            urlChanged={(newUrl) => resetClient(newUrl)}\r\n          />{\" \"}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-sm btn-secondary\"\r\n            data-toggle=\"modal\"\r\n            data-target=\"#nodeInfoModal\"\r\n            onClick={updateHeight}\r\n          >\r\n            Node info\r\n          </button>\r\n          <Separator />\r\n          <a href=\"https://github.com/CosmWasm/code-explorer\" style={whiteText}>\r\n            Fork me on GitHub\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { makeCosmoshubPath, OfflineAminoSigner } from \"@cosmjs/amino\";\r\nimport {\r\n  CosmWasmClient as StargateClient,\r\n  CosmWasmFeeTable,\r\n  SigningCosmWasmClient as StargateSigningClient,\r\n} from \"@cosmjs/cosmwasm-stargate\";\r\nimport {\r\n  MsgExecuteContract,\r\n  MsgInstantiateContract,\r\n  MsgStoreCode,\r\n} from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport { LedgerSigner } from \"@cosmjs/ledger-amino\";\r\nimport { OfflineDirectSigner, OfflineSigner, Registry } from \"@cosmjs/proto-signing\";\r\nimport { defaultGasLimits as defaultStargateGasLimits, GasLimits } from \"@cosmjs/stargate\";\r\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\r\n\r\nimport { settings } from \"../settings\";\r\nimport { msgExecuteContractTypeUrl, msgInstantiateContractTypeUrl, msgStoreCodeTypeUrl } from \"./txs\";\r\n\r\nexport { StargateClient, StargateSigningClient };\r\n\r\nexport type WalletLoaderDirect = (\r\n  addressPrefix: string,\r\n  mnemonic?: string,\r\n) => Promise<OfflineDirectSigner | OfflineAminoSigner>;\r\n\r\nexport function loadKeplrWallet(client: StargateClient, keplrChainInfo: any): WalletLoaderDirect {\r\n  return async () => {\r\n    const chaindId = await client.getChainId();\r\n\r\n    await registerKeplrChain(keplrChainInfo);\r\n    const w = window as any;\r\n    await w.keplr.enable(chaindId);\r\n\r\n    return w.getOfflineSigner(chaindId);\r\n  };\r\n}\r\n\r\nasync function registerKeplrChain(keplrChainInfo: any): Promise<void> {\r\n  const w = window as any;\r\n  if (!w.getOfflineSigner || !w.keplr) {\r\n    throw new Error(\"Please install keplr extension\");\r\n  }\r\n\r\n  if (!w.keplr.experimentalSuggestChain) {\r\n    throw new Error(\"Please use the recent version of keplr extension\");\r\n  }\r\n\r\n  try {\r\n    await w.keplr.experimentalSuggestChain(keplrChainInfo);\r\n  } catch {\r\n    throw new Error(\"Failed to suggest the chain\");\r\n  }\r\n}\r\n\r\nexport async function loadLedgerWallet(addressPrefix: string): Promise<OfflineAminoSigner> {\r\n  const interactiveTimeout = 120_000;\r\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\r\n\r\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\r\n}\r\n\r\nasync function createStargateSigningClient(signer: OfflineSigner): Promise<StargateSigningClient> {\r\n  const { nodeUrls, gasPrice } = settings.backend;\r\n  const endpoint = nodeUrls[0];\r\n\r\n  const typeRegistry = new Registry([\r\n    [msgStoreCodeTypeUrl, MsgStoreCode],\r\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\r\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\r\n  ]);\r\n\r\n  const gasLimits: GasLimits<CosmWasmFeeTable> = {\r\n    ...defaultStargateGasLimits,\r\n    upload: 1500000,\r\n    init: 600000,\r\n    exec: 400000,\r\n    migrate: 600000,\r\n    send: 80000,\r\n    changeAdmin: 80000,\r\n  };\r\n\r\n  return StargateSigningClient.connectWithSigner(endpoint, signer, {\r\n    registry: typeRegistry,\r\n    gasPrice: gasPrice,\r\n    gasLimits: gasLimits,\r\n  });\r\n}\r\n\r\nexport async function getAddressAndStargateSigningClient(\r\n  loadWallet: WalletLoaderDirect,\r\n  mnemonic?: string,\r\n): Promise<[string, StargateSigningClient]> {\r\n  const signer = await loadWallet(settings.backend.addressPrefix, mnemonic);\r\n  const userAddress = (await signer.getAccounts())[0].address;\r\n  const signingClient = await createStargateSigningClient(signer);\r\n  return [userAddress, signingClient];\r\n}\r\n\r\nexport function webUsbMissing(): boolean {\r\n  const anyNavigator: any = navigator;\r\n  return !anyNavigator?.usb;\r\n}\r\n","import React from \"react\";\r\n\r\nimport { ClientContext } from \"../contexts/ClientContext\";\r\nimport { settings } from \"../settings\";\r\nimport {\r\n  getAddressAndStargateSigningClient,\r\n  loadKeplrWallet,\r\n  loadLedgerWallet,\r\n  WalletLoaderDirect,\r\n  webUsbMissing,\r\n} from \"../ui-utils/clients\";\r\n\r\nexport function Login(): JSX.Element {\r\n  const { userAddress, setUserAddress, setSigningClient, client } = React.useContext(ClientContext);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState<string>();\r\n\r\n  async function loginStargate(loadWallet: WalletLoaderDirect): Promise<void> {\r\n    setLoading(true);\r\n    setError(undefined);\r\n\r\n    try {\r\n      const [userAddress, signingClient] = await getAddressAndStargateSigningClient(loadWallet);\r\n      setUserAddress(userAddress);\r\n      setSigningClient(signingClient);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  function logout(): void {\r\n    setError(undefined);\r\n    setUserAddress(undefined);\r\n    setSigningClient(undefined);\r\n  }\r\n\r\n  function renderLoginButton(): JSX.Element {\r\n    const { keplrChainInfo } = settings.backend;\r\n\r\n    let keplrButton;\r\n    if (keplrChainInfo !== undefined && client !== null) {\r\n      keplrButton = (\r\n        <button\r\n          className=\"dropdown-item\"\r\n          onClick={async () => loginStargate(loadKeplrWallet(client, keplrChainInfo))}\r\n        >\r\n          Keplr wallet\r\n        </button>\r\n      );\r\n    }\r\n\r\n    return loading ? (\r\n      <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n        <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n        Loading...\r\n      </button>\r\n    ) : (\r\n      <>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary dropdown-toggle\"\r\n          data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\"\r\n          aria-expanded=\"false\"\r\n        >\r\n          Login\r\n        </button>\r\n        <div className=\"dropdown-menu\">\r\n          <h6 className=\"dropdown-header\">with</h6>\r\n          {keplrButton}\r\n          <button\r\n            className=\"dropdown-item\"\r\n            onClick={() => loginStargate(loadLedgerWallet)}\r\n            disabled={webUsbMissing()}\r\n          >\r\n            Ledger wallet\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function renderLogoutButton(): JSX.Element {\r\n    return (\r\n      <button className=\"btn btn-primary\" onClick={logout}>\r\n        Logout\r\n      </button>\r\n    );\r\n  }\r\n\r\n  const isUserLoggedIn = !!userAddress;\r\n\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-end\">\r\n      {error ? <div className=\"mr-3 p-2 rounded bg-white text-danger\">{error}</div> : null}\r\n      {isUserLoggedIn ? renderLogoutButton() : renderLoginButton()}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\n\nexport function UserAddress(): JSX.Element {\n  const { userAddress } = React.useContext(ClientContext);\n\n  return userAddress ? (\n    <>\n      <Link className=\"btn btn-light mr-3\" to={`/codes/new`}>\n        Upload\n      </Link>\n      <div className=\"mr-3 p-2 rounded bg-white\">\n        <span className=\"badge\">{userAddress}</span>\n      </div>\n    </>\n  ) : (\n    <></>\n  );\n}\n","import React from \"react\";\r\n\r\nimport { Login } from \"./Login\";\r\nimport { UserAddress } from \"./UserAddress\";\r\n\r\nexport function Header(): JSX.Element {\r\n  return (\r\n    <header className=\"mt-3 p-0 d-flex align-items-center justify-content-end container contract-container\">\r\n      <UserAddress />\r\n      <Login />\r\n    </header>\r\n  );\r\n}\r\n","import { fromUtf8 } from \"@cosmjs/encoding\";\r\nimport { Decimal } from \"@cosmjs/math\";\r\nimport { Coin } from \"@cosmjs/stargate/build/codec/cosmos/base/v1beta1/coin\";\r\n\r\nexport function ellideMiddle(str: string, maxOutLen: number): string {\r\n  if (str.length <= maxOutLen) {\r\n    return str;\r\n  }\r\n  const ellide = \"…\";\r\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\r\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\r\n  return str.slice(0, frontLen) + ellide + str.slice(str.length - tailLen, str.length);\r\n}\r\n\r\nexport function ellideRight(str: string, maxOutLen: number): string {\r\n  if (str.length <= maxOutLen) {\r\n    return str;\r\n  }\r\n  const ellide = \"…\";\r\n  const frontLen = maxOutLen - ellide.length;\r\n  return str.slice(0, frontLen) + ellide;\r\n}\r\n\r\n// NARROW NO-BREAK SPACE (U+202F)\r\nconst thinSpace = \"\\u202F\";\r\n\r\nfunction printableCoin(coin: Coin): string {\r\n  if (coin.denom?.startsWith(\"u\")) {\r\n    const ticker = coin.denom.slice(1).toUpperCase();\r\n    return Decimal.fromAtomics(coin.amount ?? \"0\", 6).toString() + thinSpace + ticker;\r\n  } else {\r\n    return coin.amount + thinSpace + coin.denom;\r\n  }\r\n}\r\n\r\nexport function printableBalance(balance: readonly Coin[]): string {\r\n  if (balance.length === 0) return \"–\";\r\n  return balance.map(printableCoin).join(\", \");\r\n}\r\n\r\nexport function parseMsgContract(msg: Uint8Array): any {\r\n  const json = fromUtf8(msg);\r\n\r\n  return JSON.parse(json);\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { ellideMiddle } from \"../ui-utils\";\r\n\r\ninterface Props {\r\n  readonly address: string;\r\n  readonly maxLength?: number | null;\r\n}\r\n\r\nexport function AccountLink({ address, maxLength = 20 }: Props): JSX.Element {\r\n  return (\r\n    <Link to={`/accounts/${address}`} title={address}>\r\n      {ellideMiddle(address, maxLength || 99999)}\r\n    </Link>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { ellideMiddle } from \"../ui-utils\";\r\n\r\ninterface Props {\r\n  readonly transactionId: string;\r\n  readonly maxLength?: number | null;\r\n}\r\n\r\nexport function TransactionLink({ transactionId, maxLength = 20 }: Props): JSX.Element {\r\n  return (\r\n    <Link to={`/transactions/${transactionId}`} title={transactionId}>\r\n      {ellideMiddle(transactionId, maxLength || 99999)}\r\n    </Link>\r\n  );\r\n}\r\n","import { MsgSend } from \"@cosmjs/stargate/build/codec/cosmos/bank/v1beta1/tx\";\r\nimport React from \"react\";\r\n\r\nimport { AccountLink } from \"../../components/AccountLink\";\r\nimport { TransactionLink } from \"../../components/TransactionLink\";\r\nimport { printableBalance } from \"../../ui-utils\";\r\n\r\nexport interface Transfer {\r\n  readonly key: string;\r\n  readonly height: number;\r\n  readonly transactionId: string;\r\n  readonly msg: MsgSend;\r\n}\r\n\r\ninterface Props {\r\n  readonly transfers: readonly Transfer[];\r\n}\r\n\r\nexport function TransfersTable({ transfers: executions }: Props): JSX.Element {\r\n  return (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">Height</th>\r\n          <th scope=\"col\">Transaction ID</th>\r\n          <th scope=\"col\">Sender</th>\r\n          <th scope=\"col\">Recipient</th>\r\n          <th scope=\"col\">Amount</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {executions.map((execution, index) => (\r\n          <tr key={execution.key}>\r\n            <th scope=\"row\">{index + 1}</th>\r\n            <td>{execution.height}</td>\r\n            <td>\r\n              <TransactionLink transactionId={execution.transactionId} />\r\n            </td>\r\n            <td>\r\n              <AccountLink address={execution.msg.fromAddress} />\r\n            </td>\r\n            <td>\r\n              <AccountLink address={execution.msg.toAddress} />\r\n            </td>\r\n            <td>{printableBalance(execution.msg.amount)}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import { Registry } from \"@cosmjs/proto-signing\";\r\nimport { IndexedTx } from \"@cosmjs/stargate\";\r\nimport { Coin } from \"@cosmjs/stargate/build/codec/cosmos/base/v1beta1/coin\";\r\nimport { Tx } from \"@cosmjs/stargate/build/codec/cosmos/tx/v1beta1/tx\";\r\nimport React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nimport { FooterRow } from \"../../components/FooterRow\";\r\nimport { Header } from \"../../components/Header\";\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { settings } from \"../../settings\";\r\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\r\nimport { StargateClient } from \"../../ui-utils/clients\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\nimport { AnyMsgSend, isAnyMsgSend } from \"../../ui-utils/txs\";\r\nimport { Transfer, TransfersTable } from \"./TransfersTable\";\r\n\r\ntype ICoin = Coin;\r\n\r\nfunction getTransferFromStargateMsgSend(typeRegistry: Registry, tx: IndexedTx) {\r\n  return (msg: AnyMsgSend, i: number) => {\r\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value });\r\n    return {\r\n      key: `${tx.hash}_${i}`,\r\n      height: tx.height,\r\n      transactionId: tx.hash,\r\n      msg: decodedMsg,\r\n    };\r\n  };\r\n}\r\n\r\nconst stargateEffect = (\r\n  client: StargateClient,\r\n  address: string,\r\n  typeRegistry: Registry,\r\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\r\n  setTransfers: (transfers: readonly Transfer[] | ErrorState | LoadingState) => void,\r\n) => (): void => {\r\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(address, denom)))\r\n    .then((balances) => {\r\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\r\n      setBalance(filteredBalances);\r\n    })\r\n    .catch(() => setBalance(errorState));\r\n  client\r\n    .searchTx({ sentFromOrTo: address })\r\n    .then((txs) => {\r\n      const out = txs.reduce((transfers: readonly Transfer[], tx: IndexedTx): readonly Transfer[] => {\r\n        const decodedTx = Tx.decode(tx.tx);\r\n        const txTransfers = (decodedTx?.body?.messages ?? [])\r\n          .filter(isAnyMsgSend)\r\n          .map(getTransferFromStargateMsgSend(typeRegistry, tx));\r\n        return [...transfers, ...txTransfers];\r\n      }, []);\r\n      setTransfers(out);\r\n    })\r\n    .catch(() => setTransfers(errorState));\r\n};\r\n\r\nexport function AccountPage(): JSX.Element {\r\n  const { client, typeRegistry } = React.useContext(ClientContext);\r\n  const { address: addressParam } = useParams<{ readonly address: string }>();\r\n  const address = addressParam || \"\";\r\n\r\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\r\n  const [transfers, setTransfers] = React.useState<readonly Transfer[] | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n\r\n  React.useEffect(\r\n    client !== null ? stargateEffect(client, address, typeRegistry, setBalance, setTransfers) : () => {},\r\n    [address, client, typeRegistry],\r\n  );\r\n\r\n  const pageTitle = <span title={address}>Account {ellideMiddle(address, 15)}</span>;\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <Header />\r\n      <div className=\"container mt-3 contract-container\">\r\n        <div className=\"row white-row white-row-first\">\r\n          <div className=\"col\">\r\n            <nav aria-label=\"breadcrumb\">\r\n              <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                  {pageTitle}\r\n                </li>\r\n              </ol>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row white-row\">\r\n          <div className=\"col\">\r\n            <h1>{pageTitle}</h1>\r\n            <ul className=\"list-group list-group-horizontal mb-3\">\r\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\r\n                Balance:{\" \"}\r\n                {isLoadingState(balance)\r\n                  ? \"Loading …\"\r\n                  : isErrorState(balance)\r\n                  ? \"Error\"\r\n                  : printableBalance(balance)}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row white-row white-row-last\">\r\n          <div className=\"col\">\r\n            <h2>Token transfers</h2>\r\n            <p>Incoming and outgoing bank token transfers</p>\r\n            {isLoadingState(transfers) ? (\r\n              <p>Loading …</p>\r\n            ) : isErrorState(transfers) ? (\r\n              <p>Error</p>\r\n            ) : transfers.length === 0 ? (\r\n              <p>No transfer found</p>\r\n            ) : (\r\n              <TransfersTable transfers={transfers} />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <FooterRow />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export interface Tag {\r\n  readonly key: string;\r\n  readonly value: string;\r\n}\r\n\r\nexport function makeTags(oneLiner: string): Tag[] {\r\n  return oneLiner.split(\"&\").map((pair) => {\r\n    if (pair.indexOf(\"=\") === -1) throw new Error(\"Parsing error: Equal sign missing\");\r\n    const parts = pair.split(\"=\");\r\n    if (parts.length > 2) {\r\n      throw new Error(\r\n        \"Parsing error: Multiple equal signs found. If you need escaping support, please create a PR.\",\r\n      );\r\n    }\r\n    const [key, value] = parts;\r\n    if (!key) throw new Error(\"Parsing error: Key must not be empty\");\r\n    return { key, value };\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { ellideMiddle } from \"../ui-utils\";\r\n\r\ninterface Props {\r\n  readonly address: string;\r\n  readonly maxLength?: number | null;\r\n}\r\n\r\nexport function ContractLink({ address, maxLength = 20 }: Props): JSX.Element {\r\n  return (\r\n    <Link to={`/contracts/${address}`} title={address}>\r\n      {ellideMiddle(address, maxLength || 99999)}\r\n    </Link>\r\n  );\r\n}\r\n","// Place error box below text box, so appearing error does not push text box down\r\nexport const jsonInputStyle = {\r\n  container: { display: \"flex\", flexDirection: \"column\" },\r\n  body: { order: \"1\" },\r\n  warningBox: { order: \"2\" },\r\n};\r\n","import { InstantiateResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\nimport { ContractLink } from \"../../components/ContractLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\nconst executePlaceholder = {\n  name: \"Nation coin\",\n  symbol: \"NTN\",\n  decimals: 6,\n};\n\nconst coinsPlaceholder = [{ denom: settings.backend.denominations[0], amount: \"1\" }];\n\ninterface Props {\n  readonly codeId: number;\n}\n\nexport function InstantiationContract({ codeId }: Props): JSX.Element {\n  const { userAddress, signingClient } = React.useContext(ClientContext);\n\n  const [executing, setExecuting] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  const [memo, setMemo] = React.useState<string>();\n  const [label, setLabel] = React.useState<string>();\n\n  const [msgObject, setMsgObject] = React.useState<Result<Record<string, any>>>();\n  const [coinsObject, setCoinsObject] = React.useState<Result<ReadonlyArray<Coin>>>();\n\n  const [executeResponse, setExecuteResponse] = React.useState<Result<InstantiateResult>>();\n\n  React.useEffect(() => {\n    setMsgObject({ result: executePlaceholder });\n    setCoinsObject({ result: coinsPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (msgObject?.error) {\n      setError(msgObject.error);\n      return;\n    }\n\n    if (executeResponse?.error) {\n      setError(executeResponse.error);\n      return;\n    }\n\n    if (coinsObject?.error) {\n      setError(coinsObject.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [coinsObject, executeResponse, msgObject]);\n\n  async function executeContract(): Promise<void> {\n    if (!msgObject?.result || !userAddress || !label || !signingClient) return;\n\n    setExecuting(true);\n\n    try {\n      const executeResponseResult: InstantiateResult = await signingClient.instantiate(\n        userAddress,\n        codeId,\n        msgObject.result,\n        label,\n        {\n          memo: memo,\n          transferAmount: coinsObject?.result,\n        },\n      );\n      setExecuteResponse({ result: executeResponseResult });\n    } catch (error) {\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\n    }\n\n    setExecuting(false);\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Instantiate contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={executePlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setMsgObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Coins to transfer:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"120px\"\n            placeholder={coinsPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setCoinsObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <div className=\"form-group row flex-grow-1\">\n            <label className=\"col-sm-2 col-form-label\">Label</label>\n            <div className=\"col-sm-10\">\n              <input\n                className=\"form-control\"\n                value={label}\n                onChange={(event) => setLabel(event.target.value)}\n              />\n            </div>\n          </div>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <div className=\"form-group row flex-grow-1\">\n            <label className=\"col-sm-2 col-form-label\">Memo</label>\n            <div className=\"col-sm-10\">\n              <input\n                className=\"form-control\"\n                value={memo}\n                onChange={(event) => setMemo(event.target.value)}\n              />\n            </div>\n          </div>\n        </li>\n        <div className=\"list-group-item btn-group\">\n          {executing ? (\n            <button className=\"btn btn-primary\" type=\"button\" disabled>\n              <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n              Executing...\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary\"\n              onClick={executeContract}\n              disabled={!msgObject?.result || !signingClient}\n            >\n              Instantiate contract\n            </button>\n          )}\n        </div>\n        {executeResponse?.result ? (\n          <>\n            <li className=\"list-group-item\">\n              <span className=\"font-weight-bold\">Response:</span>\n            </li>\n            <li className=\"list-group-item\">\n              <div className=\"row mb-3\">\n                <div className=\"col-md-3\">\n                  <span>Contract:</span>\n                </div>\n                <div className=\"col-md-9\">\n                  <ContractLink address={executeResponse.result.contractAddress} maxLength={99} />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-md-3\">\n                  <span>Transaction:</span>\n                </div>\n                <div className=\"col-md-9\">\n                  <TransactionLink transactionId={executeResponse.result.transactionHash} maxLength={40} />\n                </div>\n              </div>\n            </li>\n          </>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport { quote } from \"shell-quote\";\r\n\r\ninterface Props {\r\n  readonly checksum: string;\r\n  readonly source: string | undefined;\r\n  readonly builder: string | undefined;\r\n}\r\n\r\nfunction VerifyContract({ checksum, source, builder }: Props): JSX.Element {\r\n  if (!source || !builder) {\r\n    return (\r\n      <span>\r\n        Contract cannot be verified since <code>builder</code> or <code>source</code> is missing\r\n      </span>\r\n    );\r\n  }\r\n\r\n  const verificationCmd = quote([\"cosmwasm-verify\", source, builder, checksum]);\r\n\r\n  return <code>{verificationCmd}</code>;\r\n}\r\n\r\nexport default VerifyContract;\r\n","import { CodeDetails } from \"@cosmjs/cosmwasm-stargate\";\r\nimport React from \"react\";\r\n\r\nimport { AccountLink } from \"../../components/AccountLink\";\r\nimport { TransactionLink } from \"../../components/TransactionLink\";\r\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\r\nimport VerifyContract from \"./VerifyContract\";\r\n\r\ninterface Props {\r\n  readonly code: CodeDetails;\r\n  readonly uploadTxHash: string | undefined | ErrorState | LoadingState;\r\n}\r\n\r\nexport function CodeInfo({ code, uploadTxHash }: Props): JSX.Element {\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item\">\r\n          Upload transaction:{\" \"}\r\n          {isLoadingState(uploadTxHash) ? (\r\n            \"Loading …\"\r\n          ) : isErrorState(uploadTxHash) ? (\r\n            \"Error\"\r\n          ) : uploadTxHash === undefined ? (\r\n            \"–\"\r\n          ) : (\r\n            <TransactionLink transactionId={uploadTxHash} />\r\n          )}\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          Creator: <AccountLink address={code.creator} maxLength={null} />\r\n        </li>\r\n        <li className=\"list-group-item\">Checksum: {code.checksum}</li>\r\n        <li className=\"list-group-item\">Source: {code.source || \"–\"}</li>\r\n        <li className=\"list-group-item\">Builder: {code.builder || \"–\"}</li>\r\n        <li className=\"list-group-item\">\r\n          <p className=\"text-muted\">\r\n            Code verification allows you to verify that uploaded code was compiled from the source it claims.{\" \"}\r\n            <a href=\"https://github.com/CosmWasm/cosmwasm-verify\" className=\"text-muted\">\r\n              Tell me more!\r\n            </a>\r\n          </p>\r\n          <p className=\"mb-0\">\r\n            <VerifyContract checksum={code.checksum} source={code.source} builder={code.builder} />\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import { Contract } from \"@cosmjs/cosmwasm-stargate\";\r\nimport React from \"react\";\r\n\r\nimport { AccountLink } from \"../../components/AccountLink\";\r\nimport { ContractLink } from \"../../components/ContractLink\";\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\n\r\ninterface Props {\r\n  readonly position: number;\r\n  readonly address: string;\r\n}\r\n\r\nfunction InstanceRow({ position, address }: Props): JSX.Element {\r\n  const { client } = React.useContext(ClientContext);\r\n  const [executionCount, setExecutionCount] = React.useState<number | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n  const [contract, setContractInfo] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\r\n\r\n  React.useEffect(() => {\r\n    (client?.getContract(address) as Promise<Contract>)\r\n      .then((execTxs) => setContractInfo(execTxs))\r\n      .catch(() => setContractInfo(errorState));\r\n\r\n    const tags = [\r\n      {\r\n        key: \"message.contract_address\",\r\n        value: address,\r\n      },\r\n      {\r\n        key: \"message.action\",\r\n        value: \"execute\",\r\n      },\r\n    ];\r\n    (client?.searchTx({ tags: tags }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\r\n      .then((execTxs) => setExecutionCount(execTxs.length))\r\n      .catch(() => setExecutionCount(errorState));\r\n  }, [client, address]);\r\n\r\n  return isLoadingState(contract) ? (\r\n    <tr>\r\n      <td>Loading ...</td>\r\n    </tr>\r\n  ) : isErrorState(contract) ? (\r\n    <tr>\r\n      <td>Error</td>\r\n    </tr>\r\n  ) : (\r\n    <tr>\r\n      <th scope=\"row\">{position}</th>\r\n      <td>{contract.label}</td>\r\n      <td>\r\n        <ContractLink address={contract.address} />\r\n      </td>\r\n      <td>\r\n        <AccountLink address={contract.creator} />\r\n      </td>\r\n      <td>{contract.admin ? <AccountLink address={contract.admin} /> : \"–\"}</td>\r\n      <td>\r\n        {isLoadingState(executionCount)\r\n          ? \"Loading …\"\r\n          : isErrorState(executionCount)\r\n          ? \"Error\"\r\n          : executionCount}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default InstanceRow;\r\n","import React from \"react\";\r\n\r\nexport function InstancesEmptyState(): JSX.Element {\r\n  return <p>Code is not yet instantiated</p>;\r\n}\r\n","import \"./CodePage.css\";\n\nimport { CodeDetails } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { InstantiationContract } from \"../contract/InstantiationContract\";\nimport { CodeInfo } from \"./CodeInfo\";\nimport InstanceRow from \"./InstanceRow\";\nimport { InstancesEmptyState } from \"./InstancesEmptyState\";\n\nexport function CodePage(): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const { codeId: codeIdParam } = useParams<{ readonly codeId: string }>();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | ErrorState | LoadingState>(loadingState);\n  const [contracts, setContracts] = React.useState<readonly string[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n  const [uploadTxHash, setUploadTxHash] = React.useState<string | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(codeId)\n      .then(setContracts)\n      .catch(() => setContracts(errorState));\n    client\n      ?.getCodeDetails(codeId)\n      .then(setDetails)\n      .catch(() => setDetails(errorState));\n    client\n      ?.searchTx({\n        tags: makeTags(`message.module=wasm&message.action=store-code&message.code_id=${codeId}`),\n      })\n      .then((results) => {\n        const first = results.find(() => true);\n        setUploadTxHash(first?.hash);\n      });\n  }, [client, codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">Type: Wasm</li>\n              <li className=\"list-group-item\">\n                Size:{\" \"}\n                {isLoadingState(details)\n                  ? \"Loading …\"\n                  : isErrorState(details)\n                  ? \"Error\"\n                  : Math.round(details.data.length / 1024) + \" KiB\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <span>Loading …</span>\n            ) : isErrorState(details) ? (\n              <span>Error</span>\n            ) : (\n              <>\n                <CodeInfo code={details} uploadTxHash={uploadTxHash} />\n                <InstantiationContract codeId={details.id} />\n              </>\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Instances</h2>\n            {isLoadingState(contracts) ? (\n              <p>Loading …</p>\n            ) : isErrorState(contracts) ? (\n              <p>Error loading instances</p>\n            ) : contracts.length === 0 ? (\n              <InstancesEmptyState />\n            ) : (\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Label</th>\n                    <th scope=\"col\">Contract</th>\n                    <th scope=\"col\">Creator</th>\n                    <th scope=\"col\">Admin</th>\n                    <th scope=\"col\">Executions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {contracts.map((address, index) => (\n                    <InstanceRow position={index + 1} address={address} key={address} />\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  readonly codeId: number;\r\n  readonly text?: string;\r\n}\r\n\r\nexport function CodeLink({ codeId, text }: Props): JSX.Element {\r\n  return <Link to={`/codes/${codeId}`}>{text || `Code #${codeId}`}</Link>;\r\n}\r\n","import \"./NewCodePage.css\";\n\nimport { UploadResult } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { Result } from \"../contract/ContractPage\";\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\n\nexport function NewCodePage(): JSX.Element {\n  const { userAddress, signingClient } = React.useContext(ClientContext);\n  const [wasm, setWasm] = React.useState<File | null>();\n  const [memo, setMemo] = React.useState<string>();\n  const [source, setSource] = React.useState<string>();\n  const [builder, setBuilder] = React.useState<string>();\n\n  const [executing, setExecuting] = React.useState(false);\n  const [executeResponse, setExecuteResponse] = React.useState<Result<UploadResult>>();\n  const [error, setError] = React.useState<string>();\n\n  React.useEffect(() => {\n    if (executeResponse?.error) {\n      setError(executeResponse.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [executeResponse]);\n\n  async function uploadCode(): Promise<void> {\n    if (!userAddress || !wasm || !signingClient) return;\n\n    setExecuting(true);\n    const wasmBytes = new Uint8Array(await wasm.arrayBuffer());\n    try {\n      const executeResponseResult: UploadResult = await signingClient.upload(\n        userAddress,\n        wasmBytes,\n        {\n          builder: builder,\n          source: source,\n        },\n        memo,\n      );\n      setExecuteResponse({ result: executeResponseResult });\n    } catch (error) {\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\n    }\n\n    setExecuting(false);\n  }\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  New Code\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <div className=\"card mb-3\">\n              <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item d-flex align-items-baseline\">\n                  <span>New Wasm Code</span>\n                </li>\n                <li className=\"list-group-item d-flex align-items-baseline\">\n                  <span title=\"The wasm code\">Wasm:</span>\n                  <div className=\"file btn btn-secondary\">\n                    {wasm?.name ?? \"Select file\"}\n                    <input\n                      type=\"file\"\n                      accept=\".wasm\"\n                      className=\"ml-3 flex-grow-1 form-control-file\"\n                      onChange={(e) => setWasm(e.target.files?.item(0))}\n                    />\n                  </div>\n                </li>\n                <li className=\"list-group-item d-flex align-items-baseline\">\n                  <label title=\"The wasm source\">Source:</label>\n                  <input\n                    type=\"url\"\n                    className=\"ml-3 flex-grow-1 form-control\"\n                    value={source}\n                    onChange={(event) => setSource(event.target.value)}\n                  />\n                </li>\n                <li className=\"list-group-item d-flex align-items-baseline\">\n                  <label title=\"The wasm builder\">Builder:</label>\n                  <input\n                    className=\"ml-3 flex-grow-1 form-control\"\n                    value={builder}\n                    onChange={(event) => setBuilder(event.target.value)}\n                  />\n                </li>\n                <li className=\"list-group-item d-flex align-items-baseline\">\n                  <label title=\"The tx memo\">Memo:</label>\n                  <input\n                    className=\"ml-3 flex-grow-1 form-control\"\n                    value={memo}\n                    onChange={(event) => setMemo(event.target.value)}\n                  />\n                </li>\n                <div className=\"list-group-item btn-group\">\n                  {executing ? (\n                    <button className=\"btn btn-primary\" type=\"button\" disabled>\n                      <span\n                        className=\"spinner-border spinner-border-sm mr-2\"\n                        role=\"status\"\n                        aria-hidden=\"true\"\n                      ></span>\n                      Executing...\n                    </button>\n                  ) : (\n                    <button className=\"btn btn-primary\" onClick={uploadCode} disabled={!signingClient}>\n                      Upload\n                    </button>\n                  )}\n                </div>\n                {executeResponse?.result ? (\n                  <>\n                    <li className=\"list-group-item\">\n                      <span className=\"font-weight-bold\">Response:</span>\n                    </li>\n                    <li className=\"list-group-item\">\n                      <div className=\"row mb-3\">\n                        <div className=\"col-md-2\">\n                          <span>Code ID:</span>\n                        </div>\n                        <div className=\"col-md-10\">\n                          <CodeLink codeId={executeResponse.result.codeId} text={\"#\" + executeResponse.result.codeId} />\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-2\">\n                          <span>Transaction:</span>\n                        </div>\n                        <div className=\"col-md-10\">\n                          <TransactionLink transactionId={executeResponse.result.transactionHash} maxLength={99} />\n                        </div>\n                      </div>\n                    </li>\n                  </>\n                ) : null}\n                {error ? (\n                  <li className=\"list-group-item\">\n                    <span className=\"text-danger\" title=\"The contract query error\">\n                      {error}\n                    </span>\n                  </li>\n                ) : null}\n              </ul>\n            </div>\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import \"./Code.css\";\r\n\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { ellideMiddle } from \"../../ui-utils\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\n\r\nexport interface CodeData {\r\n  readonly codeId: number;\r\n  readonly checksum: string;\r\n  readonly creator: string;\r\n  readonly source: string;\r\n  readonly builder: string;\r\n}\r\n\r\ninterface Props {\r\n  readonly data: CodeData;\r\n  readonly index: number;\r\n}\r\n\r\ninterface InstantiationInfo {\r\n  readonly instantiations: number;\r\n}\r\n\r\nexport function Code({ data, index }: Props): JSX.Element {\r\n  const { client } = React.useContext(ClientContext);\r\n  const [instantiationInfo, setInstantiationInfo] = React.useState<\r\n    InstantiationInfo | ErrorState | LoadingState\r\n  >(loadingState);\r\n\r\n  React.useEffect(() => {\r\n    client\r\n      ?.getContracts(data.codeId)\r\n      .then((contracts) => {\r\n        setInstantiationInfo({\r\n          instantiations: contracts.length,\r\n        });\r\n      })\r\n      .catch(() => setInstantiationInfo(errorState));\r\n    // Don't make clientContext.client a dependency. Whenever it changes, this component is recreated entirely\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data.codeId]);\r\n\r\n  return (\r\n    <div className={\"flex-element-two-two mb-3\" + (index % 2 ? \" pl-lg-2\" : \" pr-lg-2\")}>\r\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\r\n        <div className=\"id\">#{data.codeId}</div>\r\n        <div className=\"details\">\r\n          Creator: {ellideMiddle(data.creator, 30)}\r\n          <br />\r\n          Source: {ellideMiddle(data.source, 42) || \"–\"}\r\n          <br />\r\n          Builder: {data.builder || \"–\"}\r\n          <br />\r\n          Checksum: {data.checksum.slice(0, 10)}\r\n          <br />\r\n          Instances:{\" \"}\r\n          {isLoadingState(instantiationInfo)\r\n            ? \"Loading …\"\r\n            : isErrorState(instantiationInfo)\r\n            ? \"Error\"\r\n            : instantiationInfo.instantiations}\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import \"./Codes.css\";\r\n\r\nimport React from \"react\";\r\n\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\nimport { Code, CodeData } from \"./Code\";\r\n\r\ninterface LoadedCode {\r\n  readonly source: string;\r\n  readonly data: CodeData;\r\n}\r\n\r\nfunction codeKey(code: LoadedCode): string {\r\n  return `${code.source}__${code.data.codeId}`;\r\n}\r\n\r\nexport function Codes(): JSX.Element {\r\n  const { client, nodeUrl } = React.useContext(ClientContext);\r\n  const [codes, setCodes] = React.useState<readonly LoadedCode[] | ErrorState | LoadingState>(loadingState);\r\n\r\n  React.useEffect(() => {\r\n    client\r\n      ?.getCodes()\r\n      .then((codeInfos) => {\r\n        const processed = codeInfos\r\n          .map(\r\n            (response): LoadedCode => ({\r\n              source: nodeUrl,\r\n              data: {\r\n                codeId: response.id,\r\n                checksum: response.checksum,\r\n                creator: response.creator,\r\n                source: response.source || \"\",\r\n                builder: response.builder || \"\",\r\n              },\r\n            }),\r\n          )\r\n          .reverse();\r\n        setCodes(processed);\r\n      })\r\n      .catch(() => setCodes(errorState));\r\n  }, [client, nodeUrl]);\r\n\r\n  // Display codes vertically on small devices and in a flex container on large and above\r\n  return (\r\n    <div className=\"d-lg-flex flex-wrap\">\r\n      {isLoadingState(codes) ? (\r\n        <p>Loading …</p>\r\n      ) : isErrorState(codes) ? (\r\n        <p>Error loading codes</p>\r\n      ) : codes.length === 0 ? (\r\n        <p>No code uploaded yet</p>\r\n      ) : (\r\n        codes.map((code, index) => <Code data={code.data} index={index} key={codeKey(code)} />)\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { FooterRow } from \"../../components/FooterRow\";\r\nimport { Header } from \"../../components/Header\";\r\nimport { Codes } from \"./Codes\";\r\n\r\nexport function CodesPage(): JSX.Element {\r\n  return (\r\n    <div className=\"page\">\r\n      <Header />\r\n      <div className=\"container mt-3\">\r\n        <div className=\"row white-row white-row-first\">\r\n          <div className=\"col\">\r\n            <nav aria-label=\"breadcrumb\">\r\n              <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                  Codes\r\n                </li>\r\n              </ol>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n        <div className=\"row white-row white-row-last\">\r\n          <div className=\"col\">\r\n            <Codes />\r\n          </div>\r\n        </div>\r\n        <FooterRow />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactJson from \"react-json-view\";\r\n\r\ninterface Props {\r\n    readonly src: object;\r\n    readonly strLength?: number;\r\n}\r\n\r\nexport function JsonView({ src, strLength }: Props): JSX.Element {\r\n  return (\r\n      <ReactJson\r\n        src={src}\r\n        name={false}\r\n        displayDataTypes={false}\r\n        displayObjectSize={false}\r\n        collapseStringsAfterLength={strLength ?? 24}\r\n        theme=\"twilight\" \r\n      />\r\n  );\r\n}\r\n","import { ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\r\nimport { Coin } from \"@cosmjs/stargate\";\r\nimport React from \"react\";\r\nimport JSONInput from \"react-json-editor-ajrm\";\r\nimport { JsonView } from \"../../components/JsonView\";\r\n\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { settings } from \"../../settings\";\r\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\r\nimport { Result } from \"./ContractPage\";\r\n\r\nconst executePlaceholder = {\r\n  transfer: { recipient: \"juno14vhcdsyf83ngsrrqc92kmw8q9xakqjm0ff2dpn\", amount: \"1\" },\r\n};\r\n\r\nconst coinsPlaceholder = [{ denom: settings.backend.denominations[0], amount: \"1\" }];\r\n\r\ninterface Props {\r\n  readonly contractAddress: string;\r\n}\r\n\r\nexport function ExecuteContract({ contractAddress }: Props): JSX.Element {\r\n  const { userAddress, signingClient } = React.useContext(ClientContext);\r\n\r\n  const [executing, setExecuting] = React.useState(false);\r\n  const [error, setError] = React.useState<string>();\r\n\r\n  const [memo, setMemo] = React.useState<string>();\r\n\r\n  const [msgObject, setMsgObject] = React.useState<Result<Record<string, any>>>();\r\n  const [coinsObject, setCoinsObject] = React.useState<Result<ReadonlyArray<Coin>>>();\r\n\r\n  const [executeResponse, setExecuteResponse] = React.useState<Result<ExecuteResult>>();\r\n\r\n  React.useEffect(() => {\r\n    setMsgObject({ result: executePlaceholder });\r\n    setCoinsObject({ result: coinsPlaceholder });\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (msgObject?.error) {\r\n      setError(msgObject.error);\r\n      return;\r\n    }\r\n\r\n    if (executeResponse?.error) {\r\n      setError(executeResponse.error);\r\n      return;\r\n    }\r\n\r\n    if (coinsObject?.error) {\r\n      setError(coinsObject.error);\r\n      return;\r\n    }\r\n\r\n    setError(undefined);\r\n  }, [coinsObject, executeResponse, msgObject]);\r\n\r\n  async function executeContract(): Promise<void> {\r\n    if (!msgObject?.result || !userAddress || !signingClient) return;\r\n\r\n    setExecuting(true);\r\n\r\n    try {\r\n      const executeResponseResult: ExecuteResult = await signingClient.execute(\r\n        userAddress,\r\n        contractAddress,\r\n        msgObject.result,\r\n        memo,\r\n        coinsObject?.result,\r\n      );\r\n      setExecuteResponse({ result: executeResponseResult });\r\n    } catch (error) {\r\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\r\n    }\r\n\r\n    setExecuting(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <span title=\"The contract query input\">Execute contract:</span>\r\n        </li>\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <JSONInput\r\n            width=\"100%\"\r\n            height=\"200px\"\r\n            placeholder={executePlaceholder}\r\n            confirmGood={false}\r\n            style={jsonInputStyle}\r\n            onChange={({ jsObject }: any) => setMsgObject({ result: jsObject })}\r\n          />\r\n        </li>\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <span title=\"The contract query input\">Coins to transfer:</span>\r\n        </li>\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <JSONInput\r\n            width=\"100%\"\r\n            height=\"120px\"\r\n            placeholder={coinsPlaceholder}\r\n            confirmGood={false}\r\n            style={jsonInputStyle}\r\n            onChange={({ jsObject }: any) => setCoinsObject({ result: jsObject })}\r\n          />\r\n        </li>\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <div className=\"form-group row flex-grow-1\">\r\n            <label className=\"col-sm-2 col-form-label\">Memo</label>\r\n            <div className=\"col-sm-10\">\r\n              <input\r\n                className=\"form-control\"\r\n                value={memo}\r\n                onChange={(event) => setMemo(event.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </li>\r\n        <div className=\"list-group-item btn-group\">\r\n          {executing ? (\r\n            <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n              <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n              Executing...\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={executeContract}\r\n              disabled={!msgObject?.result || !signingClient}\r\n            >\r\n              Execute contract\r\n            </button>\r\n          )}\r\n        </div>\r\n        {executeResponse?.result ? (\r\n          <li className=\"list-group-item\">\r\n            <span title=\"The contract formatted input\">Response:</span>\r\n            <JsonView src={executeResponse.result} />\r\n          </li>\r\n        ) : null}\r\n        {error ? (\r\n          <li className=\"list-group-item\">\r\n            <span className=\"text-danger\" title=\"The contract query error\">\r\n              {error}\r\n            </span>\r\n          </li>\r\n        ) : null}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import { MsgExecuteContract } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport React from \"react\";\r\n\r\nimport { AccountLink } from \"../../components/AccountLink\";\r\nimport { TransactionLink } from \"../../components/TransactionLink\";\r\n\r\nexport interface Execution {\r\n  readonly key: string;\r\n  readonly height: number;\r\n  readonly transactionId: string;\r\n  readonly msg: MsgExecuteContract;\r\n}\r\n\r\ninterface Props {\r\n  readonly executions: readonly Execution[];\r\n}\r\n\r\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\r\n  return (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">Height</th>\r\n          <th scope=\"col\">Transaction ID</th>\r\n          <th scope=\"col\">Sender</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {executions.map((execution, index) => (\r\n          <tr key={execution.key}>\r\n            <th scope=\"row\">{index + 1}</th>\r\n            <td>{execution.height}</td>\r\n            <td>\r\n              <TransactionLink transactionId={execution.transactionId} />\r\n            </td>\r\n            <td>\r\n              <AccountLink address={execution.msg.sender} />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import { ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { JsonView } from \"../../components/JsonView\";\n\ninterface Props {\n  readonly contractCodeHistory: readonly ContractCodeHistoryEntry[];\n}\n\nexport function HistoryInfo({ contractCodeHistory }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <span title=\"The contract level message history\">History</span>\n        </li>\n        {contractCodeHistory.map((entry, index) => (\n          <li key={index} className=\"list-group-item\">\n            <span title=\"The message operation type\">\n              {entry.operation} - <CodeLink codeId={entry.codeId} />\n            </span>\n            <JsonView src={entry.msg} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-stargate\";\r\nimport React from \"react\";\r\n\r\nimport { AccountLink } from \"../../components/AccountLink\";\r\nimport { TransactionLink } from \"../../components/TransactionLink\";\r\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\r\n\r\ninterface Props {\r\n  readonly contract: Contract;\r\n  readonly instantiationTxHash: string | undefined | ErrorState | LoadingState;\r\n}\r\n\r\nexport function InitializationInfo({ contract, instantiationTxHash }: Props): JSX.Element {\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item\">\r\n          Instantiation transaction:{\" \"}\r\n          {isLoadingState(instantiationTxHash) ? (\r\n            \"Loading …\"\r\n          ) : isErrorState(instantiationTxHash) ? (\r\n            \"Error\"\r\n          ) : instantiationTxHash === undefined ? (\r\n            \"–\"\r\n          ) : (\r\n            <TransactionLink transactionId={instantiationTxHash} />\r\n          )}\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          Creator: <AccountLink address={contract.creator} maxLength={null} />\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          Admin: {contract.admin ? <AccountLink address={contract.admin} maxLength={null} /> : \"–\"}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport JSONInput from \"react-json-editor-ajrm\";\r\nimport { JsonView } from \"../../components/JsonView\";\r\n\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\r\nimport { Result } from \"./ContractPage\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/camelcase\r\nconst queryPlaceholder = { balance: { address: \"juno14vhcdsyf83ngsrrqc92kmw8q9xakqjm0ff2dpn\" } };\r\n\r\ninterface Props {\r\n  readonly contractAddress: string;\r\n}\r\n\r\nexport function QueryContract({ contractAddress }: Props): JSX.Element {\r\n  const { client } = React.useContext(ClientContext);\r\n\r\n  const [error, setError] = React.useState<string>();\r\n  const [queryObject, setQueryObject] = React.useState<Result<Record<string, any>>>();\r\n  const [queryResponse, setQueryResponse] = React.useState<Result<string>>();\r\n\r\n  React.useEffect(() => {\r\n    setQueryObject({ result: queryPlaceholder });\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (queryObject?.error) {\r\n      setError(queryObject.error);\r\n      return;\r\n    }\r\n\r\n    if (queryResponse?.error) {\r\n      setError(queryResponse.error);\r\n      return;\r\n    }\r\n\r\n    setError(undefined);\r\n  }, [queryObject, queryResponse]);\r\n\r\n  async function runQuery(): Promise<void> {\r\n    if (!client || !queryObject?.result) return;\r\n\r\n    try {\r\n      const queryResponseResult: Record<string, any> = await client.queryContractSmart(\r\n        contractAddress,\r\n        queryObject.result,\r\n      );\r\n\r\n      const formattedResult = JSON.stringify(queryResponseResult, null, \"  \");\r\n      setQueryResponse({ result: formattedResult });\r\n    } catch (error) {\r\n      setQueryResponse({ error: `Query error: ${error.message}` });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <span title=\"The contract query input\">Query contract:</span>\r\n        </li>\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <JSONInput\r\n            width=\"100%\"\r\n            height=\"200px\"\r\n            placeholder={queryPlaceholder}\r\n            confirmGood={false}\r\n            style={jsonInputStyle}\r\n            onChange={({ jsObject }: any) => setQueryObject({ result: jsObject })}\r\n          />\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            style={{ cursor: client && queryObject?.result ? \"pointer\" : \"not-allowed\" }}\r\n            onClick={runQuery}\r\n            disabled={!queryObject?.result}\r\n          >\r\n            Run query\r\n          </button>\r\n        </li>\r\n        {queryResponse?.result ? (\r\n          <li className=\"list-group-item\">\r\n            <span title=\"The query response\">Response:</span>\r\n            <JsonView src={JSON.parse(queryResponse.result)} />\r\n          </li>\r\n        ) : null}\r\n        {error ? (\r\n          <li className=\"list-group-item\">\r\n            <span className=\"text-danger\" title=\"The contract query error\">\r\n              {error}\r\n            </span>\r\n          </li>\r\n        ) : null}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import \"./ContractPage.css\";\r\n\r\nimport { Contract, ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-stargate\";\r\nimport { Registry } from \"@cosmjs/proto-signing\";\r\nimport { Coin } from \"@cosmjs/stargate\";\r\nimport { IndexedTx } from \"@cosmjs/stargate\";\r\nimport { Coin as ICoin } from \"@cosmjs/stargate/build/codec/cosmos/base/v1beta1/coin\";\r\nimport { Tx } from \"@cosmjs/stargate/build/codec/cosmos/tx/v1beta1/tx\";\r\nimport { Any } from \"@cosmjs/stargate/build/codec/google/protobuf/any\";\r\nimport React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nimport { CodeLink } from \"../../components/CodeLink\";\r\nimport { FooterRow } from \"../../components/FooterRow\";\r\nimport { Header } from \"../../components/Header\";\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { settings } from \"../../settings\";\r\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\r\nimport { StargateClient } from \"../../ui-utils/clients\";\r\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\nimport { ExecuteContract } from \"./ExecuteContract\";\r\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\r\nimport { HistoryInfo } from \"./HistoryInfo\";\r\nimport { InitializationInfo } from \"./InitializationInfo\";\r\nimport { QueryContract } from \"./QueryContract\";\r\n\r\ntype IAnyMsgExecuteContract = {\r\n  readonly typeUrl: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\r\n  readonly value: Uint8Array;\r\n};\r\n\r\nexport type Result<T> = { readonly result?: T; readonly error?: string };\r\n\r\nfunction isStargateMsgExecuteContract(msg: Any): msg is IAnyMsgExecuteContract {\r\n  return msg.typeUrl === \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\" && !!msg.value;\r\n}\r\n\r\nconst getAndSetDetails = (\r\n  client: StargateClient,\r\n  contractAddress: string,\r\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\r\n): void => {\r\n  client\r\n    .getContract(contractAddress)\r\n    .then(setDetails)\r\n    .catch(() => setDetails(errorState));\r\n};\r\n\r\nconst getAndSetContractCodeHistory = (\r\n  client: StargateClient,\r\n  contractAddress: string,\r\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\r\n): void => {\r\n  client\r\n    .getContractCodeHistory(contractAddress)\r\n    .then(setContractCodeHistory)\r\n    .catch((error) => {\r\n      console.error(error);\r\n    });\r\n};\r\n\r\nconst getAndSetInstantiationTxHash = (\r\n  client: StargateClient,\r\n  contractAddress: string,\r\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\r\n): void => {\r\n  (client.searchTx({\r\n    tags: makeTags(\r\n      `message.module=wasm&message.action=instantiate&message.contract_address=${contractAddress}`,\r\n    ),\r\n  }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\r\n    .then((results) => {\r\n      const first = results.find(() => true);\r\n      setInstantiationTxHash(first?.hash);\r\n    })\r\n    .catch(() => setInstantiationTxHash(errorState));\r\n};\r\n\r\nfunction getExecutionFromStargateMsgExecuteContract(typeRegistry: Registry, tx: IndexedTx) {\r\n  return (msg: IAnyMsgExecuteContract, i: number) => {\r\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value });\r\n    return {\r\n      key: `${tx.hash}_${i}`,\r\n      height: tx.height,\r\n      transactionId: tx.hash,\r\n      msg: decodedMsg,\r\n    };\r\n  };\r\n}\r\n\r\nconst stargateEffect = (\r\n  client: StargateClient,\r\n  contractAddress: string,\r\n  typeRegistry: Registry,\r\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\r\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\r\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\r\n  setExecutions: (executions: readonly Execution[] | ErrorState | LoadingState) => void,\r\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\r\n) => () => {\r\n  getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\r\n  getAndSetDetails(client, contractAddress, setDetails);\r\n  getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\r\n\r\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(contractAddress, denom)))\r\n    .then((balances) => {\r\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\r\n      setBalance(filteredBalances);\r\n    })\r\n    .catch(() => setBalance(errorState));\r\n\r\n  client\r\n    .searchTx({\r\n      tags: makeTags(`message.contract_address=${contractAddress}&message.action=execute`),\r\n    })\r\n    .then((txs) => {\r\n      const out = txs.reduce((executions: readonly Execution[], tx: IndexedTx): readonly Execution[] => {\r\n        const decodedTx = Tx.decode(tx.tx);\r\n        const txExecutions = (decodedTx?.body?.messages ?? [])\r\n          .filter(isStargateMsgExecuteContract)\r\n          .map(getExecutionFromStargateMsgExecuteContract(typeRegistry, tx));\r\n        return [...executions, ...txExecutions];\r\n      }, []);\r\n      setExecutions(out);\r\n    })\r\n    .catch(() => setExecutions(errorState));\r\n};\r\n\r\nexport function ContractPage(): JSX.Element {\r\n  const { client, typeRegistry } = React.useContext(ClientContext);\r\n  const { contractAddress: contractAddressParam } = useParams<{ readonly contractAddress: string }>();\r\n  const contractAddress = contractAddressParam || \"\";\r\n\r\n  const [details, setDetails] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\r\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\r\n  const [instantiationTxHash, setInstantiationTxHash] = React.useState<\r\n    string | undefined | ErrorState | LoadingState\r\n  >(loadingState);\r\n  const [contractCodeHistory, setContractCodeHistory] = React.useState<readonly ContractCodeHistoryEntry[]>(\r\n    [],\r\n  );\r\n  const [executions, setExecutions] = React.useState<readonly Execution[] | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n\r\n  React.useEffect(\r\n    client !== null\r\n      ? stargateEffect(\r\n          client,\r\n          contractAddress,\r\n          typeRegistry,\r\n          setBalance,\r\n          setContractCodeHistory,\r\n          setDetails,\r\n          setExecutions,\r\n          setInstantiationTxHash,\r\n        )\r\n      : () => {},\r\n    [client, contractAddress, typeRegistry],\r\n  );\r\n\r\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <Header />\r\n      <div className=\"container mt-3 contract-container\">\r\n        <div className=\"row white-row white-row-first\">\r\n          <div className=\"col\">\r\n            <nav aria-label=\"breadcrumb\">\r\n              <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <Link to=\"/codes\">Codes</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">\r\n                  {isLoadingState(details) ? (\r\n                    <span>Loading …</span>\r\n                  ) : isErrorState(details) ? (\r\n                    <span>Error</span>\r\n                  ) : (\r\n                    <CodeLink codeId={details.codeId} />\r\n                  )}\r\n                </li>\r\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                  {pageTitle}\r\n                </li>\r\n              </ol>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n        <div className=\"row white-row\">\r\n          <div className=\"col-12 col-md-6\">\r\n            <h1>{pageTitle}</h1>\r\n            <ul className=\"list-group list-group-horizontal mb-3\">\r\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\r\n                Balance:{\" \"}\r\n                {isLoadingState(balance)\r\n                  ? \"Loading …\"\r\n                  : isErrorState(balance)\r\n                  ? \"Error\"\r\n                  : printableBalance(balance)}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"col-12 col-md-6\">\r\n            {isLoadingState(details) ? (\r\n              <p>Loading …</p>\r\n            ) : isErrorState(details) ? (\r\n              <p>An Error occurred when loading contract</p>\r\n            ) : (\r\n              <>\r\n                <InitializationInfo contract={details} instantiationTxHash={instantiationTxHash} />\r\n                <HistoryInfo contractCodeHistory={contractCodeHistory} />\r\n                <QueryContract contractAddress={contractAddress} />\r\n                <ExecuteContract contractAddress={contractAddress} />\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"row white-row white-row-last\">\r\n          <div className=\"col\">\r\n            <h2>Executions</h2>\r\n            {isLoadingState(executions) ? (\r\n              <p>Loading …</p>\r\n            ) : isErrorState(executions) ? (\r\n              <p>An Error occurred when loading transactions</p>\r\n            ) : executions.length !== 0 ? (\r\n              <ExecutionsTable executions={executions} />\r\n            ) : (\r\n              <p>Contract was not yet executed</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <FooterRow />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { fromRfc3339 } from \"@cosmjs/encoding\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nconst checkMark = \"✔\"; // U+2714 HEAVY CHECK MARK\nconst xMark = \"🗙\"; // U+1F5D9 CANCELLATION X\n\ninterface Props {\n  readonly tx: IndexedTx;\n  readonly timestamp: string;\n}\n\nexport function ExecutionInfo({ tx, timestamp }: Props): JSX.Element {\n  const time = timestamp ? fromRfc3339(timestamp) : null;\n  const success = tx.code === 0;\n\n  return (\n    <ul className=\"list-group list-group-horizontal mb-3\">\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Height:</span> {tx.height}\n      </li>\n      <li className=\"list-group-item\">\n        <span title={timestamp}>\n          <span className=\"font-weight-bold\">Time:</span> {time?.toLocaleString()}\n        </span>\n      </li>\n      <li className=\"list-group-item\">\n        <span title={`Execution succeeded: ${success ? \"yes\" : \"no\"}`}>\n          <span className=\"font-weight-bold\">Success:</span>{\" \"}\n          {success ? (\n            <span className=\"text-success\">{checkMark}</span>\n          ) : (\n            <span className=\"text-danger\" title={\"error code: \" + tx.code}>\n              {xMark}\n            </span>\n          )}\n        </span>\n      </li>\n    </ul>\n  );\n}\n","import { MsgExecuteContract as IMsgExecuteContract } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ContractLink } from \"../../../components/ContractLink\";\nimport { JsonView } from \"../../../components/JsonView\";\nimport { parseMsgContract, printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgExecuteContract;\n}\n\nexport function MsgExecuteContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Contract:</span>{\" \"}\n        <ContractLink address={msg.contract ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Sender:</span>{\" \"}\n        <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Sent funds:</span> {printableBalance(msg.funds)}\n      </li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\" className=\"font-weight-bold\">\n          Handle message\n        </span>\n        :\n        <JsonView src={parseMsgContract(msg.msg)} strLength={100} />\n      </li>\n    </Fragment>\n  );\n}\n","import { MsgInstantiateContract as IMsgInstantiateContract } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { CodeLink } from \"../../../components/CodeLink\";\nimport { JsonView } from \"../../../components/JsonView\";\nimport { parseMsgContract, printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgInstantiateContract;\n}\n\nexport function MsgInstantiateContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Sender:</span>{\" \"}\n        <AccountLink address={msg.sender || \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Code ID:</span>{\" \"}\n        <CodeLink codeId={msg.codeId?.toNumber() ?? 0} text={msg.codeId?.toString() ?? \"-\"} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Label:</span> {msg.label}\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Init funds:</span> {printableBalance(msg.funds)}\n      </li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\" className=\"font-weight-bold\">\n          Init message\n        </span>\n        :\n        <JsonView src={parseMsgContract(msg.initMsg)} strLength={100} />\n      </li>\n    </Fragment>\n  );\n}\n","import { MsgSend as IMsgSend } from \"@cosmjs/stargate/build/codec/cosmos/bank/v1beta1/tx\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgSend;\n}\n\nexport function MsgSend({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Sender:</span>{\" \"}\n        <AccountLink address={msg.fromAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Recipient:</span>{\" \"}\n        <AccountLink address={msg.toAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Amount:</span> {printableBalance(msg.amount ?? [])}\n      </li>\n    </Fragment>\n  );\n}\n","import { fromHex } from \"@cosmjs/encoding\";\r\n\r\nfunction arrayEqual(a: Uint8Array, b: Uint8Array): boolean {\r\n  if (a.length !== b.length) return false;\r\n  const difference = a.some((byte, index) => b[index] !== byte);\r\n  return !difference;\r\n}\r\n\r\nfunction arrayStartsWith(a: Uint8Array, prefix: Uint8Array): boolean {\r\n  return arrayEqual(a.slice(0, prefix.length), prefix);\r\n}\r\n\r\nconst magic = {\r\n  gzip: fromHex(\"1F8B\"),\r\n  wasm: fromHex(\"0061736d\"),\r\n};\r\n\r\nexport type SupportedTypes = \"gzip\" | \"wasm\";\r\n\r\nexport function getFileType(data: Uint8Array): SupportedTypes | undefined {\r\n  if (arrayStartsWith(data, magic.gzip)) return \"gzip\";\r\n  if (arrayStartsWith(data, magic.wasm)) return \"wasm\";\r\n  return undefined;\r\n}\r\n","import \"./MsgStoreCode.css\";\n\nimport { MsgStoreCode as IMsgStoreCode } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\nimport { toBase64 } from \"@cosmjs/encoding\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ellideRight } from \"../../../ui-utils\";\nimport { getFileType } from \"./magic\";\n\ninterface Props {\n  readonly msg: IMsgStoreCode;\n}\n\nexport function MsgStoreCode({ msg }: Props): JSX.Element {\n  const [showAllCode, setShowAllCode] = React.useState<boolean>(false);\n\n  const dataInfo = React.useMemo(() => {\n    const data = msg.wasmByteCode ?? new Uint8Array();\n    return `${getFileType(data) || \"unknown\"}; ${data.length} bytes`;\n  }, [msg.wasmByteCode]);\n\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Sender:</span>{\" \"}\n        <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Source:</span> {msg.source || \"–\"}\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Builder:</span> {msg.builder || \"–\"}\n      </li>\n      <li className=\"list-group-item\">\n        <span className=\"font-weight-bold\">Data:</span> {dataInfo}{\" \"}\n        {!showAllCode ? (\n          <Fragment>\n            <code>{ellideRight(toBase64(msg.wasmByteCode ?? new Uint8Array()), 300)}</code>{\" \"}\n            <button className=\"btn btn-sm btn-outline-primary\" onClick={() => setShowAllCode(true)}>\n              Show all\n            </button>\n          </Fragment>\n        ) : (\n          <code className=\"long-inline-code\">{msg.wasmByteCode}</code>\n        )}\n      </li>\n    </Fragment>\n  );\n}\n","import { Tx } from \"@cosmjs/stargate/build/codec/cosmos/tx/v1beta1/tx\";\nimport React from \"react\";\n\nimport { printableBalance } from \"../../ui-utils\";\n\ninterface Props {\n  readonly tx: Tx;\n}\n\nexport function TxInfo({ tx }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <span className=\"font-weight-bold\">Memo:</span> {tx.body?.memo || \"–\"}\n        </li>\n        <li className=\"list-group-item\">\n          <span className=\"font-weight-bold\">Fee:</span> {printableBalance(tx.authInfo?.fee?.amount ?? [])}\n        </li>\n        <li className=\"list-group-item\">\n          <span className=\"font-weight-bold\">Gas:</span> {tx.authInfo?.fee?.gasLimit?.toString() ?? \"0\"}\n        </li>\n        <li className=\"list-group-item\">\n          <span className=\"font-weight-bold\">Signatures:</span> {tx.signatures?.length ?? 0}\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { Block, IndexedTx } from \"@cosmjs/stargate\";\nimport { Tx } from \"@cosmjs/stargate/build/codec/cosmos/tx/v1beta1/tx\";\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport { StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport {\n  isAnyMsgExecuteContract,\n  isAnyMsgInstantiateContract,\n  isAnyMsgSend,\n  isAnyMsgStoreCode,\n} from \"../../ui-utils/txs\";\nimport { ExecutionInfo } from \"./ExecutionInfo\";\nimport { MsgExecuteContract } from \"./msgs/MsgExecuteContract\";\nimport { MsgInstantiateContract } from \"./msgs/MsgInstantiateContract\";\nimport { MsgSend } from \"./msgs/MsgSend\";\nimport { MsgStoreCode } from \"./msgs/MsgStoreCode\";\nimport { TxInfo } from \"./TxInfo\";\n\nconst stargateEffect = (\n  client: StargateClient,\n  txId: string,\n  setDetails: (details: IndexedTx | undefined | ErrorState | LoadingState) => void,\n  setBlockInfo: (block: Block | undefined | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getTx(txId)\n    .then((tx) => {\n      setDetails(tx || undefined);\n      if (!tx) return;\n      client\n        .getBlock(tx.height)\n        .then((b) => {\n          setBlockInfo(b);\n        })\n        .catch(() => setBlockInfo(errorState));\n    })\n    .catch(() => setDetails(errorState));\n};\n\nexport function TxPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { txId: txIdParam } = useParams<{ readonly txId: string }>();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  const [block, setBlockInfo] = React.useState<Block | undefined | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(client !== null ? stargateEffect(client, txId, setDetails, setBlockInfo) : () => {}, [\n    client,\n    txId,\n    typeRegistry,\n  ]);\n\n  const formatMsg = (typeUrl?: string): string | undefined => {\n    if (!typeUrl) return typeUrl;\n\n    const idx = typeUrl.lastIndexOf(\".\");\n\n    return idx < 0 ? typeUrl : typeUrl.substring(idx + 1);\n  };\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            {isLoadingState(details) ? (\n              <p>Loading...</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <ExecutionInfo\n                tx={details}\n                timestamp={isLoadingState(block) || isErrorState(block) ? \"\" : block?.header.time || \"\"}\n              />\n            )}\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <TxInfo tx={Tx.decode(details.tx)} />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Messages</h2>\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              Tx.decode(details.tx).body?.messages?.map((msg: any, index: number) => (\n                <div className=\"card mb-3\" key={`${details.hash}_${index}`}>\n                  <div className=\"card-header\">\n                    <h4>\n                      <span className=\"badge badge-pill badge-info\">\n                        {formatMsg(msg.typeUrl) || <em>unset</em>}\n                      </span>\n                    </h4>\n                  </div>\n                  <ul className=\"list-group list-group-flush\">\n                    {isAnyMsgSend(msg) ? (\n                      <MsgSend msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })} />\n                    ) : isAnyMsgStoreCode(msg) ? (\n                      <MsgStoreCode msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })} />\n                    ) : isAnyMsgInstantiateContract(msg) ? (\n                      <MsgInstantiateContract\n                        msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })}\n                      />\n                    ) : isAnyMsgExecuteContract(msg) ? (\n                      <MsgExecuteContract\n                        msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })}\n                      />\n                    ) : (\n                      <li className=\"list-group-item\">\n                        <em>This message type cannot be displayed</em>\n                      </li>\n                    )}\n                  </ul>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  readonly type: \"browser-router\" | \"hash-router\";\r\n  readonly children: React.ReactNode;\r\n}\r\n\r\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\r\n  switch (type) {\r\n    case \"browser-router\":\r\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\r\n    case \"hash-router\":\r\n      return <HashRouter>{children}</HashRouter>;\r\n  }\r\n}\r\n","import {\r\n  MsgExecuteContract,\r\n  MsgInstantiateContract,\r\n  MsgStoreCode,\r\n} from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport { Registry } from \"@cosmjs/proto-signing\";\r\nimport React from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router\";\r\n\r\nimport { ClientContext, ClientContextValue } from \"../contexts/ClientContext\";\r\nimport { AccountPage } from \"../pages/account/AccountPage\";\r\nimport { CodePage } from \"../pages/code/CodePage\";\r\nimport { NewCodePage } from \"../pages/code/NewCodePage\";\r\nimport { CodesPage } from \"../pages/codes/CodesPage\";\r\nimport { ContractPage } from \"../pages/contract/ContractPage\";\r\nimport { TxPage } from \"../pages/tx/TxPage\";\r\nimport { settings } from \"../settings\";\r\nimport { StargateClient, StargateSigningClient } from \"../ui-utils/clients\";\r\nimport {\r\n  msgExecuteContractTypeUrl,\r\n  msgInstantiateContractTypeUrl,\r\n  msgStoreCodeTypeUrl,\r\n} from \"../ui-utils/txs\";\r\nimport { FlexibleRouter } from \"./FlexibleRouter\";\r\n\r\nconst { nodeUrls } = settings.backend;\r\nconst typeRegistry = new Registry([\r\n  [msgStoreCodeTypeUrl, MsgStoreCode],\r\n  [msgInstantiateContractTypeUrl, MsgInstantiateContract],\r\n  [msgExecuteContractTypeUrl, MsgExecuteContract],\r\n]);\r\n\r\nexport function App(): JSX.Element {\r\n  const [nodeUrl, setNodeUrl] = React.useState(nodeUrls[0]);\r\n  const [userAddress, setUserAddress] = React.useState<string>();\r\n  const [signingClient, setSigningClient] = React.useState<StargateSigningClient>();\r\n  const [contextValue, setContextValue] = React.useState<ClientContextValue>({\r\n    nodeUrl: nodeUrl,\r\n    client: null,\r\n    typeRegistry: typeRegistry,\r\n    resetClient: setNodeUrl,\r\n    userAddress: userAddress,\r\n    setUserAddress: setUserAddress,\r\n    signingClient: signingClient,\r\n    setSigningClient: setSigningClient,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    (async function updateContextValue() {\r\n      const client = await StargateClient.connect(nodeUrl);\r\n      setContextValue((prevContextValue) => ({ ...prevContextValue, nodeUrl: nodeUrl, client: client }));\r\n    })();\r\n  }, [nodeUrl]);\r\n\r\n  React.useEffect(() => {\r\n    setContextValue((prevContextValue) => ({ ...prevContextValue, signingClient: signingClient }));\r\n  }, [signingClient]);\r\n\r\n  React.useEffect(() => {\r\n    setContextValue((prevContextValue) => ({ ...prevContextValue, userAddress: userAddress }));\r\n  }, [userAddress]);\r\n\r\n  return (\r\n    <ClientContext.Provider value={contextValue}>\r\n      <FlexibleRouter type={settings.deployment.routerType}>\r\n        <Switch>\r\n          <Route exact path=\"/codes\" component={CodesPage} />\r\n          <Route path=\"/codes/new\" component={NewCodePage} />\r\n          <Route path=\"/codes/:codeId\" component={CodePage} />\r\n          <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\r\n          <Route path=\"/transactions/:txId\" component={TxPage} />\r\n          <Route path=\"/accounts/:address\" component={AccountPage} />\r\n          <Route component={() => <Redirect to=\"/codes\" />} />\r\n        </Switch>\r\n      </FlexibleRouter>\r\n    </ClientContext.Provider>\r\n  );\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle\";\r\nimport \"jquery/dist/jquery.slim\";\r\nimport \"./index.css\";\r\nimport \"./dark.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}