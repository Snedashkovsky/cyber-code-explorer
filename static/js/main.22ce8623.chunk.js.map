{"version":3,"sources":["ui-utils/txs.ts","contexts/ClientContext.tsx","settings/backend.ts","settings/index.ts","ui-utils/states.ts","components/EndpointSelector.tsx","components/NodeInfoModal.tsx","components/FooterRow.tsx","ui-utils/clients.ts","components/Login.tsx","components/UserAddress.tsx","components/Header.tsx","ui-utils/index.ts","components/AccountLink.tsx","components/TransactionLink.tsx","pages/account/TransfersTable.tsx","pages/account/AccountPage.tsx","ui-utils/sdkhelpers.ts","pages/code/VerifyContract.tsx","pages/code/CodeInfo.tsx","components/ContractLink.tsx","pages/code/InstanceRow.tsx","pages/code/InstancesEmptyState.tsx","pages/code/CodePage.tsx","pages/codes/Code.tsx","pages/codes/Codes.tsx","pages/codes/CodesPage.tsx","components/CodeLink.tsx","ui-utils/jsonInput.ts","pages/contract/ExecuteContract.tsx","pages/contract/ExecutionsTable.tsx","pages/contract/HistoryInfo.tsx","pages/contract/InitializationInfo.tsx","pages/contract/QueryContract.tsx","pages/contract/ContractPage.tsx","pages/tx/ExecutionInfo.tsx","pages/tx/msgs/MsgExecuteContract.tsx","pages/tx/msgs/MsgInstantiateContract.tsx","pages/tx/msgs/MsgSend.tsx","pages/tx/msgs/magic.ts","pages/tx/msgs/MsgStoreCode.tsx","pages/tx/TxInfo.tsx","pages/tx/TxPage.tsx","components/FlexibleRouter.tsx","components/App.tsx","index.tsx"],"names":["msgStoreCodeTypeUrl","msgExecuteContractTypeUrl","isAnyMsgSend","msg","typeUrl","value","dummyContext","nodeUrl","client","typeRegistry","Registry","MsgStoreCode","MsgInstantiateContract","MsgExecuteContract","resetClient","setUserAddress","setSigningClient","ClientContext","React","createContext","devnetStargateSettings","nodeUrls","stargateEnabled","denominations","addressPrefix","gasPrice","GasPrice","fromString","knownBackends","coralnet","heldernet","devnetStargate","musselnet","lucinanet","settings","backend","id","process","Error","getCurrentBackend","deployment","routerType","runtimeCodes","isErrorState","state","isNonNullObject","type","isLoadingState","errorState","loadingState","EndpointSelector","urls","currentUrl","urlChanged","length","className","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","url","key","onClick","NodeInfoModal","htmlId","chainId","height","clientContext","useContext","tabIndex","role","aria-hidden","data-dismiss","aria-label","hrStyle","borderColor","whiteText","color","Separator","FooterRow","setChainId","useState","setHeight","updateHeight","useCallback","getHeight","then","catch","useEffect","getChainId","style","newUrl","data-target","href","isStargateClient","StargateClient","loadOrCreateMnemonic","mnemonic","loaded","localStorage","getItem","loadedMnemonic","Bip39","encode","Random","getBytes","toString","setItem","async","loadKeplrWallet","chaindId","w","window","getOfflineSigner","keplr","experimentalSuggestChain","chainName","rpc","rest","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bip44","coinType","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","features","explorerUrlToTx","registerLucina","enable","loadOrCreateWalletDirect","hdPath","makeCosmoshubPath","DirectSecp256k1HdWallet","fromMnemonic","hdPaths","prefix","loadLedgerWallet","ledgerTransport","TransportWebUSB","create","LedgerSigner","getAddressAndStargateSigningClient","loadWallet","signer","getAccounts","address","endpoint","gasLimits","defaultStargateGasLimits","upload","init","exec","migrate","send","changeAdmin","StargateSigningClient","connectWithSigner","registry","createStargateSigningClient","webUsbMissing","anyNavigator","navigator","usb","Login","userAddress","setMnemonic","loading","setLoading","error","setError","loginStargate","undefined","signingClient","message","logout","isUserLoggedIn","disabled","title","onChange","event","target","UserAddress","Header","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","printableBalance","balance","join","parseMsgContract","json","forEach","item","String","fromCharCode","JSON","parse","AccountLink","maxLength","to","TransactionLink","transactionId","TransfersTable","transfers","executions","scope","execution","index","fromAddress","toAddress","AccountPage","addressParam","useParams","setBalance","setTransfers","Promise","all","getBalance","balances","filteredBalances","filter","searchTx","sentFromOrTo","txs","out","reduce","tx","decodedTx","Tx","decode","body","messages","i","decodedMsg","hash","getTransferFromStargateMsgSend","stargateEffect","pageTitle","aria-current","makeTags","oneLiner","split","pair","indexOf","parts","VerifyContract","checksum","source","builder","verificationCmd","quote","CodeInfo","code","uploadTxHash","creator","ContractLink","InstanceRow","position","executionCount","setExecutionCount","contract","setContractInfo","getContract","execTxs","tags","label","admin","InstancesEmptyState","CodePage","codeId","codeIdParam","parseInt","details","setDetails","contracts","setContracts","setUploadTxHash","getContracts","getCodeDetails","results","first","find","round","data","Code","instantiationInfo","setInstantiationInfo","instantiations","codeKey","Codes","codes","setCodes","getCodes","codeInfos","processed","response","reverse","CodesPage","CodeLink","text","jsonInputStyle","container","display","flexDirection","order","warningBox","executePlaceholder","transfer","recipient","coinsPlaceholder","ExecuteContract","contractAddress","executing","setExecuting","memo","setMemo","msgObject","setMsgObject","coinsObject","setCoinsObject","executeResponse","setExecuteResponse","result","width","placeholder","confirmGood","jsObject","isStargateSigningClient","executeResponseResult","execute","stringify","ExecutionsTable","sender","HistoryInfo","contractCodeHistory","entry","operation","src","InitializationInfo","instantiationTxHash","queryPlaceholder","QueryContract","queryObject","setQueryObject","queryResponse","setQueryResponse","cursor","queryResponseResult","queryContractSmart","formattedResult","isStargateMsgExecuteContract","setContractCodeHistory","setExecutions","setInstantiationTxHash","getContractCodeHistory","console","getAndSetContractCodeHistory","getAndSetDetails","getAndSetInstantiationTxHash","getExecutionFromStargateMsgExecuteContract","ContractPage","contractAddressParam","ExecutionInfo","timestamp","time","fromRfc3339","success","toLocaleString","funds","toNumber","initMsg","MsgSend","arrayStartsWith","a","b","some","byte","arrayEqual","magic","gzip","fromHex","wasm","showAllCode","setShowAllCode","dataInfo","useMemo","wasmByteCode","Uint8Array","getFileType","ellideRight","toBase64","TxInfo","authInfo","fee","gasLimit","signatures","TxPage","txId","txIdParam","block","setBlock","getTx","getBlock","header","isAnyMsgStoreCode","isAnyMsgInstantiateContract","isAnyMsgExecuteContract","FlexibleRouter","children","basename","App","setNodeUrl","contextValue","setContextValue","connect","prevContextValue","Provider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22ce8623.chunk.js","sourcesContent":["import { Any } from \"@cosmjs/stargate/build/codec/google/protobuf/any\"\r\n\r\ntype IAny = Any;\r\n\r\nexport const msgSendTypeUrl = \"/cosmos.bank.v1beta1.MsgSend\";\r\nexport const msgStoreCodeTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgStoreCode\";\r\nexport const msgInstantiateContractTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\";\r\nexport const msgExecuteContractTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\r\n\r\nexport interface AnyMsgSend {\r\n  readonly typeUrl: \"/cosmos.bank.v1beta1.MsgSend\";\r\n  readonly value: Uint8Array;\r\n}\r\n\r\nexport interface AnyMsgStoreCode {\r\n  readonly typeUrl: \"/cosmwasm.wasm.v1beta1.MsgStoreCode\";\r\n  readonly value: Uint8Array;\r\n}\r\n\r\nexport interface AnyMsgInstantiateContract {\r\n  readonly typeUrl: \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\";\r\n  readonly value: Uint8Array;\r\n}\r\n\r\nexport interface AnyMsgExecuteContract {\r\n  readonly typeUrl: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\r\n  readonly value: Uint8Array;\r\n}\r\n\r\nexport function isAnyMsgSend(msg: IAny): msg is AnyMsgSend {\r\n  return msg.typeUrl === msgSendTypeUrl && !!msg.value;\r\n}\r\n\r\nexport function isAnyMsgStoreCode(msg: IAny): msg is AnyMsgStoreCode {\r\n  return msg.typeUrl === msgStoreCodeTypeUrl && !!msg.value;\r\n}\r\n\r\nexport function isAnyMsgInstantiateContract(msg: IAny): msg is AnyMsgInstantiateContract {\r\n  return msg.typeUrl === msgInstantiateContractTypeUrl && !!msg.value;\r\n}\r\n\r\nexport function isAnyMsgExecuteContract(msg: IAny): msg is AnyMsgExecuteContract {\r\n  return msg.typeUrl === msgExecuteContractTypeUrl && !!msg.value;\r\n}\r\n\r\n/* eslint-enable @typescript-eslint/camelcase */\r\n","import { MsgExecuteContract, MsgInstantiateContract, MsgStoreCode } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport { Registry } from \"@cosmjs/proto-signing\";\r\nimport React from \"react\";\r\n\r\nimport {\r\n  StargateClient,\r\n  StargateSigningClient,\r\n} from \"../ui-utils/clients\";\r\nimport {\r\n  msgExecuteContractTypeUrl,\r\n  msgInstantiateContractTypeUrl,\r\n  msgStoreCodeTypeUrl,\r\n} from \"../ui-utils/txs\";\r\n\r\nexport interface ClientContextValue {\r\n  readonly nodeUrl: string;\r\n  readonly client: StargateClient | null;\r\n  readonly typeRegistry: Registry;\r\n  readonly resetClient: (nodeUrl: string) => void;\r\n  readonly userAddress?: string;\r\n  readonly setUserAddress: (newUserAddress?: string) => void;\r\n  readonly signingClient?: StargateSigningClient;\r\n  readonly setSigningClient: (newSigningClient?: StargateSigningClient) => void;\r\n}\r\n\r\n/**\r\n * \"only used when a component does not have a matching Provider above it in the tree\"\r\n *\r\n * @see https://reactjs.org/docs/context.html#reactcreatecontext\r\n */\r\nconst dummyContext: ClientContextValue = {\r\n  nodeUrl: \"\",\r\n  client: null,\r\n  typeRegistry: new Registry([\r\n    [msgStoreCodeTypeUrl, MsgStoreCode],\r\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\r\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\r\n  ]),\r\n  resetClient: () => {},\r\n  setUserAddress: () => {},\r\n  setSigningClient: () => {},\r\n};\r\n\r\nexport const ClientContext = React.createContext<ClientContextValue>(dummyContext);\r\n","import { GasPrice } from \"@cosmjs/stargate\";\r\n\r\nexport type NonEmptyArray<ElementType> = { readonly 0: ElementType } & readonly ElementType[];\r\n\r\nexport interface BackendSettings {\r\n  readonly nodeUrls: NonEmptyArray<string>;\r\n  readonly stargateEnabled: boolean;\r\n  readonly denominations: readonly string[];\r\n  readonly addressPrefix: string;\r\n  readonly gasPrice: GasPrice;\r\n}\r\n\r\nconst devnetStargateSettings: BackendSettings = {\r\n  nodeUrls: [\"http://localhost:26659\"],\r\n  stargateEnabled: true,\r\n  denominations: [\"ucosm\", \"ustake\"],\r\n  addressPrefix: \"wasm\",\r\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\r\n};\r\n\r\nconst coralnetSettings: BackendSettings = {\r\n  nodeUrls: [\"https://lcd.coralnet.cosmwasm.com\"],\r\n  stargateEnabled: false,\r\n  denominations: [\"ucosm\", \"ustake\"],\r\n  addressPrefix: \"coral\",\r\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\r\n};\r\n\r\nconst heldernetSettings: BackendSettings = {\r\n  nodeUrls: [\"https://lcd.heldernet.cosmwasm.com\"],\r\n  stargateEnabled: false,\r\n  denominations: [\"ucosm\", \"ustake\"],\r\n  addressPrefix: \"cosmos\",\r\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\r\n};\r\n\r\nconst musselnetSettings: BackendSettings = {\r\n  nodeUrls: [\"https://rpc.musselnet.cosmwasm.com\"],\r\n  stargateEnabled: true,\r\n  denominations: [\"umayo\", \"ufrites\"],\r\n  addressPrefix: \"wasm\",\r\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\r\n};\r\n\r\nconst lucinanetSettings: BackendSettings = {\r\n  nodeUrls: [\"https://rpc.juno.giansalex.dev\"],\r\n  stargateEnabled: true,\r\n  denominations: [\"ujuno\"],\r\n  addressPrefix: \"juno\",\r\n  gasPrice: GasPrice.fromString(\"0.25ujuno\"),\r\n};\r\n\r\nconst knownBackends: Partial<Record<string, BackendSettings>> = {\r\n  coralnet: coralnetSettings,\r\n  heldernet: heldernetSettings,\r\n  devnetStargate: devnetStargateSettings,\r\n  musselnet: musselnetSettings,\r\n  lucinanet: lucinanetSettings \r\n};\r\n\r\nexport function getCurrentBackend(): BackendSettings {\r\n  const id = process.env.REACT_APP_BACKEND || \"devnetStargate\";\r\n  const backend = knownBackends[id];\r\n  if (!backend) {\r\n    throw new Error(`No backend found for the given ID \"${id}\"`);\r\n  }\r\n  return backend;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\nimport { BackendSettings, getCurrentBackend } from \"./backend\";\r\n\r\nexport interface DeploymentSettings {\r\n  readonly routerType: \"browser-router\" | \"hash-router\";\r\n}\r\n\r\nexport interface Settings {\r\n  /** Where do we connect to */\r\n  readonly backend: BackendSettings;\r\n  /** How are we hosted */\r\n  readonly deployment: DeploymentSettings;\r\n}\r\n\r\nconst developmentServer: DeploymentSettings = {\r\n  routerType: \"browser-router\",\r\n};\r\n\r\nconst ghPages: DeploymentSettings = {\r\n  routerType: \"hash-router\",\r\n};\r\n\r\nconst firebaseHosting: DeploymentSettings = {\r\n  routerType: \"browser-router\",\r\n};\r\n\r\nexport const settings: Settings = {\r\n  backend: getCurrentBackend(),\r\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\r\n};\r\n","import { isNonNullObject } from \"@cosmjs/utils\";\r\n\r\nconst runtimeCodes = {\r\n  error: \"_\\u2588_ErrorState_\\u2588_\" as const,\r\n  loading: \"_\\u2588_LoadingState_\\u2588_\" as const,\r\n};\r\n\r\nexport interface ErrorState {\r\n  readonly type: typeof runtimeCodes.error;\r\n}\r\n\r\nexport interface LoadingState {\r\n  readonly type: typeof runtimeCodes.loading;\r\n}\r\n\r\nexport function isErrorState(state: unknown): state is ErrorState {\r\n  if (!isNonNullObject(state)) return false;\r\n  return (state as ErrorState).type === runtimeCodes.error;\r\n}\r\n\r\nexport function isLoadingState(state: unknown): state is LoadingState {\r\n  if (!isNonNullObject(state)) return false;\r\n  return (state as LoadingState).type === runtimeCodes.loading;\r\n}\r\n\r\nexport const errorState: ErrorState = { type: runtimeCodes.error };\r\nexport const loadingState: LoadingState = { type: runtimeCodes.loading };\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport { NonEmptyArray } from \"../settings/backend\";\r\n\r\ninterface Props {\r\n  readonly currentUrl: string;\r\n  readonly urls: NonEmptyArray<string>;\r\n  readonly urlChanged: (newUrl: string) => void;\r\n}\r\n\r\nexport function EndpointSelector({ urls, currentUrl, urlChanged }: Props): JSX.Element {\r\n  if (urls.length === 1) {\r\n    return <Fragment>{currentUrl}</Fragment>;\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <button\r\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\r\n          type=\"button\"\r\n          id=\"dropdownMenuButton\"\r\n          data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\"\r\n          aria-expanded=\"false\"\r\n        >\r\n          {currentUrl}\r\n        </button>\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n          {urls.map((url) => (\r\n            <button\r\n              key={url}\r\n              className={`dropdown-item` + (url === currentUrl ? \" active\" : \"\")}\r\n              type=\"button\"\r\n              onClick={() => urlChanged(url)}\r\n            >\r\n              {url}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport { ClientContext } from \"../contexts/ClientContext\";\r\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../ui-utils/states\";\r\n\r\ninterface Props {\r\n  readonly htmlId: string;\r\n  readonly chainId: string | ErrorState | LoadingState;\r\n  readonly height: number | ErrorState | LoadingState;\r\n}\r\n\r\nexport function NodeInfoModal({ htmlId, chainId, height }: Props): JSX.Element {\r\n  const clientContext = React.useContext(ClientContext);\r\n\r\n  return (\r\n    <div\r\n      className=\"modal fade\"\r\n      id={htmlId}\r\n      tabIndex={-1}\r\n      role=\"dialog\"\r\n      aria-labelledby=\"exampleModalLabel\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      <div className=\"modal-dialog\" role=\"document\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n              Node info\r\n            </h5>\r\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            Endpoint: {clientContext.nodeUrl}\r\n            <br />\r\n            Chain ID: {isLoadingState(chainId) ? \"Loading …\" : isErrorState(chainId) ? \"Error\" : chainId}\r\n            <br />\r\n            Height: {isLoadingState(height) ? \"Loading …\" : isErrorState(height) ? \"Error\" : height}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport { ClientContext } from \"../contexts/ClientContext\";\r\nimport { settings } from \"../settings\";\r\nimport { ErrorState, errorState, LoadingState, loadingState } from \"../ui-utils/states\";\r\nimport { EndpointSelector } from \"./EndpointSelector\";\r\nimport { NodeInfoModal } from \"./NodeInfoModal\";\r\n\r\ninterface Props {}\r\n\r\nconst hrStyle: React.CSSProperties = {\r\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\r\n};\r\nconst whiteText = { color: \"#f0f0f0\" };\r\n\r\nfunction Separator(): JSX.Element {\r\n  return <Fragment> | </Fragment>;\r\n}\r\n\r\n/** Place me as a row in a container */\r\nexport function FooterRow(): JSX.Element {\r\n  const { client, nodeUrl, resetClient } = React.useContext(ClientContext);\r\n\r\n  const [chainId, setChainId] = React.useState<string | ErrorState | LoadingState>(loadingState);\r\n  const [height, setHeight] = React.useState<number | ErrorState | LoadingState>(loadingState);\r\n\r\n  const updateHeight = React.useCallback(() => {\r\n    client\r\n      ?.getHeight()\r\n      .then(setHeight)\r\n      .catch(() => setHeight(errorState));\r\n  }, [client]);\r\n\r\n  React.useEffect(() => {\r\n    client\r\n      ?.getChainId()\r\n      .then(setChainId)\r\n      .catch(() => setChainId(errorState));\r\n    updateHeight();\r\n  }, [client, updateHeight]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <hr style={hrStyle} />\r\n        <NodeInfoModal htmlId=\"nodeInfoModal\" chainId={chainId} height={height} />\r\n        <div style={whiteText} className=\"dropdown text-center font-weight-light mb-3\">\r\n          Endpoint{\" \"}\r\n          <EndpointSelector\r\n            currentUrl={nodeUrl}\r\n            urls={settings.backend.nodeUrls}\r\n            urlChanged={(newUrl) => resetClient(newUrl)}\r\n          />{\" \"}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-sm btn-secondary\"\r\n            data-toggle=\"modal\"\r\n            data-target=\"#nodeInfoModal\"\r\n            onClick={updateHeight}\r\n          >\r\n            Node info\r\n          </button>\r\n          <Separator />\r\n          <a href=\"https://github.com/CosmWasm/code-explorer\" style={whiteText}>\r\n            Fork me on GitHub\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  CosmWasmClient as StargateClient,\r\n  CosmWasmFeeTable,\r\n  SigningCosmWasmClient as StargateSigningClient,\r\n} from \"@cosmjs/cosmwasm-stargate\";\r\nimport { GasLimits, defaultGasLimits as defaultStargateGasLimits } from \"@cosmjs/stargate\";\r\nimport { MsgExecuteContract, MsgInstantiateContract, MsgStoreCode } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport { Bip39, Random } from \"@cosmjs/crypto\";\r\nimport { DirectSecp256k1HdWallet, OfflineDirectSigner, OfflineSigner, Registry } from \"@cosmjs/proto-signing\";\r\n\r\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\r\n\r\nimport { settings } from \"../settings\";\r\nimport { msgExecuteContractTypeUrl, msgInstantiateContractTypeUrl, msgStoreCodeTypeUrl } from \"./txs\";\r\nimport { LedgerSigner } from \"@cosmjs/ledger-amino\";\r\nimport { OfflineAminoSigner, makeCosmoshubPath } from \"@cosmjs/amino\";\r\n\r\nexport { StargateClient, StargateSigningClient };\r\n\r\nexport function isStargateClient(client: StargateClient | null): client is StargateClient {\r\n  return client instanceof StargateClient;\r\n}\r\n\r\nexport function isStargateSigningClient(\r\n  signingClient: StargateSigningClient | null,\r\n): signingClient is StargateSigningClient {\r\n  return signingClient instanceof StargateSigningClient;\r\n}\r\n\r\nexport function generateMnemonic(): string {\r\n  return Bip39.encode(Random.getBytes(16)).toString();\r\n}\r\n\r\nexport function loadOrCreateMnemonic(mnemonic?: string): string {\r\n  const key = \"burner-wallet\";\r\n  const loaded = localStorage.getItem(key);\r\n  if (loaded && !mnemonic) {\r\n    return loaded;\r\n  }\r\n  const loadedMnemonic = mnemonic || generateMnemonic();\r\n  localStorage.setItem(key, loadedMnemonic);\r\n  return loadedMnemonic;\r\n}\r\n\r\nexport type WalletLoaderDirect = (addressPrefix: string, mnemonic?: string) => Promise<OfflineDirectSigner|OfflineAminoSigner>;\r\n\r\nexport async function loadKeplrWallet(client: StargateClient): Promise<WalletLoaderDirect> {\r\n  const chaindId = await client.getChainId();\r\n  \r\n  return async () => {\r\n    await registerLucina();\r\n    const w = window as any;\r\n    await w.keplr.enable(chaindId);\r\n\r\n    return w.getOfflineSigner(chaindId);\r\n  }\r\n}\r\n\r\nasync function registerLucina(): Promise<void> {\r\n  const w = (window as any);\r\n  if (!w.getOfflineSigner || !w.keplr) {\r\n      throw \"Please install keplr extension\";\r\n  } else {\r\n      if (w.keplr.experimentalSuggestChain) {\r\n          try {\r\n              await w.keplr.experimentalSuggestChain({\r\n                  chainId: \"lucina\",\r\n                  chainName: \"Juno testnet\",\r\n                  rpc: \"https://rpc.juno.giansalex.dev:443\",\r\n                  rest: \"https://lcd.juno.giansalex.dev:443\",\r\n                  stakeCurrency: {\r\n                      coinDenom: \"JUNO\",\r\n                      coinMinimalDenom: \"ujuno\",\r\n                      coinDecimals: 6,\r\n                      // coinGeckoId: \"\"\r\n                  },\r\n                  // walletUrlForStaking: \"\",\r\n                  bip44: {\r\n                      coinType: 118,\r\n                  },\r\n                  bech32Config: {\r\n                      bech32PrefixAccAddr: \"juno\",\r\n                      bech32PrefixAccPub: \"junopub\",\r\n                      bech32PrefixValAddr: \"junovaloper\",\r\n                      bech32PrefixValPub: \"junovaloperpub\",\r\n                      bech32PrefixConsAddr: \"junovalcons\",\r\n                      bech32PrefixConsPub: \"junovalconspub\"\r\n                  },\r\n                  currencies: [{\r\n                      coinDenom: \"JUNO\",\r\n                      coinMinimalDenom: \"ujuno\",\r\n                      coinDecimals: 6,\r\n                      // coinGeckoId: \"\"\r\n                  }],\r\n                  feeCurrencies: [{\r\n                      coinDenom: \"JUNO\",\r\n                      coinMinimalDenom: \"ujuno\",\r\n                      coinDecimals: 6,\r\n                      // coinGeckoId: \"\"\r\n                  }],\r\n                  gasPriceStep: {\r\n                      low: 0.01,\r\n                      average: 0.025,\r\n                      high: 0.04\r\n                  },\r\n                  features: [\"stargate\", 'ibc-transfer'],\r\n                  explorerUrlToTx: 'https://testnet.juno.aneka.io/txs/{txHash}',\r\n              });\r\n          } catch {\r\n              throw \"Failed to suggest the chain\";\r\n          }\r\n      } else {\r\n          throw \"Please use the recent version of keplr extension\";\r\n      }\r\n  }\r\n}\r\n\r\nexport async function loadOrCreateWalletDirect(\r\n  addressPrefix: string,\r\n  mnemonic?: string,\r\n): Promise<OfflineDirectSigner> {\r\n  const loadedMnemonic = loadOrCreateMnemonic(mnemonic);\r\n  const hdPath = makeCosmoshubPath(0);\r\n  return DirectSecp256k1HdWallet.fromMnemonic(loadedMnemonic, {\r\n    hdPaths: [hdPath],\r\n    prefix: addressPrefix\r\n  });\r\n}\r\n\r\nexport async function loadLedgerWallet(addressPrefix: string): Promise<OfflineAminoSigner> {\r\n  const interactiveTimeout = 120_000;\r\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\r\n\r\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\r\n}\r\n\r\nasync function createStargateSigningClient(signer: OfflineSigner): Promise<StargateSigningClient> {\r\n  const { nodeUrls, gasPrice } = settings.backend;\r\n  const endpoint = nodeUrls[0];\r\n\r\n  const typeRegistry = new Registry([\r\n    [msgStoreCodeTypeUrl, MsgStoreCode],\r\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\r\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\r\n  ]);\r\n\r\n  const gasLimits: GasLimits<CosmWasmFeeTable> = {\r\n    ...defaultStargateGasLimits,\r\n    upload: 1500000,\r\n    init: 600000,\r\n    exec: 400000,\r\n    migrate: 600000,\r\n    send: 80000,\r\n    changeAdmin: 80000,\r\n  };\r\n\r\n  return StargateSigningClient.connectWithSigner(endpoint, signer, {\r\n    registry: typeRegistry,\r\n    gasPrice: gasPrice,\r\n    gasLimits: gasLimits,\r\n  });\r\n}\r\n\r\nexport async function getAddressAndStargateSigningClient(\r\n  loadWallet: WalletLoaderDirect,\r\n  mnemonic?: string,\r\n): Promise<[string, StargateSigningClient]> {\r\n  const signer = await loadWallet(settings.backend.addressPrefix, mnemonic);\r\n  const userAddress = (await signer.getAccounts())[0].address;\r\n  const signingClient = await createStargateSigningClient(signer);\r\n  return [userAddress, signingClient];\r\n}\r\n\r\nexport function webUsbMissing(): boolean {\r\n  const anyNavigator: any = navigator;\r\n  return !anyNavigator?.usb;\r\n}\r\n","import React from \"react\";\r\n\r\nimport { ClientContext } from \"../contexts/ClientContext\";\r\nimport {\r\n  getAddressAndStargateSigningClient,\r\n  loadKeplrWallet,\r\n  loadLedgerWallet,\r\n  loadOrCreateWalletDirect,\r\n  WalletLoaderDirect,\r\n  webUsbMissing,\r\n} from \"../ui-utils/clients\";\r\n\r\nexport function Login(): JSX.Element {\r\n  const { userAddress, setUserAddress, setSigningClient, client } = React.useContext(ClientContext);\r\n  const [mnemonic, setMnemonic] = React.useState<string>();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState<string>();\r\n\r\n  async function loginStargate(loadWallet: WalletLoaderDirect): Promise<void> {\r\n    setLoading(true);\r\n    setError(undefined);\r\n\r\n    try {\r\n      const [userAddress, signingClient] = await getAddressAndStargateSigningClient(loadWallet, mnemonic);\r\n      setUserAddress(userAddress);\r\n      setSigningClient(signingClient);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  function logout(): void {\r\n    setError(undefined);\r\n    setUserAddress(undefined);\r\n    setMnemonic(undefined);\r\n    setSigningClient(undefined);\r\n  }\r\n\r\n  function renderLoginButton(): JSX.Element {\r\n    return loading ? (\r\n      <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n        <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n        Loading...\r\n      </button>\r\n    ) : (\r\n      <>\r\n        <div className=\"mr-3 p-2 rounded bg-white\">\r\n          <span title=\"Mnemonic for burner wallet\">Mnemonic:</span>\r\n          <input\r\n            className=\"ml-3 flex-grow-1\"\r\n            value={mnemonic}\r\n            onChange={(event) => setMnemonic(event.target.value)}\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary dropdown-toggle\"\r\n          data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\"\r\n          aria-expanded=\"false\"\r\n        >\r\n          Login\r\n        </button>\r\n        <div className=\"dropdown-menu\">\r\n          <h6 className=\"dropdown-header\">with</h6>\r\n          <button\r\n            className=\"dropdown-item\"\r\n            onClick={() =>\r\n              loginStargate(loadOrCreateWalletDirect)\r\n            }\r\n          >\r\n            Browser wallet\r\n          </button>\r\n          <button\r\n            className=\"dropdown-item\"\r\n            onClick={async () =>\r\n              loginStargate(await loadKeplrWallet(client!))\r\n            }\r\n          >\r\n            Keplr wallet\r\n          </button>\r\n          <button\r\n            className=\"dropdown-item\"\r\n            onClick={() =>\r\n              loginStargate(loadLedgerWallet)\r\n            }\r\n            disabled={webUsbMissing()}\r\n          >\r\n            Ledger wallet\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function renderLogoutButton(): JSX.Element {\r\n    return (\r\n      <button className=\"btn btn-primary\" onClick={logout}>\r\n        Logout\r\n      </button>\r\n    );\r\n  }\r\n\r\n  const isUserLoggedIn = !!userAddress;\r\n\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-end\">\r\n      {error ? <div className=\"mr-3 p-2 rounded bg-white text-danger\">{error}</div> : null}\r\n      {isUserLoggedIn ? renderLogoutButton() : renderLoginButton()}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { ClientContext } from \"../contexts/ClientContext\";\r\n\r\nexport function UserAddress(): JSX.Element {\r\n  const { userAddress } = React.useContext(ClientContext);\r\n\r\n  return userAddress ? (\r\n    <div className=\"mr-3 p-2 rounded bg-white\">\r\n      <span>My address: </span>\r\n      <span>{userAddress}</span>\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Login } from \"./Login\";\r\nimport { UserAddress } from \"./UserAddress\";\r\n\r\nexport function Header(): JSX.Element {\r\n  return (\r\n    <header className=\"mt-3 p-0 d-flex align-items-center justify-content-end container contract-container\">\r\n      <UserAddress />\r\n      <Login />\r\n    </header>\r\n  );\r\n}\r\n","import { Decimal } from \"@cosmjs/math\";\r\nimport { Coin } from \"@cosmjs/stargate/build/codec/cosmos/base/v1beta1/coin\";\r\n\r\ntype ICoin = Coin;\r\n\r\nexport function ellideMiddle(str: string, maxOutLen: number): string {\r\n  if (str.length <= maxOutLen) {\r\n    return str;\r\n  }\r\n  const ellide = \"…\";\r\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\r\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\r\n  return str.slice(0, frontLen) + ellide + str.slice(str.length - tailLen, str.length);\r\n}\r\n\r\nexport function ellideRight(str: string, maxOutLen: number): string {\r\n  if (str.length <= maxOutLen) {\r\n    return str;\r\n  }\r\n  const ellide = \"…\";\r\n  const frontLen = maxOutLen - ellide.length;\r\n  return str.slice(0, frontLen) + ellide;\r\n}\r\n\r\n// NARROW NO-BREAK SPACE (U+202F)\r\nconst thinSpace = \"\\u202F\";\r\n\r\nfunction printableCoin(coin: ICoin): string {\r\n  if (coin.denom?.startsWith(\"u\")) {\r\n    const ticker = coin.denom.slice(1).toUpperCase();\r\n    return Decimal.fromAtomics(coin.amount ?? \"0\", 6).toString() + thinSpace + ticker;\r\n  } else {\r\n    return coin.amount + thinSpace + coin.denom;\r\n  }\r\n}\r\n\r\nexport function printableBalance(balance: readonly ICoin[]): string {\r\n  if (balance.length === 0) return \"–\";\r\n  return balance.map(printableCoin).join(\", \");\r\n}\r\n\r\nexport function parseMsgContract(msg: Uint8Array) {\r\n  if (!msg) return {};\r\n\r\n  let json = '';\r\n  msg.forEach((item) => {\r\n    json += String.fromCharCode(item);\r\n  });\r\n\r\n  return JSON.parse(json);\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { ellideMiddle } from \"../ui-utils\";\r\n\r\ninterface Props {\r\n  readonly address: string;\r\n  readonly maxLength?: number | null;\r\n}\r\n\r\nexport function AccountLink({ address, maxLength = 20 }: Props): JSX.Element {\r\n  return (\r\n    <Link to={`/accounts/${address}`} title={address}>\r\n      {ellideMiddle(address, maxLength || 99999)}\r\n    </Link>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { ellideMiddle } from \"../ui-utils\";\r\n\r\ninterface Props {\r\n  readonly transactionId: string;\r\n  readonly maxLength?: number | null;\r\n}\r\n\r\nexport function TransactionLink({ transactionId, maxLength = 20 }: Props): JSX.Element {\r\n  return (\r\n    <Link to={`/transactions/${transactionId}`} title={transactionId}>\r\n      {ellideMiddle(transactionId, maxLength || 99999)}\r\n    </Link>\r\n  );\r\n}\r\n","import { MsgSend } from \"@cosmjs/stargate/build/codec/cosmos/bank/v1beta1/tx\";\r\nimport React from \"react\";\r\n\r\nimport { AccountLink } from \"../../components/AccountLink\";\r\nimport { TransactionLink } from \"../../components/TransactionLink\";\r\nimport { printableBalance } from \"../../ui-utils\";\r\n\r\nexport interface Transfer {\r\n  readonly key: string;\r\n  readonly height: number;\r\n  readonly transactionId: string;\r\n  readonly msg: MsgSend;\r\n}\r\n\r\ninterface Props {\r\n  readonly transfers: readonly Transfer[];\r\n}\r\n\r\nexport function TransfersTable({ transfers: executions }: Props): JSX.Element {\r\n  return (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">Height</th>\r\n          <th scope=\"col\">Transaction ID</th>\r\n          <th scope=\"col\">Sender</th>\r\n          <th scope=\"col\">Recipient</th>\r\n          <th scope=\"col\">Amount</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {executions.map((execution, index) => (\r\n          <tr key={execution.key}>\r\n            <th scope=\"row\">{index + 1}</th>\r\n            <td>{execution.height}</td>\r\n            <td>\r\n              <TransactionLink transactionId={execution.transactionId} />\r\n            </td>\r\n            <td>\r\n              <AccountLink address={execution.msg.fromAddress} />\r\n            </td>\r\n            <td>\r\n              <AccountLink address={execution.msg.toAddress} />\r\n            </td>\r\n            <td>{printableBalance(execution.msg.amount)}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import { Registry } from \"@cosmjs/proto-signing\";\r\nimport { IndexedTx } from \"@cosmjs/stargate\";\r\nimport { Coin } from \"@cosmjs/stargate/build/codec/cosmos/base/v1beta1/coin\";\r\nimport { Tx } from \"@cosmjs/stargate/build/codec/cosmos/tx/v1beta1/tx\";\r\nimport React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nimport { FooterRow } from \"../../components/FooterRow\";\r\nimport { Header } from \"../../components/Header\";\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { settings } from \"../../settings\";\r\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\r\nimport { isStargateClient, StargateClient } from \"../../ui-utils/clients\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\nimport { AnyMsgSend, isAnyMsgSend } from \"../../ui-utils/txs\";\r\nimport { Transfer, TransfersTable } from \"./TransfersTable\";\r\n\r\ntype ICoin = Coin;\r\n\r\nfunction getTransferFromStargateMsgSend(typeRegistry: Registry, tx: IndexedTx) {\r\n  return (msg: AnyMsgSend, i: number) => {\r\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value });\r\n    return {\r\n      key: `${tx.hash}_${i}`,\r\n      height: tx.height,\r\n      transactionId: tx.hash,\r\n      msg: decodedMsg,\r\n    };\r\n  };\r\n}\r\n\r\nconst stargateEffect = (\r\n  client: StargateClient,\r\n  address: string,\r\n  typeRegistry: Registry,\r\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\r\n  setTransfers: (transfers: readonly Transfer[] | ErrorState | LoadingState) => void,\r\n) => (): void => {\r\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(address, denom)))\r\n    .then((balances) => {\r\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\r\n      setBalance(filteredBalances);\r\n    })\r\n    .catch(() => setBalance(errorState));\r\n  client\r\n    .searchTx({ sentFromOrTo: address })\r\n    .then((txs) => {\r\n      const out = txs.reduce((transfers: readonly Transfer[], tx: IndexedTx): readonly Transfer[] => {\r\n        const decodedTx = Tx.decode(tx.tx);\r\n        const txTransfers = (decodedTx?.body?.messages ?? [])\r\n          .filter(isAnyMsgSend)\r\n          .map(getTransferFromStargateMsgSend(typeRegistry, tx));\r\n        return [...transfers, ...txTransfers];\r\n      }, []);\r\n      setTransfers(out);\r\n    })\r\n    .catch(() => setTransfers(errorState));\r\n};\r\n\r\nexport function AccountPage(): JSX.Element {\r\n  const { client, typeRegistry } = React.useContext(ClientContext);\r\n  const { address: addressParam } = useParams<{ readonly address: string }>();\r\n  const address = addressParam || \"\";\r\n\r\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\r\n  const [transfers, setTransfers] = React.useState<readonly Transfer[] | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n\r\n  React.useEffect(\r\n    isStargateClient(client)\r\n      ? stargateEffect(client, address, typeRegistry, setBalance, setTransfers)\r\n      : () => {},\r\n    [address, client, typeRegistry],\r\n  );\r\n\r\n  const pageTitle = <span title={address}>Account {ellideMiddle(address, 15)}</span>;\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <Header />\r\n      <div className=\"container mt-3 contract-container\">\r\n        <div className=\"row white-row white-row-first\">\r\n          <div className=\"col\">\r\n            <nav aria-label=\"breadcrumb\">\r\n              <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                  {pageTitle}\r\n                </li>\r\n              </ol>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row white-row\">\r\n          <div className=\"col\">\r\n            <h1>{pageTitle}</h1>\r\n            <ul className=\"list-group list-group-horizontal mb-3\">\r\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\r\n                Balance:{\" \"}\r\n                {isLoadingState(balance)\r\n                  ? \"Loading …\"\r\n                  : isErrorState(balance)\r\n                  ? \"Error\"\r\n                  : printableBalance(balance)}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row white-row white-row-last\">\r\n          <div className=\"col\">\r\n            <h2>Token transfers</h2>\r\n            <p>Incoming and outgoing bank token transfers</p>\r\n            {isLoadingState(transfers) ? (\r\n              <p>Loading …</p>\r\n            ) : isErrorState(transfers) ? (\r\n              <p>Error</p>\r\n            ) : transfers.length === 0 ? (\r\n              <p>No transfer found</p>\r\n            ) : (\r\n              <TransfersTable transfers={transfers} />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <FooterRow />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export interface Tag {\r\n  readonly key: string;\r\n  readonly value: string;\r\n}\r\n\r\nexport function makeTags(oneLiner: string): Tag[] {\r\n  return oneLiner.split(\"&\").map((pair) => {\r\n    if (pair.indexOf(\"=\") === -1) throw new Error(\"Parsing error: Equal sign missing\");\r\n    const parts = pair.split(\"=\");\r\n    if (parts.length > 2) {\r\n      throw new Error(\r\n        \"Parsing error: Multiple equal signs found. If you need escaping support, please create a PR.\",\r\n      );\r\n    }\r\n    const [key, value] = parts;\r\n    if (!key) throw new Error(\"Parsing error: Key must not be empty\");\r\n    return { key, value };\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { quote } from \"shell-quote\";\r\n\r\ninterface Props {\r\n  readonly checksum: string;\r\n  readonly source: string | undefined;\r\n  readonly builder: string | undefined;\r\n}\r\n\r\nfunction VerifyContract({ checksum, source, builder }: Props): JSX.Element {\r\n  if (!source || !builder) {\r\n    return (\r\n      <span>\r\n        Contract cannot be verified since <code>builder</code> or <code>source</code> is missing\r\n      </span>\r\n    );\r\n  }\r\n\r\n  const verificationCmd = quote([\"cosmwasm-verify\", source, builder, checksum]);\r\n\r\n  return <code>{verificationCmd}</code>;\r\n}\r\n\r\nexport default VerifyContract;\r\n","import { CodeDetails } from \"@cosmjs/cosmwasm-stargate\";\r\nimport React from \"react\";\r\n\r\nimport { AccountLink } from \"../../components/AccountLink\";\r\nimport { TransactionLink } from \"../../components/TransactionLink\";\r\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\r\nimport VerifyContract from \"./VerifyContract\";\r\n\r\ninterface Props {\r\n  readonly code: CodeDetails;\r\n  readonly uploadTxHash: string | undefined | ErrorState | LoadingState;\r\n}\r\n\r\nexport function CodeInfo({ code, uploadTxHash }: Props): JSX.Element {\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item\">\r\n          Upload transaction:{\" \"}\r\n          {isLoadingState(uploadTxHash) ? (\r\n            \"Loading …\"\r\n          ) : isErrorState(uploadTxHash) ? (\r\n            \"Error\"\r\n          ) : uploadTxHash === undefined ? (\r\n            \"–\"\r\n          ) : (\r\n            <TransactionLink transactionId={uploadTxHash} />\r\n          )}\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          Creator: <AccountLink address={code.creator} maxLength={null} />\r\n        </li>\r\n        <li className=\"list-group-item\">Checksum: {code.checksum}</li>\r\n        <li className=\"list-group-item\">Source: {code.source || \"–\"}</li>\r\n        <li className=\"list-group-item\">Builder: {code.builder || \"–\"}</li>\r\n        <li className=\"list-group-item\">\r\n          <p className=\"text-muted\">\r\n            Code verification allows you to verify that uploaded code was compiled from the source it claims.{\" \"}\r\n            <a href=\"https://github.com/CosmWasm/cosmwasm-verify\" className=\"text-muted\">\r\n              Tell me more!\r\n            </a>\r\n          </p>\r\n          <p className=\"mb-0\">\r\n            <VerifyContract checksum={code.checksum} source={code.source} builder={code.builder} />\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { ellideMiddle } from \"../ui-utils\";\r\n\r\ninterface Props {\r\n  readonly address: string;\r\n  readonly maxLength?: number | null;\r\n}\r\n\r\nexport function ContractLink({ address, maxLength = 20 }: Props): JSX.Element {\r\n  return (\r\n    <Link to={`/contracts/${address}`} title={address}>\r\n      {ellideMiddle(address, maxLength || 99999)}\r\n    </Link>\r\n  );\r\n}\r\n","import { Contract } from \"@cosmjs/cosmwasm-stargate\";\r\nimport React from \"react\";\r\n\r\nimport { AccountLink } from \"../../components/AccountLink\";\r\nimport { ContractLink } from \"../../components/ContractLink\";\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\n\r\ninterface Props {\r\n  readonly position: number;\r\n  readonly address: string;\r\n}\r\n\r\nfunction InstanceRow({ position, address }: Props): JSX.Element {\r\n  const { client } = React.useContext(ClientContext);\r\n  const [executionCount, setExecutionCount] = React.useState<number | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n  const [contract, setContractInfo] = React.useState<Contract | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    (client?.getContract(address) as Promise<Contract>)\r\n    .then((execTxs) => setContractInfo(execTxs))\r\n    .catch(() => setContractInfo(errorState));\r\n\r\n    const tags = [\r\n      {\r\n        key: \"message.contract_address\",\r\n        value: address,\r\n      },\r\n      {\r\n        key: \"message.action\",\r\n        value: \"execute\",\r\n      },\r\n    ];\r\n    (client?.searchTx({ tags: tags }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\r\n      .then((execTxs) => setExecutionCount(execTxs.length))\r\n      .catch(() => setExecutionCount(errorState));\r\n\r\n  }, [client, address]);\r\n\r\n  return isLoadingState(contract) \r\n    ? (<tr><td>Loading ...</td></tr>) \r\n    : isErrorState(contract)\r\n    ? (<tr><td>Error</td></tr>) \r\n    : (\r\n    <tr>\r\n      <th scope=\"row\">{position}</th>\r\n      <td>{contract.label}</td>\r\n      <td>\r\n      <ContractLink address={contract.address} />\r\n      </td>\r\n      <td>\r\n        <AccountLink address={contract.creator} />\r\n      </td>\r\n      <td>{contract.admin ? <AccountLink address={contract.admin} /> : \"–\"}</td>\r\n      <td>\r\n        {isLoadingState(executionCount)\r\n          ? \"Loading …\"\r\n          : isErrorState(executionCount)\r\n          ? \"Error\"\r\n          : executionCount}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default InstanceRow;\r\n","import React from \"react\";\r\n\r\nexport function InstancesEmptyState(): JSX.Element {\r\n  return <p>Code is not yet instantiated</p>;\r\n}\r\n","import \"./CodePage.css\";\r\n\r\nimport { CodeDetails } from \"@cosmjs/cosmwasm-stargate\";\r\nimport React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nimport { FooterRow } from \"../../components/FooterRow\";\r\nimport { Header } from \"../../components/Header\";\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\nimport { CodeInfo } from \"./CodeInfo\";\r\nimport InstanceRow from \"./InstanceRow\";\r\nimport { InstancesEmptyState } from \"./InstancesEmptyState\";\r\nimport { CosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\r\n\r\nexport function CodePage(): JSX.Element {\r\n  const { client } = React.useContext(ClientContext);\r\n  const { codeId: codeIdParam } = useParams<{ readonly codeId: string }>();\r\n  const codeId = parseInt(codeIdParam || \"0\", 10);\r\n\r\n  const [details, setDetails] = React.useState<CodeDetails | ErrorState | LoadingState>(loadingState);\r\n  const [contracts, setContracts] = React.useState<readonly string[] | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n  const [uploadTxHash, setUploadTxHash] = React.useState<string | undefined | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    client\r\n      ?.getContracts(codeId)\r\n      .then(setContracts)\r\n      .catch(() => setContracts(errorState));\r\n    client\r\n      ?.getCodeDetails(codeId)\r\n      .then(setDetails)\r\n      .catch(() => setDetails(errorState));\r\n    (client?.searchTx({\r\n      tags: makeTags(`message.module=wasm&message.action=store-code&message.code_id=${codeId}`),\r\n    }) as Promise<ReadonlyArray<{ readonly hash: string }>>)?.then((results) => {\r\n      const first = results.find(() => true);\r\n      setUploadTxHash(first?.hash);\r\n    });\r\n  }, [client, codeId]);\r\n\r\n  const pageTitle = <span>Code #{codeId}</span>;\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <Header />\r\n      <div className=\"container mt-3\">\r\n        <div className=\"row white-row white-row-first\">\r\n          <div className=\"col\">\r\n            <nav aria-label=\"breadcrumb\">\r\n              <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <Link to=\"/codes\">Codes</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                  {pageTitle}\r\n                </li>\r\n              </ol>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n        <div className=\"row white-row\">\r\n          <div className=\"col\">\r\n            <h1>{pageTitle}</h1>\r\n            <ul className=\"list-group list-group-horizontal mb-3\">\r\n              <li className=\"list-group-item\">Type: Wasm</li>\r\n              <li className=\"list-group-item\">\r\n                Size:{\" \"}\r\n                {isLoadingState(details)\r\n                  ? \"Loading …\"\r\n                  : isErrorState(details)\r\n                  ? \"Error\"\r\n                  : Math.round(details.data.length / 1024) + \" KiB\"}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"col\">\r\n            {isLoadingState(details) ? (\r\n              <span>Loading …</span>\r\n            ) : isErrorState(details) ? (\r\n              <span>Error</span>\r\n            ) : (\r\n              <CodeInfo code={details} uploadTxHash={uploadTxHash} />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"row white-row white-row-last\">\r\n          <div className=\"col\">\r\n            <h2>Instances</h2>\r\n            {isLoadingState(contracts) ? (\r\n              <p>Loading …</p>\r\n            ) : isErrorState(contracts) ? (\r\n              <p>Error loading instances</p>\r\n            ) : contracts.length === 0 ? (\r\n              <InstancesEmptyState />\r\n            ) : (\r\n              <table className=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Label</th>\r\n                    <th scope=\"col\">Contract</th>\r\n                    <th scope=\"col\">Creator</th>\r\n                    <th scope=\"col\">Admin</th>\r\n                    <th scope=\"col\">Executions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {contracts.map((address, index) => (\r\n                    <InstanceRow position={index + 1} address={address} key={address} />\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <FooterRow />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./Code.css\";\r\n\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { ellideMiddle } from \"../../ui-utils\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\nimport { Contract, CosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\r\n\r\nexport interface CodeData {\r\n  readonly codeId: number;\r\n  readonly checksum: string;\r\n  readonly creator: string;\r\n  readonly source: string;\r\n  readonly builder: string;\r\n}\r\n\r\ninterface Props {\r\n  readonly data: CodeData;\r\n  readonly index: number;\r\n}\r\n\r\ninterface InstantiationInfo {\r\n  readonly instantiations: number;\r\n}\r\n\r\nexport function Code({ data, index }: Props): JSX.Element {\r\n  const { client } = React.useContext(ClientContext);\r\n  const [instantiationInfo, setInstantiationInfo] = React.useState<\r\n    InstantiationInfo | ErrorState | LoadingState\r\n  >(loadingState);\r\n\r\n  React.useEffect(() => {\r\n    client\r\n      ?.getContracts(data.codeId)\r\n      .then((contracts) => {\r\n        setInstantiationInfo({\r\n          instantiations: contracts.length,\r\n        });\r\n      })\r\n      .catch(() => setInstantiationInfo(errorState));\r\n    // Don't make clientContext.client a dependency. Whenever it changes, this component is recreated entirely\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data.codeId]);\r\n\r\n  return (\r\n    <div className={\"flex-element-two-two mb-3\" + (index % 2 ? \" pl-lg-2\" : \" pr-lg-2\")}>\r\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\r\n        <div className=\"id\">#{data.codeId}</div>\r\n        <div className=\"details\">\r\n          Creator: {ellideMiddle(data.creator, 30)}\r\n          <br />\r\n          Source: {ellideMiddle(data.source, 42) || \"–\"}\r\n          <br />\r\n          Builder: {data.builder || \"–\"}\r\n          <br />\r\n          Checksum: {data.checksum.slice(0, 10)}\r\n          <br />\r\n          Instances:{\" \"}\r\n          {isLoadingState(instantiationInfo)\r\n            ? \"Loading …\"\r\n            : isErrorState(instantiationInfo)\r\n            ? \"Error\"\r\n            : instantiationInfo.instantiations}\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import \"./Codes.css\";\r\n\r\nimport React from \"react\";\r\n\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\nimport { Code, CodeData } from \"./Code\";\r\n\r\ninterface LoadedCode {\r\n  readonly source: string;\r\n  readonly data: CodeData;\r\n}\r\n\r\nfunction codeKey(code: LoadedCode): string {\r\n  return `${code.source}__${code.data.codeId}`;\r\n}\r\n\r\nexport function Codes(): JSX.Element {\r\n  const { client, nodeUrl } = React.useContext(ClientContext);\r\n  const [codes, setCodes] = React.useState<readonly LoadedCode[] | ErrorState | LoadingState>(loadingState);\r\n\r\n  React.useEffect(() => {\r\n    client\r\n      ?.getCodes()\r\n      .then((codeInfos) => {\r\n        const processed = codeInfos\r\n          .map(\r\n            (response): LoadedCode => ({\r\n              source: nodeUrl,\r\n              data: {\r\n                codeId: response.id,\r\n                checksum: response.checksum,\r\n                creator: response.creator,\r\n                source: response.source || \"\",\r\n                builder: response.builder || \"\",\r\n              },\r\n            }),\r\n          )\r\n          .reverse();\r\n        setCodes(processed);\r\n      })\r\n      .catch(() => setCodes(errorState));\r\n  }, [client, nodeUrl]);\r\n\r\n  // Display codes vertically on small devices and in a flex container on large and above\r\n  return (\r\n    <div className=\"d-lg-flex flex-wrap\">\r\n      {isLoadingState(codes) ? (\r\n        <p>Loading …</p>\r\n      ) : isErrorState(codes) ? (\r\n        <p>Error loading codes</p>\r\n      ) : codes.length === 0 ? (\r\n        <p>No code uploaded yet</p>\r\n      ) : (\r\n        codes.map((code, index) => <Code data={code.data} index={index} key={codeKey(code)} />)\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { FooterRow } from \"../../components/FooterRow\";\r\nimport { Header } from \"../../components/Header\";\r\nimport { Codes } from \"./Codes\";\r\n\r\nexport function CodesPage(): JSX.Element {\r\n  return (\r\n    <div className=\"page\">\r\n      <Header />\r\n      <div className=\"container mt-3\">\r\n        <div className=\"row white-row white-row-first\">\r\n          <div className=\"col\">\r\n            <nav aria-label=\"breadcrumb\">\r\n              <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                  Codes\r\n                </li>\r\n              </ol>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n        <div className=\"row white-row white-row-last\">\r\n          <div className=\"col\">\r\n            <Codes />\r\n          </div>\r\n        </div>\r\n        <FooterRow />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  readonly codeId: number;\r\n  readonly text?: string;\r\n}\r\n\r\nexport function CodeLink({ codeId, text }: Props): JSX.Element {\r\n  return <Link to={`/codes/${codeId}`}>{text || `Code #${codeId}`}</Link>;\r\n}\r\n","// Place error box below text box, so appearing error does not push text box down\r\nexport const jsonInputStyle = {\r\n  container: { display: \"flex\", flexDirection: \"column\" },\r\n  body: { order: \"1\" },\r\n  warningBox: { order: \"2\" },\r\n};\r\n","import { ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\r\nimport { Coin } from \"@cosmjs/stargate\";\r\nimport React from \"react\";\r\nimport JSONInput from \"react-json-editor-ajrm\";\r\n\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { settings } from \"../../settings\";\r\nimport { isStargateSigningClient } from \"../../ui-utils/clients\";\r\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\r\nimport { Result } from \"./ContractPage\";\r\n\r\nconst executePlaceholder = {\r\n  transfer: { recipient: \"juno14vhcdsyf83ngsrrqc92kmw8q9xakqjm0ff2dpn\", amount: \"1\" },\r\n};\r\n\r\nconst coinsPlaceholder = [{ denom: settings.backend.denominations[0], amount: \"1\" }];\r\n\r\ninterface Props {\r\n  readonly contractAddress: string;\r\n}\r\n\r\nexport function ExecuteContract({ contractAddress }: Props): JSX.Element {\r\n  const { userAddress, signingClient } = React.useContext(ClientContext);\r\n\r\n  const [executing, setExecuting] = React.useState(false);\r\n  const [error, setError] = React.useState<string>();\r\n\r\n  const [memo, setMemo] = React.useState<string>();\r\n\r\n  const [msgObject, setMsgObject] = React.useState<Result<Record<string, any>>>();\r\n  const [coinsObject, setCoinsObject] = React.useState<Result<ReadonlyArray<Coin>>>();\r\n\r\n  const [executeResponse, setExecuteResponse] = React.useState<Result<ExecuteResult>>();\r\n\r\n  React.useEffect(() => {\r\n    setMsgObject({ result: executePlaceholder });\r\n    setCoinsObject({ result: coinsPlaceholder });\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (msgObject?.error) {\r\n      setError(msgObject.error);\r\n      return;\r\n    }\r\n\r\n    if (executeResponse?.error) {\r\n      setError(executeResponse.error);\r\n      return;\r\n    }\r\n\r\n    if (coinsObject?.error) {\r\n      setError(coinsObject.error);\r\n      return;\r\n    }\r\n\r\n    setError(undefined);\r\n  }, [coinsObject, executeResponse, msgObject]);\r\n\r\n  async function executeContract(): Promise<void> {\r\n    if (!msgObject?.result || !userAddress || !signingClient) return;\r\n\r\n    setExecuting(true);\r\n\r\n    try {\r\n      if (isStargateSigningClient(signingClient)) {\r\n        const executeResponseResult: ExecuteResult = await signingClient.execute(\r\n          userAddress,\r\n          contractAddress,\r\n          msgObject.result,\r\n          memo,\r\n          coinsObject?.result,\r\n        );\r\n        setExecuteResponse({ result: executeResponseResult });\r\n      }\r\n    } catch (error) {\r\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\r\n    }\r\n\r\n    setExecuting(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <span title=\"The contract query input\">Execute contract:</span>\r\n        </li>\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <JSONInput\r\n            width=\"100%\"\r\n            height=\"200px\"\r\n            placeholder={executePlaceholder}\r\n            confirmGood={false}\r\n            style={jsonInputStyle}\r\n            onChange={({ jsObject }: any) => setMsgObject({ result: jsObject })}\r\n          />\r\n        </li>\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <span title=\"The contract query input\">Coins to transfer:</span>\r\n        </li>\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <JSONInput\r\n            width=\"100%\"\r\n            height=\"120px\"\r\n            placeholder={coinsPlaceholder}\r\n            confirmGood={false}\r\n            style={jsonInputStyle}\r\n            onChange={({ jsObject }: any) => setCoinsObject({ result: jsObject })}\r\n          />\r\n        </li>\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <span title=\"The contract query input\">Memo:</span>\r\n          <input\r\n            className=\"ml-3 flex-grow-1\"\r\n            value={memo}\r\n            onChange={(event) => setMemo(event.target.value)}\r\n          />\r\n        </li>\r\n        <div className=\"list-group-item btn-group\">\r\n          {executing ? (\r\n            <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n              <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n              Executing...\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={executeContract}\r\n              disabled={!msgObject?.result || !signingClient}\r\n            >\r\n              Execute contract\r\n            </button>\r\n          )}\r\n        </div>\r\n        {executeResponse?.result ? (\r\n          <li className=\"list-group-item\">\r\n            <span title=\"The contract formatted input\">Response:</span>\r\n            <pre className=\"mb-0\">{JSON.stringify(executeResponse.result, undefined, \"  \")}</pre>\r\n          </li>\r\n        ) : null}\r\n        {error ? (\r\n          <li className=\"list-group-item\">\r\n            <span className=\"text-danger\" title=\"The contract query error\">\r\n              {error}\r\n            </span>\r\n          </li>\r\n        ) : null}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import { MsgExecuteContract } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport React from \"react\";\r\n\r\nimport { AccountLink } from \"../../components/AccountLink\";\r\nimport { TransactionLink } from \"../../components/TransactionLink\";\r\n\r\nexport interface Execution {\r\n  readonly key: string;\r\n  readonly height: number;\r\n  readonly transactionId: string;\r\n  readonly msg: MsgExecuteContract;\r\n}\r\n\r\ninterface Props {\r\n  readonly executions: readonly Execution[];\r\n}\r\n\r\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\r\n  return (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">Height</th>\r\n          <th scope=\"col\">Transaction ID</th>\r\n          <th scope=\"col\">Sender</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {executions.map((execution, index) => (\r\n          <tr key={execution.key}>\r\n            <th scope=\"row\">{index + 1}</th>\r\n            <td>{execution.height}</td>\r\n            <td>\r\n              <TransactionLink transactionId={execution.transactionId} />\r\n            </td>\r\n            <td>\r\n              <AccountLink address={execution.msg.sender} />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import { ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-stargate\";\r\nimport React from \"react\";\r\nimport ReactJson from 'react-json-view';\r\n\r\nimport { CodeLink } from \"../../components/CodeLink\";\r\n\r\ninterface Props {\r\n  readonly contractCodeHistory: readonly ContractCodeHistoryEntry[];\r\n}\r\n\r\nexport function HistoryInfo({ contractCodeHistory }: Props): JSX.Element {\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item\">\r\n          <span title=\"The contract level message history\">History</span>\r\n        </li>\r\n        {contractCodeHistory.map((entry, index) => (\r\n          <li key={index} className=\"list-group-item\">\r\n            <span title=\"The message operation type\">\r\n              {entry.operation} - <CodeLink codeId={entry.codeId} />\r\n            </span>\r\n            <ReactJson src={entry.msg} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import { Contract } from \"@cosmjs/cosmwasm-stargate\";\r\nimport React from \"react\";\r\n\r\nimport { AccountLink } from \"../../components/AccountLink\";\r\nimport { TransactionLink } from \"../../components/TransactionLink\";\r\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\r\n\r\ninterface Props {\r\n  readonly contract: Contract;\r\n  readonly instantiationTxHash: string | undefined | ErrorState | LoadingState;\r\n}\r\n\r\nexport function InitializationInfo({ contract, instantiationTxHash }: Props): JSX.Element {\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item\">\r\n          Instantiation transaction:{\" \"}\r\n          {isLoadingState(instantiationTxHash) ? (\r\n            \"Loading …\"\r\n          ) : isErrorState(instantiationTxHash) ? (\r\n            \"Error\"\r\n          ) : instantiationTxHash === undefined ? (\r\n            \"–\"\r\n          ) : (\r\n            <TransactionLink transactionId={instantiationTxHash} />\r\n          )}\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          Creator: <AccountLink address={contract.creator} maxLength={null} />\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          Admin: {contract.admin ? <AccountLink address={contract.admin} maxLength={null} /> : \"–\"}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport JSONInput from \"react-json-editor-ajrm\";\r\n\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\r\nimport { Result } from \"./ContractPage\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/camelcase\r\nconst queryPlaceholder = { balance: { address: \"juno14vhcdsyf83ngsrrqc92kmw8q9xakqjm0ff2dpn\" } };\r\n\r\ninterface Props {\r\n  readonly contractAddress: string;\r\n}\r\n\r\nexport function QueryContract({ contractAddress }: Props): JSX.Element {\r\n  const { client } = React.useContext(ClientContext);\r\n\r\n  const [error, setError] = React.useState<string>();\r\n  const [queryObject, setQueryObject] = React.useState<Result<Record<string, any>>>();\r\n  const [queryResponse, setQueryResponse] = React.useState<Result<string>>();\r\n\r\n  React.useEffect(() => {\r\n    setQueryObject({ result: queryPlaceholder });\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (queryObject?.error) {\r\n      setError(queryObject.error);\r\n      return;\r\n    }\r\n\r\n    if (queryResponse?.error) {\r\n      setError(queryResponse.error);\r\n      return;\r\n    }\r\n\r\n    setError(undefined);\r\n  }, [queryObject, queryResponse]);\r\n\r\n  async function runQuery(): Promise<void> {\r\n    if (!client || !queryObject?.result) return;\r\n\r\n    try {\r\n      const queryResponseResult: Record<string, any> = await client.queryContractSmart(\r\n        contractAddress,\r\n        queryObject.result,\r\n      );\r\n\r\n      const formattedResult = JSON.stringify(queryResponseResult, null, \"  \");\r\n      setQueryResponse({ result: formattedResult });\r\n    } catch (error) {\r\n      setQueryResponse({ error: `Query error: ${error.message}` });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <span title=\"The contract query input\">Query contract:</span>\r\n        </li>\r\n        <li className=\"list-group-item d-flex align-items-baseline\">\r\n          <JSONInput\r\n            width=\"100%\"\r\n            height=\"200px\"\r\n            placeholder={queryPlaceholder}\r\n            confirmGood={false}\r\n            style={jsonInputStyle}\r\n            onChange={({ jsObject }: any) => setQueryObject({ result: jsObject })}\r\n          />\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            style={{ cursor: client && queryObject?.result ? \"pointer\" : \"not-allowed\" }}\r\n            onClick={runQuery}\r\n            disabled={!queryObject?.result}\r\n          >\r\n            Run query\r\n          </button>\r\n        </li>\r\n        {queryResponse?.result ? (\r\n          <li className=\"list-group-item\">\r\n            <span title=\"The query response\">Response:</span>\r\n            <pre className=\"mb-0\">{queryResponse.result}</pre>\r\n          </li>\r\n        ) : null}\r\n        {error ? (\r\n          <li className=\"list-group-item\">\r\n            <span className=\"text-danger\" title=\"The contract query error\">\r\n              {error}\r\n            </span>\r\n          </li>\r\n        ) : null}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import \"./ContractPage.css\";\r\n\r\nimport {\r\n  Contract,\r\n  ContractCodeHistoryEntry,\r\n} from \"@cosmjs/cosmwasm-stargate\";\r\nimport { Coin } from \"@cosmjs/stargate\";\r\nimport { Registry } from \"@cosmjs/proto-signing\";\r\nimport { IndexedTx } from \"@cosmjs/stargate\";\r\nimport React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nimport { CodeLink } from \"../../components/CodeLink\";\r\nimport { FooterRow } from \"../../components/FooterRow\";\r\nimport { Header } from \"../../components/Header\";\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { settings } from \"../../settings\";\r\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\r\nimport { isStargateClient, StargateClient } from \"../../ui-utils/clients\";\r\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\nimport { ExecuteContract } from \"./ExecuteContract\";\r\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\r\nimport { HistoryInfo } from \"./HistoryInfo\";\r\nimport { InitializationInfo } from \"./InitializationInfo\";\r\nimport { QueryContract } from \"./QueryContract\";\r\nimport { Tx } from \"@cosmjs/stargate/build/codec/cosmos/tx/v1beta1/tx\";\r\nimport { Any } from \"@cosmjs/stargate/build/codec/google/protobuf/any\"\r\nimport { Coin as CosmosICoin } from \"@cosmjs/stargate/build/codec/cosmos/base/v1beta1/coin\";\r\n\r\ntype ICoin = CosmosICoin;\r\ntype IAny = Any;\r\n\r\ntype IAnyMsgExecuteContract = {\r\n  readonly typeUrl: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\r\n  readonly value: Uint8Array;\r\n};\r\n\r\nexport type Result<T> = { readonly result?: T; readonly error?: string };\r\n\r\nfunction isStargateMsgExecuteContract(msg: IAny): msg is IAnyMsgExecuteContract {\r\n  return msg.typeUrl === \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\" && !!msg.value;\r\n}\r\n\r\nconst getAndSetDetails = (\r\n  client: StargateClient,\r\n  contractAddress: string,\r\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\r\n): void => {\r\n  client\r\n    .getContract(contractAddress)\r\n    .then(setDetails)\r\n    .catch(() => setDetails(errorState));\r\n};\r\n\r\nconst getAndSetContractCodeHistory = (\r\n  client: StargateClient,\r\n  contractAddress: string,\r\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\r\n): void => {\r\n  client\r\n    .getContractCodeHistory(contractAddress)\r\n    .then(setContractCodeHistory)\r\n    .catch((error) => {\r\n      console.error(error);\r\n    });\r\n};\r\n\r\nconst getAndSetInstantiationTxHash = (\r\n  client: StargateClient,\r\n  contractAddress: string,\r\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\r\n): void => {\r\n  (client.searchTx({\r\n    tags: makeTags(\r\n      `message.module=wasm&message.action=instantiate&message.contract_address=${contractAddress}`,\r\n    ),\r\n  }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\r\n    .then((results) => {\r\n      const first = results.find(() => true);\r\n      setInstantiationTxHash(first?.hash);\r\n    })\r\n    .catch(() => setInstantiationTxHash(errorState));\r\n};\r\n\r\nfunction getExecutionFromStargateMsgExecuteContract(typeRegistry: Registry, tx: IndexedTx) {\r\n  return (msg: IAnyMsgExecuteContract, i: number) => {\r\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value });\r\n    return {\r\n      key: `${tx.hash}_${i}`,\r\n      height: tx.height,\r\n      transactionId: tx.hash,\r\n      msg: decodedMsg,\r\n    };\r\n  };\r\n}\r\n\r\nconst stargateEffect = (\r\n  client: StargateClient,\r\n  contractAddress: string,\r\n  typeRegistry: Registry,\r\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\r\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\r\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\r\n  setExecutions: (executions: readonly Execution[] | ErrorState | LoadingState) => void,\r\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\r\n) => () => {\r\n  getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\r\n  getAndSetDetails(client, contractAddress, setDetails);\r\n  getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\r\n\r\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(contractAddress, denom)))\r\n    .then((balances) => {\r\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\r\n      setBalance(filteredBalances);\r\n    })\r\n    .catch(() => setBalance(errorState));\r\n\r\n  client\r\n    .searchTx({\r\n      tags: makeTags(`message.contract_address=${contractAddress}&message.action=execute`),\r\n    })\r\n    .then((txs) => {\r\n      const out = txs.reduce((executions: readonly Execution[], tx: IndexedTx): readonly Execution[] => {\r\n        const decodedTx = Tx.decode(tx.tx);\r\n        const txExecutions = (decodedTx?.body?.messages ?? [])\r\n          .filter(isStargateMsgExecuteContract)\r\n          .map(getExecutionFromStargateMsgExecuteContract(typeRegistry, tx));\r\n        return [...executions, ...txExecutions];\r\n      }, []);\r\n      setExecutions(out);\r\n    })\r\n    .catch(() => setExecutions(errorState));\r\n};\r\n\r\nexport function ContractPage(): JSX.Element {\r\n  const { client, typeRegistry } = React.useContext(ClientContext);\r\n  const { contractAddress: contractAddressParam } = useParams<{ readonly contractAddress: string }>();\r\n  const contractAddress = contractAddressParam || \"\";\r\n\r\n  const [details, setDetails] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\r\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\r\n  const [instantiationTxHash, setInstantiationTxHash] = React.useState<\r\n    string | undefined | ErrorState | LoadingState\r\n  >(loadingState);\r\n  const [contractCodeHistory, setContractCodeHistory] = React.useState<readonly ContractCodeHistoryEntry[]>(\r\n    [],\r\n  );\r\n  const [executions, setExecutions] = React.useState<readonly Execution[] | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n\r\n  React.useEffect(\r\n    isStargateClient(client)\r\n      ? stargateEffect(\r\n          client,\r\n          contractAddress,\r\n          typeRegistry,\r\n          setBalance,\r\n          setContractCodeHistory,\r\n          setDetails,\r\n          setExecutions,\r\n          setInstantiationTxHash,\r\n        )\r\n      : () => {},\r\n    [client, contractAddress, typeRegistry],\r\n  );\r\n\r\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <Header />\r\n      <div className=\"container mt-3 contract-container\">\r\n        <div className=\"row white-row white-row-first\">\r\n          <div className=\"col\">\r\n            <nav aria-label=\"breadcrumb\">\r\n              <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <Link to=\"/codes\">Codes</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">\r\n                  {isLoadingState(details) ? (\r\n                    <span>Loading …</span>\r\n                  ) : isErrorState(details) ? (\r\n                    <span>Error</span>\r\n                  ) : (\r\n                    <CodeLink codeId={details.codeId} />\r\n                  )}\r\n                </li>\r\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                  {pageTitle}\r\n                </li>\r\n              </ol>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n        <div className=\"row white-row\">\r\n          <div className=\"col-12 col-md-6\">\r\n            <h1>{pageTitle}</h1>\r\n            <ul className=\"list-group list-group-horizontal mb-3\">\r\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\r\n                Balance:{\" \"}\r\n                {isLoadingState(balance)\r\n                  ? \"Loading …\"\r\n                  : isErrorState(balance)\r\n                  ? \"Error\"\r\n                  : printableBalance(balance)}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"col-12 col-md-6\">\r\n            {isLoadingState(details) ? (\r\n              <p>Loading …</p>\r\n            ) : isErrorState(details) ? (\r\n              <p>An Error occurred when loading contract</p>\r\n            ) : (\r\n              <>\r\n                <InitializationInfo contract={details} instantiationTxHash={instantiationTxHash} />\r\n                <HistoryInfo contractCodeHistory={contractCodeHistory} />\r\n                <QueryContract contractAddress={contractAddress} />\r\n                <ExecuteContract contractAddress={contractAddress} />\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"row white-row white-row-last\">\r\n          <div className=\"col\">\r\n            <h2>Executions</h2>\r\n            {isLoadingState(executions) ? (\r\n              <p>Loading …</p>\r\n            ) : isErrorState(executions) ? (\r\n              <p>An Error occurred when loading transactions</p>\r\n            ) : executions.length !== 0 ? (\r\n              <ExecutionsTable executions={executions} />\r\n            ) : (\r\n              <p>Contract was not yet executed</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <FooterRow />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { fromRfc3339 } from \"@cosmjs/encoding\";\r\nimport { IndexedTx } from \"@cosmjs/stargate\";\r\nimport React from \"react\";\r\n\r\nconst checkMark = \"✔\"; // U+2714 HEAVY CHECK MARK\r\nconst xMark = \"🗙\"; // U+1F5D9 CANCELLATION X\r\n\r\ninterface Props {\r\n  readonly tx: IndexedTx;\r\n  readonly timestamp: string;\r\n}\r\n\r\nexport function ExecutionInfo({ tx, timestamp }: Props): JSX.Element {\r\n  const time = timestamp ? fromRfc3339(timestamp): null;\r\n  const success = tx.code === 0;\r\n\r\n  return (\r\n    <ul className=\"list-group list-group-horizontal mb-3\">\r\n      <li className=\"list-group-item\">Height: {tx.height}</li>\r\n      <li className=\"list-group-item\">\r\n      <span title={timestamp}>Time: {time?.toLocaleString()}</span>\r\n      </li>\r\n      <li className=\"list-group-item\">\r\n        <span title={`Execution succeeded: ${success ? \"yes\" : \"no\"}`}>\r\n          Success: {success ? checkMark : `${xMark} (error code ${tx.code})`}\r\n        </span>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n","import { MsgExecuteContract as MsgExecuteCtr } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport React, { Fragment } from \"react\";\r\n\r\nimport { AccountLink } from \"../../../components/AccountLink\";\r\nimport { ContractLink } from \"../../../components/ContractLink\";\r\nimport { parseMsgContract, printableBalance } from \"../../../ui-utils\";\r\n\r\nimport ReactJson from 'react-json-view';\r\n\r\ntype IMsgExecuteContract = MsgExecuteCtr;\r\n\r\ninterface Props {\r\n  readonly msg: IMsgExecuteContract;\r\n}\r\n\r\nexport function MsgExecuteContract({ msg }: Props): JSX.Element {\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <li className=\"list-group-item\">\r\n        Contract: <ContractLink address={msg.contract ?? \"-\"} maxLength={null} />\r\n      </li>\r\n      <li className=\"list-group-item\">\r\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\r\n      </li>\r\n      <li className=\"list-group-item\">Sent funds: {printableBalance(msg.funds)}</li>\r\n      <li className=\"list-group-item\">\r\n        <span title=\"The contract level message\">Handle message</span>:\r\n        <ReactJson src={parseMsgContract(msg.msg)} />\r\n      </li>\r\n    </Fragment>\r\n  );\r\n}\r\n","import { MsgInstantiateContract as MsgInitContract } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport React, { Fragment } from \"react\";\r\n\r\nimport { AccountLink } from \"../../../components/AccountLink\";\r\nimport { CodeLink } from \"../../../components/CodeLink\";\r\nimport { parseMsgContract, printableBalance } from \"../../../ui-utils\";\r\n\r\nimport ReactJson from 'react-json-view';\r\n\r\ntype IMsgInstantiateContract = MsgInitContract;\r\n\r\ninterface Props {\r\n  readonly msg: IMsgInstantiateContract;\r\n}\r\n\r\nexport function MsgInstantiateContract({ msg }: Props): JSX.Element {\r\n  return (\r\n    <Fragment>\r\n      <li className=\"list-group-item\">\r\n        Sender: <AccountLink address={msg.sender || \"-\"} maxLength={null} />\r\n      </li>\r\n      <li className=\"list-group-item\">\r\n        Code ID: <CodeLink codeId={msg.codeId?.toNumber() ?? 0} text={msg.codeId?.toString() ?? \"-\"} />\r\n      </li>\r\n      <li className=\"list-group-item\">Label: {msg.label}</li>\r\n      <li className=\"list-group-item\">Init funds: {printableBalance(msg.funds)}</li>\r\n      <li className=\"list-group-item\">\r\n        <span title=\"The contract level message\">Init message</span>:\r\n        <ReactJson src={parseMsgContract(msg.initMsg)} />\r\n      </li>\r\n    </Fragment>\r\n  );\r\n}\r\n","import { MsgSend as CosmosMsgSend } from \"@cosmjs/stargate/build/codec/cosmos/bank/v1beta1/tx\";\r\nimport React, { Fragment } from \"react\";\r\n\r\nimport { AccountLink } from \"../../../components/AccountLink\";\r\nimport { printableBalance } from \"../../../ui-utils\";\r\n\r\ntype IMsgSend = CosmosMsgSend;\r\n\r\ninterface Props {\r\n  readonly msg: IMsgSend;\r\n}\r\n\r\nexport function MsgSend({ msg }: Props): JSX.Element {\r\n  return (\r\n    <Fragment>\r\n      <li className=\"list-group-item\">\r\n        Sender: <AccountLink address={msg.fromAddress ?? \"-\"} maxLength={null} />\r\n      </li>\r\n      <li className=\"list-group-item\">\r\n        Recipient: <AccountLink address={msg.toAddress ?? \"-\"} maxLength={null} />\r\n      </li>\r\n      <li className=\"list-group-item\">Amount: {printableBalance(msg.amount ?? [])}</li>\r\n    </Fragment>\r\n  );\r\n}\r\n","import { fromHex } from \"@cosmjs/encoding\";\r\n\r\nfunction arrayEqual(a: Uint8Array, b: Uint8Array): boolean {\r\n  if (a.length !== b.length) return false;\r\n  const difference = a.some((byte, index) => b[index] !== byte);\r\n  return !difference;\r\n}\r\n\r\nfunction arrayStartsWith(a: Uint8Array, prefix: Uint8Array): boolean {\r\n  return arrayEqual(a.slice(0, prefix.length), prefix);\r\n}\r\n\r\nconst magic = {\r\n  gzip: fromHex(\"1F8B\"),\r\n  wasm: fromHex(\"0061736d\"),\r\n};\r\n\r\nexport type SupportedTypes = \"gzip\" | \"wasm\";\r\n\r\nexport function getFileType(data: Uint8Array): SupportedTypes | undefined {\r\n  if (arrayStartsWith(data, magic.gzip)) return \"gzip\";\r\n  if (arrayStartsWith(data, magic.wasm)) return \"wasm\";\r\n  return undefined;\r\n}\r\n","import \"./MsgStoreCode.css\";\r\n\r\nimport { MsgStoreCode as MsgStoreC } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport { toBase64 } from \"@cosmjs/encoding\";\r\nimport React, { Fragment } from \"react\";\r\n\r\nimport { AccountLink } from \"../../../components/AccountLink\";\r\nimport { ellideRight } from \"../../../ui-utils\";\r\nimport { getFileType } from \"./magic\";\r\n\r\ntype IMsgStoreCode = MsgStoreC;\r\n\r\ninterface Props {\r\n  readonly msg: IMsgStoreCode;\r\n}\r\n\r\nexport function MsgStoreCode({ msg }: Props): JSX.Element {\r\n  const [showAllCode, setShowAllCode] = React.useState<boolean>(false);\r\n\r\n  const dataInfo = React.useMemo(() => {\r\n    const data = msg.wasmByteCode ?? new Uint8Array();\r\n    return `${getFileType(data) || \"unknown\"}; ${data.length} bytes`;\r\n  }, [msg.wasmByteCode]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <li className=\"list-group-item\">\r\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\r\n      </li>\r\n      <li className=\"list-group-item\">Source: {msg.source || \"–\"}</li>\r\n      <li className=\"list-group-item\">Builder: {msg.builder || \"–\"}</li>\r\n      <li className=\"list-group-item\">\r\n        Data: {dataInfo}{\" \"}\r\n        {!showAllCode ? (\r\n          <Fragment>\r\n            <code>{ellideRight(toBase64(msg.wasmByteCode ?? new Uint8Array()), 300)}</code>{\" \"}\r\n            <button className=\"btn btn-sm btn-outline-primary\" onClick={() => setShowAllCode(true)}>\r\n              Show all\r\n            </button>\r\n          </Fragment>\r\n        ) : (\r\n          <code className=\"long-inline-code\">{msg.wasmByteCode}</code>\r\n        )}\r\n      </li>\r\n    </Fragment>\r\n  );\r\n}\r\n","import { Tx } from \"@cosmjs/stargate/build/codec/cosmos/tx/v1beta1/tx\";\r\nimport React from \"react\";\r\n\r\nimport { printableBalance } from \"../../ui-utils\";\r\n\r\ntype ITx = Tx;\r\n\r\ninterface Props {\r\n  readonly tx: ITx;\r\n}\r\n\r\nexport function TxInfo({ tx }: Props): JSX.Element {\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item\">Memo: {tx.body?.memo || \"–\"}</li>\r\n        <li className=\"list-group-item\">Fee: {printableBalance(tx.authInfo?.fee?.amount ?? [])}</li>\r\n        <li className=\"list-group-item\">Gas: {tx.authInfo?.fee?.gasLimit?.toString() ?? \"0\"}</li>\r\n        <li className=\"list-group-item\">Signatures: {tx.signatures?.length ?? 0}</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import \"./TxPage.css\";\r\n\r\nimport { IndexedTx, Block } from \"@cosmjs/stargate\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { FooterRow } from \"../../components/FooterRow\";\r\nimport { Header } from \"../../components/Header\";\r\nimport { ClientContext } from \"../../contexts/ClientContext\";\r\nimport { ellideMiddle } from \"../../ui-utils\";\r\nimport { isStargateClient, StargateClient } from \"../../ui-utils/clients\";\r\nimport {\r\n  ErrorState,\r\n  errorState,\r\n  isErrorState,\r\n  isLoadingState,\r\n  LoadingState,\r\n  loadingState,\r\n} from \"../../ui-utils/states\";\r\nimport {\r\n  isAnyMsgExecuteContract,\r\n  isAnyMsgInstantiateContract,\r\n  isAnyMsgSend,\r\n  isAnyMsgStoreCode,\r\n} from \"../../ui-utils/txs\";\r\nimport { ExecutionInfo } from \"./ExecutionInfo\";\r\nimport { MsgExecuteContract } from \"./msgs/MsgExecuteContract\";\r\nimport { MsgInstantiateContract } from \"./msgs/MsgInstantiateContract\";\r\nimport { MsgSend } from \"./msgs/MsgSend\";\r\nimport { MsgStoreCode } from \"./msgs/MsgStoreCode\";\r\nimport { TxInfo } from \"./TxInfo\";\r\nimport { Tx } from \"@cosmjs/stargate/build/codec/cosmos/tx/v1beta1/tx\"\r\n\r\nexport function TxPage(): JSX.Element {\r\n  const { client, typeRegistry } = React.useContext(ClientContext);\r\n  const { txId: txIdParam } = useParams<{ readonly txId: string }>();\r\n  const txId = txIdParam || \"\";\r\n\r\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\r\n\r\n  const [details, setDetails] = React.useState<IndexedTx | undefined | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n\r\n  const [block, setBlock] = React.useState<Block | undefined | ErrorState | LoadingState>(\r\n    loadingState,\r\n  );\r\n\r\n  React.useEffect(\r\n    () => {\r\n      client?.getTx(txId)\r\n      .then((tx) => {\r\n        setDetails(tx || undefined);\r\n        if (!tx) return;\r\n        client?.getBlock(tx.height)\r\n          .then((b) => {\r\n            setBlock(b);\r\n          })\r\n          .catch(() => setBlock(errorState));\r\n      })\r\n      .catch(() => setDetails(errorState));\r\n    },\r\n    [client, txId, typeRegistry],\r\n  );\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <Header />\r\n      <div className=\"container mt-3\">\r\n        <div className=\"row white-row white-row-first\">\r\n          <div className=\"col\">\r\n            <nav aria-label=\"breadcrumb\">\r\n              <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                  {pageTitle}\r\n                </li>\r\n              </ol>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row white-row\">\r\n          <div className=\"col\">\r\n            <h1>{pageTitle}</h1>\r\n            {isLoadingState(details) ? (\r\n              <p>Loading...</p>\r\n            ) : isErrorState(details) ? (\r\n              <p>Error</p>\r\n            ) : details === undefined ? (\r\n              <p>Transaction not found</p>\r\n            ) : (\r\n              <ExecutionInfo tx={details} timestamp={isLoadingState(block) || isErrorState(block) ? \"\" : block?.header.time || \"\"} />\r\n            )}\r\n          </div>\r\n          <div className=\"col\">\r\n            {isLoadingState(details) ? (\r\n              <p>Loading …</p>\r\n            ) : isErrorState(details) ? (\r\n              <p>Error</p>\r\n            ) : details === undefined ? (\r\n              <p>Transaction not found</p>\r\n            ) : (\r\n              <TxInfo tx={Tx.decode(details.tx)} />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row white-row white-row-last\">\r\n          <div className=\"col\">\r\n            <h2>Messages</h2>\r\n            <p>\r\n              A Cosmos SDK transaction is composed of one or more messages, that represent actions to be\r\n              executed.\r\n            </p>\r\n            {isLoadingState(details) ? (\r\n              <p>Loading …</p>\r\n            ) : isErrorState(details) ? (\r\n              <p>Error</p>\r\n            ) : details === undefined ? (\r\n              <p>Transaction not found</p>\r\n            ) : (\r\n              Tx.decode(details.tx).body?.messages?.map((msg: any, index: number) => (\r\n                <div className=\"card mb-3\" key={`${details.hash}_${index}`}>\r\n                  <div className=\"card-header\">\r\n                    Message {index + 1} (Type: <code>{msg.typeUrl || <em>unset</em>}</code>)\r\n                  </div>\r\n                  <ul className=\"list-group list-group-flush\">\r\n                    {isAnyMsgSend(msg) ? (\r\n                      <MsgSend msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })} />\r\n                    ) : isAnyMsgStoreCode(msg) ? (\r\n                      <MsgStoreCode msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })} />\r\n                    ) : isAnyMsgInstantiateContract(msg) ? (\r\n                      <MsgInstantiateContract\r\n                        msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })}\r\n                      />\r\n                    ) : isAnyMsgExecuteContract(msg) ? (\r\n                      <MsgExecuteContract\r\n                        msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })}\r\n                      />\r\n                    ) : (\r\n                      <li className=\"list-group-item\">\r\n                        <em>This message type cannot be displayed</em>\r\n                      </li>\r\n                    )}\r\n                  </ul>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <FooterRow />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  readonly type: \"browser-router\" | \"hash-router\";\r\n  readonly children: React.ReactNode;\r\n}\r\n\r\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\r\n  switch (type) {\r\n    case \"browser-router\":\r\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\r\n    case \"hash-router\":\r\n      return <HashRouter>{children}</HashRouter>;\r\n  }\r\n}\r\n","import { MsgExecuteContract, MsgInstantiateContract, MsgStoreCode } from \"@cosmjs/cosmwasm-stargate/build/codec/cosmwasm/wasm/v1beta1/tx\";\r\nimport { Registry } from \"@cosmjs/proto-signing\";\r\nimport React from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router\";\r\n\r\nimport { ClientContext, ClientContextValue } from \"../contexts/ClientContext\";\r\nimport { AccountPage } from \"../pages/account/AccountPage\";\r\nimport { CodePage } from \"../pages/code/CodePage\";\r\nimport { CodesPage } from \"../pages/codes/CodesPage\";\r\nimport { ContractPage } from \"../pages/contract/ContractPage\";\r\nimport { TxPage } from \"../pages/tx/TxPage\";\r\nimport { settings } from \"../settings\";\r\nimport {\r\n  StargateClient,\r\n  StargateSigningClient,\r\n} from \"../ui-utils/clients\";\r\nimport {\r\n  msgExecuteContractTypeUrl,\r\n  msgInstantiateContractTypeUrl,\r\n  msgStoreCodeTypeUrl,\r\n} from \"../ui-utils/txs\";\r\nimport { FlexibleRouter } from \"./FlexibleRouter\";\r\n\r\nconst { nodeUrls, stargateEnabled } = settings.backend;\r\nconst typeRegistry = new Registry([\r\n  [msgStoreCodeTypeUrl, MsgStoreCode],\r\n  [msgInstantiateContractTypeUrl, MsgInstantiateContract],\r\n  [msgExecuteContractTypeUrl, MsgExecuteContract],\r\n]);\r\n\r\nexport function App(): JSX.Element {\r\n  const [nodeUrl, setNodeUrl] = React.useState(nodeUrls[0]);\r\n  const [userAddress, setUserAddress] = React.useState<string>();\r\n  const [signingClient, setSigningClient] = React.useState<StargateSigningClient>();\r\n  const [contextValue, setContextValue] = React.useState<ClientContextValue>({\r\n    nodeUrl: nodeUrl,\r\n    client: null,\r\n    typeRegistry: typeRegistry,\r\n    resetClient: setNodeUrl,\r\n    userAddress: userAddress,\r\n    setUserAddress: setUserAddress,\r\n    signingClient: signingClient,\r\n    setSigningClient: setSigningClient,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    (async function updateContextValue() {\r\n      const client = await StargateClient.connect(nodeUrl);\r\n      setContextValue((prevContextValue) => ({ ...prevContextValue, nodeUrl: nodeUrl, client: client }));\r\n    })();\r\n  }, [nodeUrl]);\r\n\r\n  React.useEffect(() => {\r\n    setContextValue((prevContextValue) => ({ ...prevContextValue, signingClient: signingClient }));\r\n  }, [signingClient]);\r\n\r\n  React.useEffect(() => {\r\n    setContextValue((prevContextValue) => ({ ...prevContextValue, userAddress: userAddress }));\r\n  }, [userAddress]);\r\n\r\n  return (\r\n    <ClientContext.Provider value={contextValue}>\r\n      <FlexibleRouter type={settings.deployment.routerType}>\r\n        <Switch>\r\n          <Route exact path=\"/codes\" component={CodesPage} />\r\n          <Route path=\"/codes/:codeId\" component={CodePage} />\r\n          <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\r\n          <Route path=\"/transactions/:txId\" component={TxPage} />\r\n          <Route path=\"/accounts/:address\" component={AccountPage} />\r\n          <Route component={() => <Redirect to=\"/codes\" />} />\r\n        </Switch>\r\n      </FlexibleRouter>\r\n    </ClientContext.Provider>\r\n  );\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle\";\r\nimport \"jquery/dist/jquery.slim\";\r\nimport \"./index.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}